var search_data = {"index":{"searchIndex":["bio","aaindex","aaindex1","aaindex2","abif","directoryentry","alignment","arrayextension","enumerableextension","factorytemplate","fileinfileout","fileinfileoutwithtree","fileinstdoutout","simple","stdininfileout","wrapinputstdin","wrapinputtempfile","wrapoutputstdout","wrapoutputtempfile","gap","hashextension","multifastaformat","originalalignment","originalprivate","output","propertymethods","sequencearray","sequencehash","site","sitemethods","aminoacid","data","blast","bl2seq","report","hsp","hit","iteration","default","report","hsp","hit","iteration","report_tblast","fastacmd","ncbioptions","rpsblast","rpsblastsplitter","report","flatfile_splitter","iteration","remote","genomenet","information","genomenet","information","report","blastxmlsplitter","flatfile_splitter","hit","hsp","iteration","report_tab","wu","report","hsp","hit","iteration","report_tblast","blat","report","hit","segmentpair","seqdesc","clustalw","report","codontable","colorscheme","command","tmpdir","remover","contingencytable","das","dna","dsn","entry_point","feature","gff","group","link","segment","sequence","target","type","types","db","ddbj","embl","embldb","common","emboss","fantom","maxml","annotation","datasrc","annotations","cluster","sequence","sequences","fasta","report","flatfile_splitter","fastaformat10splitter","hit","query","target","program","fastadefline","fastaformat","fastanumericformat","fastq","error","diff_ids","long_qual","no_atmark","no_ids","no_qual","no_seq","qual_char","qual_range","seq_char","short_qual","skipped_unformatted_lines","formatdata","fastq_illumina","fastq_sanger","fastq_solexa","feature","qualifier","features","fetch","ebi","flatfile","autodetect","ruledebug","ruleproc","ruleregexp","ruleregexp2","rulespecial","ruletemplate","rulesarray","bufferedinputstream","splitter","default","lineoriented","template","unknowndataformaterror","flatfileindex","bdb_1","bdbmappingfile","primarynamespace","secondarynamespace","bdbdefault","bdbwrapper","debug","databank","fileid","fileids","flat_1","flatmappingfile","primarynamespace","record","secondarynamespace","indexer","namespace","namespaces","parser","blastdefaultparser","emblparser","fastaformatparser","genbankparser","genpeptparser","maxmlclusterparser","maxmlsequenceparser","pdbchemicalcomponentparser","sptrparser","templateparser","namespaces","results","template","namespace","gcg","msf","seq","gff","gff2","escape","metadata","record","value","gff3","escape","record","gap","code","target","recordboundary","sequenceregion","record","go","external2go","geneassociation","ontology","genbank","locus","genpept","locus","genscan","report","exon","gene","hmmer","report","hit","hsp","hinv","acc2hit","common","hit2acc","hitcnt","hitdefinition","hitpubmedid","hitxml","hix2hit","hixcnt","hixrepresent","hixxml","idsearch","keywordsearch","iprscan","report","match","kegg","brite","compound","common","dblinksashash","diseasesashash","genesashash","modulesashash","orthologsashash","pathwaysashash","references","stringsashash","drug","enzyme","expression","genes","genome","glycan","kgml","entry","graphics","product","reaction","relation","substrate","substrateproduct","keggtab","db","module","orthology","pathway","reaction","keggdb","litdb","lasergene","location","locations","mafft","report","medline","map","actslikemap","actslikemarker","mapping","marker","simplemap","meme","mast","report","motif","muscle","default_parser","nbrf","ncbi","rest","efetch","methods","esearch","methods","ncbidb","common","newick","parseerror","nexus","charactersblock","datablock","distancesblock","genericblock","nexusmatrix","nexusmatrixerror","nexusparseerror","taxablock","treesblock","util","nucleicacid","data","paml","baseml","report","codeml","model","positivesite","positivesites","rates","report","reporterror","reportsingle","common","report","yn00","report","pdb","atomfinder","chain","chainfinder","chemicalcomponent","record","coordinate","datatype","constlikemethod","pdb_achar","pdb_atom","pdb_character","pdb_date","pdb_idcode","pdb_integer","pdb_lstring","pdb_list","pdb_real","pdb_residue_name","pdb_slist","pdb_specification_list","pdb_string","pdb_stringrj","pdb_symop","hetatmfinder","heterogen","heterogenfinder","model","modelfinder","record","anisou","atom","hetatm","jrnl","remark1","remark2","residue","residuefinder","utils","prosite","psort","cgidriver","ipsort","psort1","remote","report","psort2","remote","report","psortb","wolf_psort","pts1","report","pathway","phylip","distancematrix","phylipformat","probcons","default_parser","pubmed","rebase","refseq","reference","references","registry","db","relation","restrictionenzyme","analysis","cutsymbol","cutsymbol__","denseintarray","doublestranded","alignedstrands","cutlocationpair","cutlocationpairinenzymenotation","cutlocations","cutlocationsinenzymenotation","enzymeaction","fragments","range","cutrange","cutranges","horizontalcutrange","sequencerange","calculatedcuts","fragment","fragments","verticalcutrange","singlestrand","cutlocationsinenzymenotation","singlestrandcomplement","sortednumarray","stringformatting","soft","sosui","report","tmh","sangerchromatogram","scf","sequence","aa","adapter","embl","fastaformat","fastanumericformat","fastq","genbank","sangerchromatogram","common","dblink","format","aminoformatter","formatter","fasta","fasta_ncbi","fasta_numeric","fastq","fastq_illumina","fastq_sanger","fastq_solexa","qual","raw","formatterbase","insdfeaturehelper","nucformatter","embl","genbank","na","qualityscore","converter","phred","solexa","sequencemasker","sirna","pair","shrna","sim4","report","hit","segment","segmentpair","seqdesc","spidey","report","hit","segment","segmentpair","seqdesc","swissprot","tmhmm","report","tmh","transfac","cell","class","factor","gene","matrix","site","targetp","report","tcoffee","default_parser","togows","accesswait","rest","trembl","tree","edge","nopatherror","node","uniprotkb","object","*()","+()","+()","+()","+()","<<()","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","pdb_lstring()","pdb_real()","pdb_string()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","__output_phylip_common()","__store__()","aa()","aa()","aalen()","aalen()","aalen()","aalen()","aalen()","aaseq()","aaseq()","aaseq()","aaseq()","aaseq()","aaseq()","aaseq()","ab()","absolute()","abstract()","ac()","ac()","ac()","acc2hit()","acc_version()","acc_version()","acc_version()","acceptor_score()","accession()","accession()","accession()","accession()","accession()","accession()","accessions()","accessions()","accessions()","accessions()","accessions()","acos()","activity()","ad()","adapter()","add()","add()","add()","add()","addatom()","addchain()","addligand()","addmodel()","addresidue()","addsolvent()","add_attribute()","add_continuation()","add_cut_range()","add_cut_ranges()","add_cuts_from_cut_ranges()","add_defline()","add_edge()","add_exclusive()","add_header_line()","add_header_line()","add_horizontal_cut_range()","add_line()","add_line()","add_mapping_as_map()","add_mapping_as_marker()","add_node()","add_nr()","add_options()","add_overwrite()","add_record()","add_secondary_namespaces()","add_seq()","add_sequences()","add_spacing()","add_taxon()","add_taxon()","add_token()","add_tree()","add_tree_name()","addindex_bdb()","addindex_flat()","adjacency_matrix()","adjacent_nodes()","affiliations()","alias_list()","aliases()","align()","align()","align()","align()","align()","align()","align_len()","align_len()","align_with_cuts()","aligned_strands()","aligned_strands_with_cuts()","alignment()","alignment()","alignment()","alignment()","alignment()","alignment()","alignment()","alignment()","alignment_collect()","alignment_collect()","alignment_collect()","alignment_concat()","alignment_concat()","alignment_length()","alignment_lstrip!()","alignment_normalize!()","alignment_rstrip!()","alignment_site()","alignment_slice()","alignment_strip!()","alignment_subseq()","alignment_window()","all_reac()","alpha()","altid()","always_check=()","always_check_consistency()","always_check_consistency=()","ancestors()","annotations()","append()","append()","append()","append()","append_hsp()","array_to_string()","assoc()","at_content()","at_skew()","atom_seq()","atoms()","attribute()","attributes_to_hash()","au()","author()","author()","authors()","authors()","auto()","auto()","auto()","auto()","autodetect()","autodetect()","autodetect()","autodetect_file()","autodetect_flatfile()","autodetect_io()","autodetect_stream()","ba()","basecount()","bc()","bdb_open()","bellman_ford()","bf()","bf()","bf()","bfs()","bfs_shortest_path()","bgcolor()","bgcolor=()","bibitem()","bibtex()","bit_score()","bit_score()","bit_score()","blast()","block_count()","block_it()","block_sizes()","blocks()","blunt?()","bootstrap=()","bootstrap_string=()","both_intron()","breadth_first_search()","bs()","bs()","cache_all()","calc_checksum()","calculateplane()","call()","call_command()","call_command_fork()","call_command_open3()","call_command_popen()","cc()","cc()","cc()","cc()","cd()","cdna_rep_h_invitational()","cdna_splicing_isoform_curation()","cds_start()","cds_stop()","cell()","centreofgravity()","chains()","check()","check()","check_all()","check_consistency()","check_consistency()","check_options()","chi_square()","chi_square_element()","child_nodes()","children()","chose_sort_proc()","chromosome()","chromosomes()","circular()","circular()","cl()","cl()","classes()","classes()","classification()","classification()","clean_all()","clear()","clear_node()","clear_relations!()","clique()","cliquishness()","cloneids()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close!()","close_all()","close_all()","close_flatfile()","closed?()","cn()","co()","codes()","codon_usage()","codon_usage()","cofactors()","collect!()","collect_align()","collect_each_site()","collect_edge!()","collect_node!()","cols()","column_sum()","column_sum_all()","comment()","comment()","comment()","comment()","comment()","comment()","comment()","comment()","comment()","comment()","comment()","comment_only?()","comments()","comments()","comments=()","comments=()","common_name()","common_subgraph()","compact()","compact!()","compcheck()","complement()","complement()","complement()","complement()","complement()","complement!()","complement!()","complement?()","complement?()","complement_to_array_index()","composition()","composition()","compounds()","compounds()","compounds()","compounds_as_hash()","compounds_as_hash()","compounds_as_strings()","compounds_as_strings()","concat()","concat()","concat()","concat()","concat()","conect()","config()","consensus_each_site()","consensus_iupac()","consensus_iupac()","consensus_string()","consensus_string()","contains_marker?()","contingency_coefficient()","continue?()","continue?()","control_avg()","control_sd()","control_var()","converged?()","converged?()","convert()","convert()","convert_match()","convert_nothing()","convert_scores_from_phred_to_solexa()","convert_scores_from_solexa_to_phred()","convert_to_xyz()","convert_unmatch()","copy()","correlation_coefficient()","count()","cp()","crc64()","create()","create_action_at()","create_bins()","create_config_file()","create_control_file()","create_cut_locations()","create_definition_hash()","create_enzyme_actions()","create_primary_and_complement()","cu_list()","current()","custom_raise()","cut()","cut()","cut()","cut_and_return_by_permutations()","cut_symbol()","cut_symbol()","cut_symbol=()","cut_with_enzyme()","cut_with_enzymes()","cut_without_permutations()","cut_without_permutations()","dn_ds()","dn_ds()","data()","data()","data_class()","data_source()","data_source()","data_source_coverage()","data_source_db_reference_protein_motif_id()","data_source_definition()","data_source_homologous_species()","data_source_identity()","data_source_similarity_category()","database()","database_description()","databases()","databases()","datasrc()","date()","date()","date()","date()","date()","date()","date_created()","date_modified()","date_modified()","db()","db()","db()","db_by_abbrev()","db_ids()","db_len()","db_num()","db_path()","db_path_by_abbrev()","dbclass=()","dbclasses()","dbclasses()","dblinks()","dblinks()","dblinks()","dblinks()","dblinks()","dblinks()","dblinks()","dblinks()","dblinks()","dblinks_as_hash()","dblinks_as_hash()","dblinks_as_hash()","dblinks_as_hash()","dblinks_as_hash()","dblinks_as_hash()","dblinks_as_hash()","dblinks_as_hash()","dblinks_as_strings()","dblinks_as_strings()","dblinks_as_strings()","dblinks_as_strings()","dblinks_as_strings()","dblinks_as_strings()","dblinks_as_strings()","dbref()","dbs()","dbsource()","de()","de()","de()","de()","de()","def_rec()","default()","default=()","default_email()","default_email=()","default_namespaces()","default_namespaces=()","default_parser()","default_parser()","default_tool()","default_tool=()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","delete()","delete()","delete()","delete()","delete()","delete_attribute()","delete_attributes()","depth_first_search()","descendents()","descr()","description()","description()","description()","description()","descriptions()","design()","design()","dfs()","dfs_topological_sort()","dihedral_angle()","dijkstra()","directed()","directed?()","direction()","disease()","diseases()","diseases()","diseases()","diseases_as_hash()","diseases_as_hash()","diseases_as_hash()","diseases_as_strings()","diseases_as_strings()","distance()","distance()","distance()","distance=()","distance_matrix()","distance_string=()","divent()","division()","division()","division()","division()","division()","dna()","dna()","dna!()","do_align()","do_parse()","do_parse()","doi()","donor_score()","down_regulated()","dp()","dr()","dr()","dr()","dr()","dr()","dr()","drug_targets_as_strings()","dt()","dt()","dt()","dt()","dump_list()","dump_matrix()","dump_parameters()","dup()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_atom()","each_atom()","each_cds()","each_cds()","each_chain()","each_chain()","each_edge()","each_edge_in_path()","each_entry()","each_entry()","each_files()","each_gene()","each_gene()","each_hetatm()","each_heterogen()","each_heterogen()","each_hit()","each_hit()","each_hit()","each_hit()","each_hit()","each_hit()","each_hsp()","each_iteration()","each_iteration()","each_model()","each_motif()","each_names()","each_node()","each_out_edge()","each_pair()","each_residue()","each_residue()","each_rule()","each_seq()","each_seq()","each_seq()","each_seq()","each_site()","each_site_step()","each_symbol()","each_window()","each_with_index()","eclinks()","edge()","edges()","edges()","efetch()","efetch()","efetch()","efetch()","eff_space()","einfo()","einfo()","el()","elements()","elements()","embl()","embl_dr()","end()","endnote()","entret()","entrez_query()","entries()","entries()","entries()","entropy()","entropy()","entry()","entry()","entry()","entry()","entry()","entry()","entry()","entry()","entry()","entry()","entry_database_list()","entry_database_list()","entry_ended_pos()","entry_ended_pos()","entry_ended_pos()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_id()","entry_name()","entry_name()","entry_pos_flag()","entry_pos_flag=()","entry_raw()","entry_start_pos()","entry_start_pos()","entry_start_pos()","entry_version()","enzyme_name?()","enzyme_name?()","enzymes()","enzymes()","enzymes()","enzymes()","enzymes()","enzymes_as_strings()","eof?()","eof?()","eql?()","equals?()","equation()","error_msg()","error_probabilities()","errorlog()","escape_shell()","escape_shell_unix()","escape_shell_windows()","escaped_cut_symbol()","escaped_cut_symbol()","esearch()","esearch()","esearch()","esearch()","esearch_count()","esearch_count()","est()","evalue()","evalue()","evalue()","evalue()","events()","evidence()","exec()","exec()","exec()","exec()","exec()","exec()","exec_local()","exists?()","exit_code()","exit_code_message()","exon_type_long()","exons()","exons()","exons()","expect()","expect()","expected()","export_tsv()","external_merge_proc()","external_merge_sort_proc()","external_sort_proc()","extract_key()","extract_seq()","fa()","false_neg()","false_negative_hits()","false_pos()","false_positive_hits()","false_positive_sequences()","fasta()","fatal_errors()","features()","features()","features()","fetch()","fetch()","fetch()","ff()","fftns()","fftnsi()","fgcolor()","fgcolor=()","fh()","field()","fileids()","filename()","filename()","filename()","filename()","filename()","filename()","filename()","filenames()","filter()","find_atom()","find_chain()","find_hetatm()","find_heterogen()","find_match_locations()","find_model()","find_residue()","finder()","first()","first()","first()","first()","first_name()","flag_append()","flag_read()","flag_write()","floyd()","floyd_warshall()","for_display()","for_display()","for_io()","foreach()","format()","format()","format()","format=()","format=()","format=()","format_raw()","formats()","formatstring2class()","formul()","formula()","formula()","forward_complement()","forward_complement!()","found_again?()","fragments()","fragments_for_display()","from()","ft()","ft()","ft()","function()","gap_char()","gap_extend()","gap_length_weight()","gap_open()","gap_regexp()","gap_weight()","gapped_entropy()","gapped_kappa()","gapped_lambda()","gapped_pos()","gbposition()","gc_content()","gc_percent()","gc_skew()","gen_ambiguity_map()","gene()","gene_name()","gene_name()","gene_names()","general()","generate()","genes()","genes()","genes()","genes()","genes_as_hash()","genes_as_hash()","genes_as_hash()","genes_as_hash()","genes_as_strings()","genes_as_strings()","genes_as_strings()","genome_biol()","genome_res()","genomenet()","genomic()","geometriccentre()","get()","get()","get()","get()","get()","get_all_by_qualifier()","get_all_by_type()","get_all_property()","get_attribute()","get_attributes()","get_blocks()","get_blocks_by_name()","get_by_id()","get_by_id()","get_by_id()","get_by_id()","get_by_qualifier()","get_by_type()","get_characters_blocks()","get_characters_string()","get_characters_strings_by_name()","get_data_blocks()","get_database()","get_datatype()","get_distances_blocks()","get_dna()","get_dsn()","get_edge()","get_edge_distance()","get_edge_distance_string()","get_edge_merged()","get_entry()","get_entry()","get_entry()","get_entry()","get_entry()","get_entry()","get_entry()","get_entry()","get_entry()","get_entry_points()","get_features()","get_flatfile_data()","get_gap_character()","get_heterogen_by_id()","get_match_character()","get_matrix()","get_matrix()","get_max_col()","get_max_row()","get_missing()","get_name()","get_name()","get_node_bootstrap()","get_node_bootstrap_string()","get_node_by_name()","get_node_name()","get_number_of_characters()","get_number_of_characters()","get_number_of_taxa()","get_number_of_taxa()","get_number_of_taxa()","get_parsed_entry()","get_parsed_entry()","get_parsed_entry()","get_parsed_entry()","get_record()","get_record_class()","get_record_class()","get_residue_by_id()","get_residue_id_from_atom()","get_row_name()","get_row_string()","get_row_strings_by_name()","get_sequence()","get_sequence()","get_sequence()","get_sequence()","get_sequences_by_name()","get_taxa()","get_taxa()","get_taxa_blocks()","get_tokens()","get_tree()","get_tree_names()","get_tree_strings()","get_tree_strings_by_name()","get_trees_blocks()","get_trees_by_name()","get_triangle()","get_types()","get_value()","getc()","gets()","gets()","gi()","gi()","gi()","glycans()","gn()","go_ids()","go_terms()","go_terms()","goid()","goid2term()","graph()","graph_omega()","graph_seq()","gss()","gsub_entities()","guess()","guess()","guess()","guess()","guess()","guess()","guess()","has_gap?()","has_key?()","hash()","hc_between_strands()","hc_between_strands_as_original_class()","header()","header()","height()","height=()","helix()","helix()","helper_for_to_array_index()","hetatm()","hetatm()","hetatms()","heterogens()","hetnam()","hetsyn()","hi()","higher_priority_elements()","hit2acc()","hit_cnt()","hit_definition()","hit_from()","hit_from()","hit_id()","hit_id()","hit_pubmedid()","hit_strand()","hit_to()","hit_to()","hit_xml()","hits()","hits()","hits()","hits()","hits_for_pattern()","hits_found_again()","hits_newly_found()","hix2hit()","hix_cnt()","hix_represent()","ho()","hseq()","hseq()","hsp_len()","hsps()","hsps()","hsps()","http_post()","http_post_form()","icode=()","id()","id=()","id_line()","id_line()","id_search()","id_strings()","id_strings()","id_strings()","identifiers()","identity()","identity()","identity()","illegal_bases()","import_tsv_files()","imsut()","imsut()","in()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include_in_namespaces?()","include_in_primary?()","inclusion()","index()","index()","index_type=()","inhibitors()","init()","init_fileids()","init_with_array()","init_with_sorted_tsv_file()","initialize_copy()","initialize_copy()","initialize_from_string()","initialize_with_pattern_and_cut_locations()","initialize_with_pattern_and_cut_symbols()","initialize_with_rebase()","initiation_score()","input()","insert_node()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","interleaved?()","internal_data()","internal_data=()","internal_data_hash()","internal_data_hash=()","internal_http()","internal_sort_proc()","introns()","introns()","io()","ip()","ipr_id()","ipr_odescription()","is_empty?()","is_gap?()","is_prior_to()","isolate()","issue()","iubmb_reactions()","journal()","journal()","journal()","journal()","journal()","jrnl()","kappa()","kappa()","kappa()","kcf()","kcf()","kcf()","kegg_reactions()","keggclass()","keggclass()","keggclass()","keggclass()","keggclass()","keggclasses()","keggclasses()","keggorg2taxo()","keggorg2taxonomy()","keys()","keys()","keyword()","keyword_search()","keywords()","keywords()","keywords()","ko_pathway()","korg2taxo()","korg2taxonomy()","kruskal()","kw()","label()","label=()","lambda()","lambda()","lap_at()","lap_at()","lap_at()","lap_over()","larger_than_zero()","last()","last()","last()","last()","leaves()","left_padding()","len()","len()","len()","len()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","library_id()","lineage()","list_falsenegative()","list_falsepositive()","list_output_formats()","list_potentialhit()","list_truepositive()","list_unknown()","list_xref()","lnl()","load_parameters()","load_yaml()","loc()","local()","local()","locations()","locations()","locus()","locus()","locus()","locus()","locus()","log()","log()","log()","logy_minus_logx()","longer_than_zero()","lower_priority_elements()","lowest_common_ancestor()","lstrip()","lstrip!()","ma()","ma()","ma2re()","make_cgi_params()","make_cgi_params_key_value()","make_command_line()","make_command_line_options()","make_command_line_unix()","make_command_line_windows()","make_default()","makeindex()","makeindexbdb()","makeindexflat()","mapped_to?()","mapping()","mapping()","mapping()","mapping()","mapping()","mappings_on()","mask()","mask_with_enumerator()","mask_with_error_probability()","mask_with_quality_score()","mass()","mass()","mass()","match()","match_end()","match_line()","match_line()","match_line()","match_line_amino()","match_line_amino()","match_line_nuc()","match_line_nuc()","match_start()","matrix()","matrix()","max()","max_repeat()","max_vertical()","maxids()","merge()","merge!()","mesh()","message()","message()","method_missing()","method_missing()","method_missing()","method_missing()","method_name()","mh()","midline()","midline()","milli_bad()","min()","min_vertical()","mismatch()","missing_char()","missing_mrna_ends()","mktmpdir()","mm()","modelnum()","modules()","modules()","modules_as_hash()","modules_as_hash()","modules_as_hash()","modules_as_strings()","modules_as_strings()","molecular_weight()","molecular_weight()","molecule()","molecule()","molecule_type()","molecule_type()","moltype()","motif()","motifs()","motifs()","motifs_as_hash()","motifs_as_strings()","mrna()","mrna()","mx()","n_s()","na()","na()","na()","nalen()","nalen()","nalen()","nalen()","nalen()","nalen()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name2one()","name2three()","name=()","name_by_abbrev()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names_as_array()","namespaces()","nar()","naseq()","naseq()","naseq()","naseq()","naseq()","naseq()","naseq()","nature()","natype()","nb_sites()","networks_as_strings()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new2()","new2()","new2()","new_direct()","new_from_sequences_na()","new_from_sequences_na_aa()","new_from_string()","new_http()","new_https()","new_inherit()","new_intron()","new_with_fungi_function()","new_with_general_function()","new_with_metazoa_function()","newick()","next_entry()","nhx_parameters()","nhx_parameters()","nid()","no_fork?()","nodes()","nodes()","normalize()","normalize!()","normalize!()","normalize!()","notes()","notice()","nr()","ntlen()","ntseq()","ntseq()","nucleotide()","nucleotide_databases()","num_codons()","num_gene()","num_hits()","num_hits()","num_hits()","num_rna()","num_sequences()","number_of_edges()","number_of_exons()","number_of_nodes()","number_of_sequences()","number_of_sequences()","number_of_sequences()","number_of_sequences()","number_of_splice_sites()","nwap()","nwns()","nwnsi()","obsolete?()","oc()","oc()","og()","oh()","okazaki()","okazaki()","old_matrix()","omega()","omim()","one()","one2name()","one2three()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open_file()","open_file()","open_flatfile()","open_flatfile()","open_flatfile()","open_flatfile()","open_uri()","open_uri()","option()","option()","option()","option()","option()","option()","option=()","option=()","option=()","options()","options()","options=()","options=()","order()","org_class()","org_species()","organism()","organism()","organism()","organism()","orientation()","orientation()","origin()","original_data()","original_databases()","original_db()","orthologs()","orthologs()","orthologs()","orthologs()","orthologs()","orthologs()","orthologs_as_array()","orthologs_as_hash()","orthologs_as_hash()","orthologs_as_hash()","orthologs_as_hash()","orthologs_as_hash()","orthologs_as_hash()","orthologs_as_hash()","orthologs_as_strings()","orthologs_as_strings()","orthologs_as_strings()","orthologs_as_strings()","orthologs_as_strings()","orthologs_as_strings()","os()","os()","os()","os()","out()","out=()","out_degree()","out_edges()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output_clustal()","output_fasta()","output_fasta()","output_molphy()","output_msf()","output_newick()","output_nhx()","output_phylip()","output_phylip_distance_matrix()","output_phylipnon()","overlap()","overlap()","overlap()","ox()","p2q()","p2q()","p2q()","p2q()","pa()","pa2re()","pa2re()","pages()","palindromic?()","parameter_matrix()","parameters()","parent()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_embl_dr_line()","parse_enzymes()","parse_goids()","parse_primary()","parse_primary()","parse_ptxt()","parse_ptxt_entry()","parse_raw()","parse_raw_entry()","parse_references()","parse_secondary()","parse_suppliers()","parse_txt()","parse_txt_entry()","parse_uniprot_dr_line()","parser()","parser()","parser()","parser()","parser()","parser()","partial()","path()","path()","path()","path()","pathway()","pathways()","pathways()","pathways()","pathways()","pathways()","pathways()","pathways()","pathways()","pathways()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_hash()","pathways_as_strings()","pathways_as_strings()","pathways_as_strings()","pathways_as_strings()","pathways_as_strings()","pathways_as_strings()","pathways_as_strings()","pathways_as_strings()","pathways_as_strings()","pathways_in_keggclass()","pattern()","pattern()","pattern()","pattern()","pattern()","pattern_positions()","pattern_positions()","pdb_xref()","pdoc_xref()","peking()","peking()","percent_identity()","percent_identity()","percent_identity()","permission()","permute()","pg()","phred_p2q()","phred_q2p()","pii()","plasmids()","pmc()","pmfetch()","pmfetch()","pmid()","pos()","pos()","pos=()","pos=()","position()","positions_on()","positive()","positive_hits()","positive_sequences()","post()","post_form()","prefetch_buffer()","prefetch_gets()","prefetch_readpartial()","primary()","primary()","primary()","primary=()","primary_namespace()","primary_to_array_index()","print()","process()","process()","process_sequences_na()","process_sequences_na_aa()","products()","products()","profile()","program()","protein()","protein?()","protein_databases()","protein_name()","pt()","publication_type()","pubmed()","pubmed_url()","purge()","push()","push()","put_record()","q2p()","q2p()","q2p()","q2p()","qseq()","qseq()","qualities()","quality_score_type()","quality_score_type()","quality_score_type()","quality_scores()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query()","query_align()","query_align()","query_align()","query_alignment()","query_alignment()","query_alignment()","query_by_filename()","query_by_filename()","query_by_filename()","query_by_string()","query_by_string()","query_by_string()","query_command()","query_command_fork()","query_command_open3()","query_command_popen()","query_def()","query_def()","query_def()","query_def()","query_def()","query_def()","query_def()","query_def()","query_def()","query_end()","query_end()","query_end()","query_from()","query_from()","query_from()","query_id()","query_id()","query_id()","query_id()","query_id()","query_id()","query_id()","query_id()","query_len()","query_len()","query_len()","query_len()","query_len()","query_len()","query_len()","query_len()","query_len()","query_len()","query_pairwise()","query_record_number()","query_seq()","query_seq()","query_seq()","query_seq()","query_start()","query_start()","query_start()","query_strand()","query_string()","query_string()","query_string()","query_to()","query_to()","query_to()","query_type()","ra()","rad2deg()","randomize()","randomize()","randomize()","range()","range()","range()","raw=()","raw_to_reference()","rc()","rd()","re()","re()","re_cut_symbol()","re_cut_symbol_adjacent()","reaction()","reactions()","reactions()","reactions()","reactions()","reactions_as_hash()","reactions_as_hash()","reactions_as_strings()","reactions_as_strings()","read()","read()","read()","read()","read_uri()","readfiles()","readfiles()","rebase()","recalc()","recalc()","recalc_all()","record()","record()","record_name()","record_size()","record_type()","records()","records()","ref()","ref()","ref_authors()","ref_data()","ref_no()","ref_title()","reference()","reference()","reference()","references()","references()","references()","references()","references()","references()","references()","references()","references()","region()","regulated()","rehash()","rehash()","rehash()","rehash()","rehash_heterogens()","rehash_residues()","rel_pathways()","rel_pathways_as_hash()","rel_pathways_as_strings()","relation()","relative()","release()","release_created()","release_modified()","remark()","remark()","remark()","remark()","remote()","remote()","remote()","removesolvent()","remove_all_gaps()","remove_all_gaps!()","remove_edge()","remove_edge_if()","remove_entry_secure()","remove_gaps!()","remove_incomplete_cuts()","remove_node()","remove_node_if()","remove_nonsense_nodes()","remove_seq()","rep_accession_no()","rep_h_invitational_id()","rep_match()","reparse()","replace()","replace_attributes()","replace_slice()","report()","report()","reports()","reports()","reports()","reports_xml()","representative_annotations()","representative_clone()","representative_cloneid()","representative_seqid()","representative_sequence()","resseq=()","reset()","reset()","reset()","reset()","reset()","reset_entrez_default_parameters()","residues()","result()","result()","result()","result()","result()","result()","result()","result()","result()","result()","retrieve()","retrieve()","reverse_complement()","reverse_complement!()","reverse_each()","reverse_each()","revtrans()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rexml()","reynolds()","reynolds?()","right_padding()","rl()","rn()","rna()","rna!()","rna?()","row_sum()","row_sum_all()","rows()","rpairs()","rpairs()","rpairs_as_hash()","rpairs_as_strings()","rpairs_as_tokens()","rstrip()","rstrip!()","rt()","ru()","rule()","run()","run()","run()","s1()","safe_command_line_array()","save_yaml()","sc()","sc_match()","sc_mismatch()","science()","score()","score()","score()","scores2str()","sd()","sd()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search_all()","search_all_get_unique_id()","search_database_list()","search_database_list()","search_names()","search_namespaces()","search_namespaces()","search_namespaces_get_unique_id()","search_primary()","search_primary()","search_primary_get_unique_id()","secondary()","secondary=()","secondary_namespaces()","seek()","seek()","segment()","segmentpairs()","segmentpairs()","select()","seq()","seq()","seq()","seq()","seq()","seq()","seq()","seq()","seq()","seq()","seq()","seq!()","seq1_intron()","seq2_intron()","seq_class()","seq_data()","seq_len()","seq_len()","seq_length()","seqclass()","seqclass()","seqlen()","seqres()","seqret()","sequence()","sequence()","sequence_length()","sequence_length()","sequence_names()","sequence_names()","sequence_string()","sequences()","server=()","set()","set_rn()","set_aaseq()","set_alignment()","set_all_property()","set_attribute()","set_cut_symbol()","set_datatype()","set_date()","set_default_parameters()","set_desc()","set_features()","set_gap_character()","set_header_line()","set_knn_prob()","set_match_character()","set_matrix()","set_matrix()","set_missing()","set_naseq()","set_number_of_characters()","set_number_of_characters()","set_number_of_taxa()","set_number_of_taxa()","set_number_of_taxa()","set_polya()","set_prediction()","set_primary_namespace()","set_promoter()","set_triangle()","set_value()","setup_enzyme_and_reference_association()","setup_enzyme_data()","setup_new_bin()","sf()","sf()","shape()","shape=()","sheet()","shift()","significant()","site()","sites()","size()","size()","size()","size()","size()","size()","size()","size()","skip_flag()","skip_leader()","skip_leader()","skip_leader()","skip_leader()","skip_leader()","skip_leader()","skip_leader()","skip_leader()","skip_leader()","skip_spaces()","slice()","small_world()","so()","so()","solexa_p2q()","solexa_q2p()","sort!()","sort!()","sort_attributes_by_tag!()","source()","source()","sp_xref()","span()","species()","splice()","splicing()","split_label_value_in()","sq()","sq()","sq()","sq()","ssbond()","st()","standard_comment?()","start()","start()","start_codon?()","start_http()","start_http_uri()","statistics()","statistics()","statistics()","status()","sticky?()","stop()","stop_codon?()","store()","str2scores()","strand()","strand()","strand()","strandedness()","strands_for_display()","strip()","strip!()","strip_and_sort()","strip_cuts_and_padding()","strip_padding()","structure()","structures()","structures()","subgraph()","subseq()","subseq()","substrates()","subtree()","subtree_with_all_paths()","sv()","sw()","swissprot_release_number()","swissprot_release_sequences()","sy()","symbol_comparison_table()","symbols()","synonyms()","sysname()","sz()","ta()","tab()","table_sum_all()","tags()","target()","target_avg()","target_def()","target_def()","target_def()","target_def()","target_def()","target_def()","target_end()","target_end()","target_end()","target_from()","target_id()","target_id()","target_id()","target_id()","target_id()","target_len()","target_len()","target_len()","target_len()","target_len()","target_sd()","target_seq()","target_seq()","target_seq()","target_seq()","target_start()","target_start()","target_start()","target_to()","target_type()","target_var()","taxa_list()","taxid()","taxo2keggorgs()","taxo2korgs()","taxon2keggorgs()","taxon2korgs()","taxon_range()","taxonomy()","taxonomy()","taxonomy()","taxonomy()","termination_score()","three()","three2name()","three2one()","threshold()","ti()","title()","title()","title()","to()","to_1()","to_3()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_array_index()","to_array_index()","to_ary()","to_biosequence()","to_biosequence()","to_biosequence()","to_biosequence()","to_biosequence()","to_biosequence()","to_clustal()","to_fasta()","to_fasta()","to_fasta()","to_fasta()","to_fasta()","to_fasta_array()","to_fastaformat_array()","to_gcg()","to_hash()","to_hash()","to_hash()","to_io()","to_io()","to_list()","to_matrix()","to_nbrf()","to_nexus()","to_nexus()","to_nexus()","to_nexus()","to_nexus()","to_nexus()","to_nexus_helper()","to_nexus_row_array()","to_re()","to_re()","to_re()","to_re()","to_relations()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_seq()","to_seq()","to_seq()","to_str()","to_str()","to_str()","to_str()","to_str()","to_str()","to_str()","to_string()","to_xyz()","too_short_parser()","topology()","total()","total()","total_distance()","total_hits()","total_sequences()","tr()","translate()","tree()","tree()","tree_length()","trends()","tsort_each_child()","tsort_each_node()","turn()","ty()","ui()","uitei()","uitei?()","undirected()","undirected?()","ungapped_pos()","ungetc()","ungets()","uniq!()","uniq!()","unknown()","unknown_hits()","unknown_sequences()","unshift()","unshift()","unshift()","up_regulated()","update_index()","update_index()","v_parser()","val2rgb()","validate_1()","validate_2()","validate_2()","validate_args()","validate_args()","validate_args()","validate_checksum()","validate_checksum()","validate_cut_locations()","validate_format()","validate_input()","values()","values()","vc_complement()","vc_complement_as_original_class()","vc_primary()","vc_primary_as_original_class()","vernacular_name()","version()","version()","version()","version()","version_date()","version_number()","versions()","vertical_min_max_helper()","vi()","volume()","volume()","w()","warnings()","warnings()","weight()","weight()","width()","width=()","window()","window_search()","windows_platform?()","with_cut_symbols()","with_spaces()","words()","write()","write_record()","writeback_array()","x()","x()","x=()","x=()","xyz()","xyz()","y()","y()","y=()","y=()","year()","z()","z=()","known_issues","readme","readme_dev","release_notes","changes-1.3","release_notes-1.4.0","release_notes-1.4.1","release_notes-1.4.2","release_notes-1.4.3","release_notes-1.5.0"],"longSearchIndex":["bio","bio::aaindex","bio::aaindex1","bio::aaindex2","bio::abif","bio::abif::directoryentry","bio::alignment","bio::alignment::arrayextension","bio::alignment::enumerableextension","bio::alignment::factorytemplate","bio::alignment::factorytemplate::fileinfileout","bio::alignment::factorytemplate::fileinfileoutwithtree","bio::alignment::factorytemplate::fileinstdoutout","bio::alignment::factorytemplate::simple","bio::alignment::factorytemplate::stdininfileout","bio::alignment::factorytemplate::wrapinputstdin","bio::alignment::factorytemplate::wrapinputtempfile","bio::alignment::factorytemplate::wrapoutputstdout","bio::alignment::factorytemplate::wrapoutputtempfile","bio::alignment::gap","bio::alignment::hashextension","bio::alignment::multifastaformat","bio::alignment::originalalignment","bio::alignment::originalprivate","bio::alignment::output","bio::alignment::propertymethods","bio::alignment::sequencearray","bio::alignment::sequencehash","bio::alignment::site","bio::alignment::sitemethods","bio::aminoacid","bio::aminoacid::data","bio::blast","bio::blast::bl2seq","bio::blast::bl2seq::report","bio::blast::bl2seq::report::hsp","bio::blast::bl2seq::report::hit","bio::blast::bl2seq::report::iteration","bio::blast::default","bio::blast::default::report","bio::blast::default::report::hsp","bio::blast::default::report::hit","bio::blast::default::report::iteration","bio::blast::default::report_tblast","bio::blast::fastacmd","bio::blast::ncbioptions","bio::blast::rpsblast","bio::blast::rpsblast::rpsblastsplitter","bio::blast::rpsblast::report","bio::blast::rpsblast::report::flatfile_splitter","bio::blast::rpsblast::report::iteration","bio::blast::remote","bio::blast::remote::genomenet","bio::blast::remote::genomenet::information","bio::blast::remote::genomenet","bio::blast::remote::information","bio::blast::report","bio::blast::report::blastxmlsplitter","bio::blast::report::flatfile_splitter","bio::blast::report::hit","bio::blast::report::hsp","bio::blast::report::iteration","bio::blast::report_tab","bio::blast::wu","bio::blast::wu::report","bio::blast::wu::report::hsp","bio::blast::wu::report::hit","bio::blast::wu::report::iteration","bio::blast::wu::report_tblast","bio::blat","bio::blat::report","bio::blat::report::hit","bio::blat::report::segmentpair","bio::blat::report::seqdesc","bio::clustalw","bio::clustalw::report","bio::codontable","bio::colorscheme","bio::command","bio::command::tmpdir","bio::command::tmpdir::remover","bio::contingencytable","bio::das","bio::das::dna","bio::das::dsn","bio::das::entry_point","bio::das::feature","bio::das::gff","bio::das::group","bio::das::link","bio::das::segment","bio::das::sequence","bio::das::target","bio::das::type","bio::das::types","bio::db","bio::ddbj","bio::embl","bio::embldb","bio::embldb::common","bio::emboss","bio::fantom","bio::fantom::maxml","bio::fantom::maxml::annotation","bio::fantom::maxml::annotation::datasrc","bio::fantom::maxml::annotations","bio::fantom::maxml::cluster","bio::fantom::maxml::sequence","bio::fantom::maxml::sequences","bio::fasta","bio::fasta::report","bio::fasta::report::flatfile_splitter","bio::fasta::report::fastaformat10splitter","bio::fasta::report::hit","bio::fasta::report::hit::query","bio::fasta::report::hit::target","bio::fasta::report::program","bio::fastadefline","bio::fastaformat","bio::fastanumericformat","bio::fastq","bio::fastq::error","bio::fastq::error::diff_ids","bio::fastq::error::long_qual","bio::fastq::error::no_atmark","bio::fastq::error::no_ids","bio::fastq::error::no_qual","bio::fastq::error::no_seq","bio::fastq::error::qual_char","bio::fastq::error::qual_range","bio::fastq::error::seq_char","bio::fastq::error::short_qual","bio::fastq::error::skipped_unformatted_lines","bio::fastq::formatdata","bio::fastq::formatdata::fastq_illumina","bio::fastq::formatdata::fastq_sanger","bio::fastq::formatdata::fastq_solexa","bio::feature","bio::feature::qualifier","bio::features","bio::fetch","bio::fetch::ebi","bio::flatfile","bio::flatfile::autodetect","bio::flatfile::autodetect::ruledebug","bio::flatfile::autodetect::ruleproc","bio::flatfile::autodetect::ruleregexp","bio::flatfile::autodetect::ruleregexp2","bio::flatfile::autodetect::rulespecial","bio::flatfile::autodetect::ruletemplate","bio::flatfile::autodetect::rulesarray","bio::flatfile::bufferedinputstream","bio::flatfile::splitter","bio::flatfile::splitter::default","bio::flatfile::splitter::lineoriented","bio::flatfile::splitter::template","bio::flatfile::unknowndataformaterror","bio::flatfileindex","bio::flatfileindex::bdb_1","bio::flatfileindex::bdb_1::bdbmappingfile","bio::flatfileindex::bdb_1::primarynamespace","bio::flatfileindex::bdb_1::secondarynamespace","bio::flatfileindex::bdbdefault","bio::flatfileindex::bdbwrapper","bio::flatfileindex::debug","bio::flatfileindex::databank","bio::flatfileindex::fileid","bio::flatfileindex::fileids","bio::flatfileindex::flat_1","bio::flatfileindex::flat_1::flatmappingfile","bio::flatfileindex::flat_1::primarynamespace","bio::flatfileindex::flat_1::record","bio::flatfileindex::flat_1::secondarynamespace","bio::flatfileindex::indexer","bio::flatfileindex::indexer::namespace","bio::flatfileindex::indexer::namespaces","bio::flatfileindex::indexer::parser","bio::flatfileindex::indexer::parser::blastdefaultparser","bio::flatfileindex::indexer::parser::emblparser","bio::flatfileindex::indexer::parser::fastaformatparser","bio::flatfileindex::indexer::parser::genbankparser","bio::flatfileindex::indexer::parser::genpeptparser","bio::flatfileindex::indexer::parser::maxmlclusterparser","bio::flatfileindex::indexer::parser::maxmlsequenceparser","bio::flatfileindex::indexer::parser::pdbchemicalcomponentparser","bio::flatfileindex::indexer::parser::sptrparser","bio::flatfileindex::indexer::parser::templateparser","bio::flatfileindex::namespaces","bio::flatfileindex::results","bio::flatfileindex::template","bio::flatfileindex::template::namespace","bio::gcg","bio::gcg::msf","bio::gcg::seq","bio::gff","bio::gff::gff2","bio::gff::gff2::escape","bio::gff::gff2::metadata","bio::gff::gff2::record","bio::gff::gff2::record::value","bio::gff::gff3","bio::gff::gff3::escape","bio::gff::gff3::record","bio::gff::gff3::record::gap","bio::gff::gff3::record::gap::code","bio::gff::gff3::record::target","bio::gff::gff3::recordboundary","bio::gff::gff3::sequenceregion","bio::gff::record","bio::go","bio::go::external2go","bio::go::geneassociation","bio::go::ontology","bio::genbank","bio::genbank::locus","bio::genpept","bio::genpept::locus","bio::genscan","bio::genscan::report","bio::genscan::report::exon","bio::genscan::report::gene","bio::hmmer","bio::hmmer::report","bio::hmmer::report::hit","bio::hmmer::report::hsp","bio::hinv","bio::hinv::acc2hit","bio::hinv::common","bio::hinv::hit2acc","bio::hinv::hitcnt","bio::hinv::hitdefinition","bio::hinv::hitpubmedid","bio::hinv::hitxml","bio::hinv::hix2hit","bio::hinv::hixcnt","bio::hinv::hixrepresent","bio::hinv::hixxml","bio::hinv::idsearch","bio::hinv::keywordsearch","bio::iprscan","bio::iprscan::report","bio::iprscan::report::match","bio::kegg","bio::kegg::brite","bio::kegg::compound","bio::kegg::common","bio::kegg::common::dblinksashash","bio::kegg::common::diseasesashash","bio::kegg::common::genesashash","bio::kegg::common::modulesashash","bio::kegg::common::orthologsashash","bio::kegg::common::pathwaysashash","bio::kegg::common::references","bio::kegg::common::stringsashash","bio::kegg::drug","bio::kegg::enzyme","bio::kegg::expression","bio::kegg::genes","bio::kegg::genome","bio::kegg::glycan","bio::kegg::kgml","bio::kegg::kgml::entry","bio::kegg::kgml::graphics","bio::kegg::kgml::product","bio::kegg::kgml::reaction","bio::kegg::kgml::relation","bio::kegg::kgml::substrate","bio::kegg::kgml::substrateproduct","bio::kegg::keggtab","bio::kegg::keggtab::db","bio::kegg::module","bio::kegg::orthology","bio::kegg::pathway","bio::kegg::reaction","bio::keggdb","bio::litdb","bio::lasergene","bio::location","bio::locations","bio::mafft","bio::mafft::report","bio::medline","bio::map","bio::map::actslikemap","bio::map::actslikemarker","bio::map::mapping","bio::map::marker","bio::map::simplemap","bio::meme","bio::meme::mast","bio::meme::mast::report","bio::meme::motif","bio::muscle","bio::muscle::default_parser","bio::nbrf","bio::ncbi","bio::ncbi::rest","bio::ncbi::rest::efetch","bio::ncbi::rest::efetch::methods","bio::ncbi::rest::esearch","bio::ncbi::rest::esearch::methods","bio::ncbidb","bio::ncbidb::common","bio::newick","bio::newick::parseerror","bio::nexus","bio::nexus::charactersblock","bio::nexus::datablock","bio::nexus::distancesblock","bio::nexus::genericblock","bio::nexus::nexusmatrix","bio::nexus::nexusmatrix::nexusmatrixerror","bio::nexus::nexusparseerror","bio::nexus::taxablock","bio::nexus::treesblock","bio::nexus::util","bio::nucleicacid","bio::nucleicacid::data","bio::paml","bio::paml::baseml","bio::paml::baseml::report","bio::paml::codeml","bio::paml::codeml::model","bio::paml::codeml::positivesite","bio::paml::codeml::positivesites","bio::paml::codeml::rates","bio::paml::codeml::report","bio::paml::codeml::reporterror","bio::paml::codeml::reportsingle","bio::paml::common","bio::paml::common::report","bio::paml::yn00","bio::paml::yn00::report","bio::pdb","bio::pdb::atomfinder","bio::pdb::chain","bio::pdb::chainfinder","bio::pdb::chemicalcomponent","bio::pdb::chemicalcomponent::record","bio::pdb::coordinate","bio::pdb::datatype","bio::pdb::datatype::constlikemethod","bio::pdb::datatype::pdb_achar","bio::pdb::datatype::pdb_atom","bio::pdb::datatype::pdb_character","bio::pdb::datatype::pdb_date","bio::pdb::datatype::pdb_idcode","bio::pdb::datatype::pdb_integer","bio::pdb::datatype::pdb_lstring","bio::pdb::datatype::pdb_list","bio::pdb::datatype::pdb_real","bio::pdb::datatype::pdb_residue_name","bio::pdb::datatype::pdb_slist","bio::pdb::datatype::pdb_specification_list","bio::pdb::datatype::pdb_string","bio::pdb::datatype::pdb_stringrj","bio::pdb::datatype::pdb_symop","bio::pdb::hetatmfinder","bio::pdb::heterogen","bio::pdb::heterogenfinder","bio::pdb::model","bio::pdb::modelfinder","bio::pdb::record","bio::pdb::record::anisou","bio::pdb::record::atom","bio::pdb::record::hetatm","bio::pdb::record::jrnl","bio::pdb::record::remark1","bio::pdb::record::remark2","bio::pdb::residue","bio::pdb::residuefinder","bio::pdb::utils","bio::prosite","bio::psort","bio::psort::cgidriver","bio::psort::ipsort","bio::psort::psort1","bio::psort::psort1::remote","bio::psort::psort1::report","bio::psort::psort2","bio::psort::psort2::remote","bio::psort::psort2::report","bio::psort::psortb","bio::psort::wolf_psort","bio::pts1","bio::pts1::report","bio::pathway","bio::phylip","bio::phylip::distancematrix","bio::phylip::phylipformat","bio::probcons","bio::probcons::default_parser","bio::pubmed","bio::rebase","bio::refseq","bio::reference","bio::references","bio::registry","bio::registry::db","bio::relation","bio::restrictionenzyme","bio::restrictionenzyme::analysis","bio::restrictionenzyme::cutsymbol","bio::restrictionenzyme::cutsymbol::cutsymbol__","bio::restrictionenzyme::denseintarray","bio::restrictionenzyme::doublestranded","bio::restrictionenzyme::doublestranded::alignedstrands","bio::restrictionenzyme::doublestranded::cutlocationpair","bio::restrictionenzyme::doublestranded::cutlocationpairinenzymenotation","bio::restrictionenzyme::doublestranded::cutlocations","bio::restrictionenzyme::doublestranded::cutlocationsinenzymenotation","bio::restrictionenzyme::doublestranded::enzymeaction","bio::restrictionenzyme::fragments","bio::restrictionenzyme::range","bio::restrictionenzyme::range::cutrange","bio::restrictionenzyme::range::cutranges","bio::restrictionenzyme::range::horizontalcutrange","bio::restrictionenzyme::range::sequencerange","bio::restrictionenzyme::range::sequencerange::calculatedcuts","bio::restrictionenzyme::range::sequencerange::fragment","bio::restrictionenzyme::range::sequencerange::fragments","bio::restrictionenzyme::range::verticalcutrange","bio::restrictionenzyme::singlestrand","bio::restrictionenzyme::singlestrand::cutlocationsinenzymenotation","bio::restrictionenzyme::singlestrandcomplement","bio::restrictionenzyme::sortednumarray","bio::restrictionenzyme::stringformatting","bio::soft","bio::sosui","bio::sosui::report","bio::sosui::report::tmh","bio::sangerchromatogram","bio::scf","bio::sequence","bio::sequence::aa","bio::sequence::adapter","bio::sequence::adapter::embl","bio::sequence::adapter::fastaformat","bio::sequence::adapter::fastanumericformat","bio::sequence::adapter::fastq","bio::sequence::adapter::genbank","bio::sequence::adapter::sangerchromatogram","bio::sequence::common","bio::sequence::dblink","bio::sequence::format","bio::sequence::format::aminoformatter","bio::sequence::format::formatter","bio::sequence::format::formatter::fasta","bio::sequence::format::formatter::fasta_ncbi","bio::sequence::format::formatter::fasta_numeric","bio::sequence::format::formatter::fastq","bio::sequence::format::formatter::fastq_illumina","bio::sequence::format::formatter::fastq_sanger","bio::sequence::format::formatter::fastq_solexa","bio::sequence::format::formatter::qual","bio::sequence::format::formatter::raw","bio::sequence::format::formatterbase","bio::sequence::format::insdfeaturehelper","bio::sequence::format::nucformatter","bio::sequence::format::nucformatter::embl","bio::sequence::format::nucformatter::genbank","bio::sequence::na","bio::sequence::qualityscore","bio::sequence::qualityscore::converter","bio::sequence::qualityscore::phred","bio::sequence::qualityscore::solexa","bio::sequence::sequencemasker","bio::sirna","bio::sirna::pair","bio::sirna::shrna","bio::sim4","bio::sim4::report","bio::sim4::report::hit","bio::sim4::report::segment","bio::sim4::report::segmentpair","bio::sim4::report::seqdesc","bio::spidey","bio::spidey::report","bio::spidey::report::hit","bio::spidey::report::segment","bio::spidey::report::segmentpair","bio::spidey::report::seqdesc","bio::swissprot","bio::tmhmm","bio::tmhmm::report","bio::tmhmm::tmh","bio::transfac","bio::transfac::cell","bio::transfac::class","bio::transfac::factor","bio::transfac::gene","bio::transfac::matrix","bio::transfac::site","bio::targetp","bio::targetp::report","bio::tcoffee","bio::tcoffee::default_parser","bio::togows","bio::togows::accesswait","bio::togows::rest","bio::trembl","bio::tree","bio::tree::edge","bio::tree::nopatherror","bio::tree::node","bio::uniprotkb","object","bio::flatfileindex::results#*()","bio::flatfileindex::results#+()","bio::restrictionenzyme::denseintarray#+()","bio::restrictionenzyme::sortednumarray#+()","bio::sequence::common#+()","bio::alignment::originalalignment#<<()","bio::flatfileindex::indexer::namespaces#<<()","bio::restrictionenzyme::denseintarray#<<()","bio::restrictionenzyme::sortednumarray#<<()","bio::sequence::common#<<()","bio::location#<=>()","bio::map::mapping#<=>()","bio::pdb::chain#<=>()","bio::pdb::model#<=>()","bio::pdb::record::atom#<=>()","bio::pdb::residue#<=>()","bio::relation#<=>()","bio::alignment::originalalignment#==()","bio::blast::ncbioptions#==()","bio::flatfileindex::flat_1::record#==()","bio::gff::gff2::metadata#==()","bio::gff::gff2::record#==()","bio::gff::gff2::record::value#==()","bio::gff::gff3::record::gap#==()","bio::gff::gff3::record::target#==()","bio::gff::gff3::sequenceregion#==()","bio::location#==()","bio::locations#==()","bio::reference#==()","bio::restrictionenzyme::denseintarray#==()","bio::restrictionenzyme::sortednumarray#==()","bio::relation#===()","bio::pdb::datatype::constlikemethod#pdb_lstring()","bio::pdb::datatype::constlikemethod#pdb_real()","bio::pdb::datatype::constlikemethod#pdb_string()","bio::aaindex2#[]()","bio::alignment::originalalignment#[]()","bio::aminoacid::data#[]()","bio::codontable::[]()","bio::codontable#[]()","bio::fantom::maxml::annotations#[]()","bio::fantom::maxml::sequences#[]()","bio::fastanumericformat#[]()","bio::feature#[]()","bio::features#[]()","bio::flatfile::autodetect::[]()","bio::flatfile::autodetect::ruletemplate::[]()","bio::flatfileindex::bdbwrapper#[]()","bio::flatfileindex::fileids#[]()","bio::locations#[]()","bio::nucleicacid::data#[]()","bio::pdb#[]()","bio::pdb::chain#[]()","bio::pdb::coordinate::[]()","bio::pdb::datatype::pdb_lstring::[]()","bio::pdb::datatype::pdb_lstring::[]()","bio::pdb::datatype::pdb_real::[]()","bio::pdb::datatype::pdb_string::[]()","bio::pdb::datatype::pdb_string::[]()","bio::pdb::datatype::pdb_string::[]()","bio::pdb::datatype::pdb_string::[]()","bio::pdb::datatype::pdb_string::[]()","bio::pdb::datatype::pdb_string::[]()","bio::pdb::datatype::pdb_string::[]()","bio::pdb::model#[]()","bio::pdb::residue#[]()","bio::restrictionenzyme::denseintarray::[]()","bio::restrictionenzyme::denseintarray#[]()","bio::restrictionenzyme::sortednumarray::[]()","bio::restrictionenzyme::sortednumarray#[]()","bio::codontable#[]=()","bio::flatfileindex::bdbwrapper#[]=()","bio::flatfileindex::fileids#[]=()","bio::registry::db#[]=()","bio::restrictionenzyme::denseintarray#[]=()","bio::restrictionenzyme::sortednumarray#[]=()","bio::alignment::output#__output_phylip_common()","bio::alignment::originalalignment#__store__()","bio::aminoacid::data#aa()","bio::sequence#aa()","bio::fastaformat#aalen()","bio::genpept#aalen()","bio::kegg::genes#aalen()","bio::nbrf#aalen()","bio::uniprotkb#aalen()","bio::fastaformat#aaseq()","bio::gcg::seq#aaseq()","bio::genpept#aaseq()","bio::kegg::genes#aaseq()","bio::nbrf#aaseq()","bio::pdb::chain#aaseq()","bio::uniprotkb#aaseq()","bio::medline#ab()","bio::locations#absolute()","bio::medline#abstract()","bio::embldb::common#ac()","bio::prosite#ac()","bio::transfac#ac()","bio::hinv::acc2hit()","bio::fastadefline#acc_version()","bio::fastaformat#acc_version()","bio::ncbidb::common#acc_version()","bio::genscan::report::exon#acceptor_score()","bio::embldb::common#accession()","bio::fastadefline#accession()","bio::fastaformat#accession()","bio::iprscan::report::match#accession()","bio::ncbidb::common#accession()","bio::pdb#accession()","bio::embldb::common#accessions()","bio::fastadefline#accessions()","bio::fastaformat#accessions()","bio::ncbidb::common#accessions()","bio::sequence#accessions()","bio::pdb::utils::acos()","bio::kegg::drug#activity()","bio::medline#ad()","bio::sequence::adapter()","bio::flatfile::autodetect#add()","bio::flatfileindex::bdb_1::bdbmappingfile#add()","bio::flatfileindex::fileids#add()","bio::flatfileindex::indexer::namespaces#add()","bio::pdb::residue#addatom()","bio::pdb::model#addchain()","bio::pdb::chain#addligand()","bio::pdb#addmodel()","bio::pdb::chain#addresidue()","bio::pdb::model#addsolvent()","bio::gff::gff2::record#add_attribute()","bio::pdb::record#add_continuation()","bio::restrictionenzyme::range::sequencerange#add_cut_range()","bio::restrictionenzyme::range::sequencerange#add_cut_ranges()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#add_cuts_from_cut_ranges()","bio::fastadefline#add_defline()","bio::tree#add_edge()","bio::flatfileindex::bdb_1::bdbmappingfile#add_exclusive()","bio::blat::report#add_header_line()","bio::fastq#add_header_line()","bio::restrictionenzyme::range::sequencerange#add_horizontal_cut_range()","bio::blat::report#add_line()","bio::fastq#add_line()","bio::map::actslikemap#add_mapping_as_map()","bio::map::actslikemarker#add_mapping_as_marker()","bio::tree#add_node()","bio::flatfileindex::bdb_1::bdbmappingfile#add_nr()","bio::blast::ncbioptions#add_options()","bio::flatfileindex::bdb_1::bdbmappingfile#add_overwrite()","bio::flatfileindex::flat_1::flatmappingfile#add_record()","bio::flatfileindex::indexer::parser::templateparser#add_secondary_namespaces()","bio::alignment::originalalignment#add_seq()","bio::alignment::originalalignment#add_sequences()","bio::restrictionenzyme::stringformatting#add_spacing()","bio::nexus::datablock#add_taxon()","bio::nexus::taxablock#add_taxon()","bio::nexus::genericblock#add_token()","bio::nexus::treesblock#add_tree()","bio::nexus::treesblock#add_tree_name()","bio::flatfileindex::indexer::addindex_bdb()","bio::flatfileindex::indexer::addindex_flat()","bio::tree#adjacency_matrix()","bio::tree#adjacent_nodes()","bio::medline#affiliations()","bio::kegg::keggtab#alias_list()","bio::kegg::keggtab#aliases()","bio::clustalw::report#align()","bio::clustalw::report#align()","bio::mafft::report#align()","bio::restrictionenzyme::doublestranded::alignedstrands::align()","bio::sim4::report::hit#align()","bio::spidey::report::hit#align()","bio::blat::report::segmentpair#align_len()","bio::sim4::report::segmentpair#align_len()","bio::restrictionenzyme::doublestranded::alignedstrands::align_with_cuts()","bio::restrictionenzyme::doublestranded#aligned_strands()","bio::restrictionenzyme::doublestranded#aligned_strands_with_cuts()","bio::alignment::multifastaformat#alignment()","bio::alignment::multifastaformat#alignment()","bio::alignment::multifastaformat#alignment()","bio::clustalw::report#alignment()","bio::clustalw::report#alignment()","bio::gcg::msf#alignment()","bio::mafft::report#alignment()","bio::phylip::phylipformat#alignment()","bio::alignment::enumerableextension#alignment_collect()","bio::alignment::hashextension#alignment_collect()","bio::alignment::originalalignment#alignment_collect()","bio::alignment::enumerableextension#alignment_concat()","bio::alignment::hashextension#alignment_concat()","bio::alignment::enumerableextension#alignment_length()","bio::alignment::enumerableextension#alignment_lstrip!()","bio::alignment::enumerableextension#alignment_normalize!()","bio::alignment::enumerableextension#alignment_rstrip!()","bio::alignment::enumerableextension#alignment_site()","bio::alignment::enumerableextension#alignment_slice()","bio::alignment::enumerableextension#alignment_strip!()","bio::alignment::enumerableextension#alignment_subseq()","bio::alignment::enumerableextension#alignment_window()","bio::kegg::enzyme#all_reac()","bio::paml::codeml::model#alpha()","bio::fantom::maxml::sequence#altid()","bio::flatfileindex::databank#always_check=()","bio::flatfileindex#always_check_consistency()","bio::flatfileindex#always_check_consistency=()","bio::tree#ancestors()","bio::fantom::maxml::sequence#annotations()","bio::feature#append()","bio::features#append()","bio::pathway#append()","bio::references#append()","bio::hmmer::report::hit#append_hsp()","bio::nexus::util::array_to_string()","bio::feature#assoc()","bio::sequence::na#at_content()","bio::sequence::na#at_skew()","bio::pdb::chain#atom_seq()","bio::pdb::atomfinder#atoms()","bio::gff::gff2::record#attribute()","bio::gff::gff2::record#attributes_to_hash()","bio::medline#au()","bio::aaindex#author()","bio::litdb#author()","bio::medline#authors()","bio::pdb#authors()","bio::aaindex::auto()","bio::flatfile::auto()","bio::sequence#auto()","bio::sequence::auto()","bio::flatfile#autodetect()","bio::flatfile::autodetect()","bio::flatfile::autodetect#autodetect()","bio::flatfile::autodetect_file()","bio::flatfile::autodetect#autodetect_flatfile()","bio::flatfile::autodetect_io()","bio::flatfile::autodetect_stream()","bio::transfac::matrix#ba()","bio::genbank#basecount()","bio::transfac::gene#bc()","bio::flatfileindex::databank#bdb_open()","bio::pathway#bellman_ford()","bio::transfac::class#bf()","bio::transfac::matrix#bf()","bio::transfac::site#bf()","bio::pathway#bfs()","bio::pathway#bfs_shortest_path()","bio::kegg::kgml::entry#bgcolor()","bio::kegg::kgml::entry#bgcolor=()","bio::reference#bibitem()","bio::reference#bibtex()","bio::blast::default::report::hit#bit_score()","bio::blast::report::hit#bit_score()","bio::fasta::report::hit#bit_score()","bio::fastaformat#blast()","bio::blat::report::hit#block_count()","bio::sirna::shrna#block_it()","bio::blat::report::hit#block_sizes()","bio::blat::report::hit#blocks()","bio::restrictionenzyme::doublestranded#blunt?()","bio::tree::node#bootstrap=()","bio::tree::node#bootstrap_string=()","bio::sim4::report::segmentpair::both_intron()","bio::pathway#breadth_first_search()","bio::transfac::factor#bs()","bio::transfac::gene#bs()","bio::flatfileindex::fileids#cache_all()","bio::gcg::seq::calc_checksum()","bio::pdb::utils::calculateplane()","bio::command::tmpdir::remover#call()","bio::command#call_command()","bio::command#call_command_fork()","bio::command#call_command_open3()","bio::command#call_command_popen()","bio::embl#cc()","bio::prosite#cc()","bio::transfac#cc()","bio::uniprotkb#cc()","bio::transfac::cell#cd()","bio::hinv::hitdefinition#cdna_rep_h_invitational()","bio::hinv::hitdefinition#cdna_splicing_isoform_curation()","bio::fantom::maxml::annotations#cds_start()","bio::fantom::maxml::annotations#cds_stop()","bio::reference#cell()","bio::pdb::utils#centreofgravity()","bio::pdb::chainfinder#chains()","bio::flatfileindex::fileid#check()","bio::flatfileindex::fileids#check()","bio::flatfileindex::fileids#check_all()","bio::flatfileindex#check_consistency()","bio::flatfileindex::databank#check_consistency()","bio::meme::mast#check_options()","bio::contingencytable#chi_square()","bio::contingencytable#chi_square_element()","bio::kegg::keggtab#child_nodes()","bio::tree#children()","bio::flatfileindex::indexer::chose_sort_proc()","bio::kegg::genes#chromosome()","bio::kegg::genome#chromosomes()","bio::genbank#circular()","bio::genpept#circular()","bio::transfac::class#cl()","bio::transfac::factor#cl()","bio::kegg::enzyme#classes()","bio::paml::codeml::model#classes()","bio::genbank#classification()","bio::pdb#classification()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#clean_all()","bio::tree#clear()","bio::tree#clear_node()","bio::pathway#clear_relations!()","bio::pathway#clique()","bio::pathway#cliquishness()","bio::fantom::maxml::sequences#cloneids()","bio::flatfile#close()","bio::flatfile::bufferedinputstream#close()","bio::flatfileindex#close()","bio::flatfileindex::bdb_1::bdbmappingfile#close()","bio::flatfileindex::bdbwrapper#close()","bio::flatfileindex::databank#close()","bio::flatfileindex::fileid#close()","bio::flatfileindex::fileids#close()","bio::flatfileindex::flat_1::flatmappingfile#close()","bio::flatfileindex::namespaces#close()","bio::flatfileindex::template::namespace#close()","bio::command::tmpdir#close!()","bio::flatfileindex::fileids#close_all()","bio::flatfileindex::namespaces#close_all()","bio::flatfileindex::indexer::parser::templateparser#close_flatfile()","bio::flatfileindex#closed?()","bio::transfac::factor#cn()","bio::transfac::gene#co()","bio::sequence::aa#codes()","bio::kegg::genes#codon_usage()","bio::sequence::na#codon_usage()","bio::kegg::enzyme#cofactors()","bio::alignment::originalalignment#collect!()","bio::alignment::originalalignment#collect_align()","bio::alignment::enumerableextension#collect_each_site()","bio::tree#collect_edge!()","bio::tree#collect_node!()","bio::aaindex2#cols()","bio::contingencytable#column_sum()","bio::contingencytable#column_sum_all()","bio::aaindex#comment()","bio::embl#comment()","bio::fastaformat#comment()","bio::kegg::compound#comment()","bio::kegg::drug#comment()","bio::kegg::enzyme#comment()","bio::kegg::genome#comment()","bio::kegg::glycan#comment()","bio::ncbidb::common#comment()","bio::prosite#comment()","bio::transfac#comment()","bio::gff::gff2::record#comment_only?()","bio::gff::gff2::record#comments()","bio::gff::record#comments()","bio::gff::gff2::record#comments=()","bio::gff::record#comments=()","bio::ncbidb::common#common_name()","bio::pathway#common_subgraph()","bio::alignment::originalalignment#compact()","bio::alignment::originalalignment#compact!()","bio::gcg::msf#compcheck()","bio::location#complement()","bio::restrictionenzyme::doublestranded::cutlocations#complement()","bio::restrictionenzyme::fragments#complement()","bio::sangerchromatogram#complement()","bio::sequence::na#complement()","bio::sangerchromatogram#complement!()","bio::sequence::na#complement!()","bio::sim4::report::hit#complement?()","bio::spidey::report::hit#complement?()","bio::restrictionenzyme::doublestranded::cutlocationsinenzymenotation#complement_to_array_index()","bio::kegg::glycan#composition()","bio::sequence::common#composition()","bio::kegg::glycan#compounds()","bio::kegg::module#compounds()","bio::kegg::pathway#compounds()","bio::kegg::module#compounds_as_hash()","bio::kegg::pathway#compounds_as_hash()","bio::kegg::module#compounds_as_strings()","bio::kegg::pathway#compounds_as_strings()","bio::alignment::originalalignment#concat()","bio::restrictionenzyme::denseintarray#concat()","bio::restrictionenzyme::sortednumarray#concat()","bio::sequence::common#concat()","bio::tree#concat()","bio::pdb::chemicalcomponent#conect()","bio::meme::mast#config()","bio::alignment::enumerableextension#consensus_each_site()","bio::alignment::enumerableextension#consensus_iupac()","bio::alignment::sitemethods#consensus_iupac()","bio::alignment::enumerableextension#consensus_string()","bio::alignment::sitemethods#consensus_string()","bio::map::actslikemap#contains_marker?()","bio::contingencytable#contingency_coefficient()","bio::pdb::record::continue?()","bio::pdb::record#continue?()","bio::kegg::expression#control_avg()","bio::kegg::expression#control_sd()","bio::kegg::expression#control_var()","bio::blast::default::report#converged?()","bio::blast::default::report::iteration#converged?()","bio::togows::rest#convert()","bio::togows::rest::convert()","bio::alignment::enumerableextension#convert_match()","bio::sequence::qualityscore::converter#convert_nothing()","bio::sequence::qualityscore::converter#convert_scores_from_phred_to_solexa()","bio::sequence::qualityscore::converter#convert_scores_from_solexa_to_phred()","bio::pdb::utils::convert_to_xyz()","bio::alignment::enumerableextension#convert_unmatch()","bio::codontable::copy()","bio::aaindex1#correlation_coefficient()","bio::ncbi::rest::esearch::methods#count()","bio::transfac::factor#cp()","bio::iprscan::report::match#crc64()","bio::flatfileindex::flat_1::record::create()","bio::restrictionenzyme::doublestranded#create_action_at()","bio::restrictionenzyme::range::sequencerange#create_bins()","bio::paml::codeml::create_config_file()","bio::paml::codeml::create_control_file()","bio::restrictionenzyme::doublestranded#create_cut_locations()","bio::pdb::record::create_definition_hash()","bio::restrictionenzyme::analysis#create_enzyme_actions()","bio::restrictionenzyme::doublestranded#create_primary_and_complement()","bio::kegg::genes#cu_list()","bio::reference#current()","bio::soft#custom_raise()","bio::restrictionenzyme::cut()","bio::restrictionenzyme::analysis::cut()","bio::restrictionenzyme::analysis#cut()","bio::restrictionenzyme::analysis#cut_and_return_by_permutations()","bio::restrictionenzyme::cutsymbol#cut_symbol()","bio::restrictionenzyme::cutsymbol::cutsymbol__::cut_symbol()","bio::restrictionenzyme::cutsymbol::cutsymbol__::cut_symbol=()","bio::sequence::na#cut_with_enzyme()","bio::sequence::na#cut_with_enzymes()","bio::restrictionenzyme::analysis::cut_without_permutations()","bio::restrictionenzyme::analysis#cut_without_permutations()","bio::paml::codeml::model#dn_ds()","bio::paml::codeml::positivesite#dn_ds()","bio::abif#data()","bio::fastanumericformat#data()","bio::embl#data_class()","bio::fantom::maxml::annotations#data_source()","bio::kegg::genome#data_source()","bio::hinv::hitdefinition#data_source_coverage()","bio::hinv::hitdefinition#data_source_db_reference_protein_motif_id()","bio::hinv::hitdefinition#data_source_definition()","bio::hinv::hitdefinition#data_source_homologous_species()","bio::hinv::hitdefinition#data_source_identity()","bio::hinv::hitdefinition#data_source_similarity_category()","bio::kegg::keggtab#database()","bio::blast::remote::information#database_description()","bio::blast::remote::information#databases()","bio::fetch#databases()","bio::fantom::maxml::annotation#datasrc()","bio::genbank#date()","bio::genpept#date()","bio::iprscan::report::match#date()","bio::medline#date()","bio::prosite#date()","bio::transfac#date()","bio::embl#date_created()","bio::embl#date_modified()","bio::genbank#date_modified()","bio::blast::default::report#db()","bio::blast::wu::report#db()","bio::registry#db()","bio::kegg::keggtab#db_by_abbrev()","bio::go::external2go#db_ids()","bio::blast::report#db_len()","bio::blast::report#db_num()","bio::kegg::keggtab#db_path()","bio::kegg::keggtab#db_path_by_abbrev()","bio::flatfile#dbclass=()","bio::flatfile::autodetect::ruleproc#dbclasses()","bio::flatfile::autodetect::ruleregexp#dbclasses()","bio::aaindex#dblinks()","bio::embl#dblinks()","bio::kegg::compound#dblinks()","bio::kegg::drug#dblinks()","bio::kegg::enzyme#dblinks()","bio::kegg::genes#dblinks()","bio::kegg::glycan#dblinks()","bio::kegg::orthology#dblinks()","bio::kegg::pathway#dblinks()","bio::kegg::compound#dblinks_as_hash()","bio::kegg::common::dblinksashash#dblinks_as_hash()","bio::kegg::drug#dblinks_as_hash()","bio::kegg::enzyme#dblinks_as_hash()","bio::kegg::genes#dblinks_as_hash()","bio::kegg::glycan#dblinks_as_hash()","bio::kegg::orthology#dblinks_as_hash()","bio::kegg::pathway#dblinks_as_hash()","bio::kegg::compound#dblinks_as_strings()","bio::kegg::drug#dblinks_as_strings()","bio::kegg::enzyme#dblinks_as_strings()","bio::kegg::genes#dblinks_as_strings()","bio::kegg::glycan#dblinks_as_strings()","bio::kegg::orthology#dblinks_as_strings()","bio::kegg::pathway#dblinks_as_strings()","bio::pdb#dbref()","bio::go::external2go#dbs()","bio::genpept#dbsource()","bio::embldb::common#de()","bio::prosite#de()","bio::transfac::gene#de()","bio::transfac::matrix#de()","bio::transfac::site#de()","bio::pdb::record::def_rec()","bio::flatfile::autodetect::default()","bio::flatfile::autodetect::default=()","bio::ncbi::default_email()","bio::ncbi::default_email=()","bio::flatfileindex#default_namespaces()","bio::flatfileindex#default_namespaces=()","bio::psort::psort1::report::default_parser()","bio::psort::psort2::report::default_parser()","bio::ncbi::default_tool()","bio::ncbi::default_tool=()","bio::aaindex#definition()","bio::blast::default::report::hit#definition()","bio::blat::report::hit#definition()","bio::embldb::common#definition()","bio::kegg::genes#definition()","bio::kegg::genome#definition()","bio::kegg::module#definition()","bio::kegg::orthology#definition()","bio::kegg::pathway#definition()","bio::kegg::reaction#definition()","bio::ncbidb::common#definition()","bio::pdb#definition()","bio::prosite#definition()","bio::sim4::report::hit#definition()","bio::spidey::report::hit#definition()","bio::alignment::originalalignment#delete()","bio::blast::ncbioptions#delete()","bio::pathway#delete()","bio::restrictionenzyme::denseintarray#delete()","bio::restrictionenzyme::sortednumarray#delete()","bio::gff::gff2::record#delete_attribute()","bio::gff::gff2::record#delete_attributes()","bio::pathway#depth_first_search()","bio::tree#descendents()","bio::paml::codeml::report#descr()","bio::embldb::common#description()","bio::fastadefline#description()","bio::iprscan::report::match#description()","bio::kegg::pathway#description()","bio::fastadefline#descriptions()","bio::sirna#design()","bio::sirna::shrna#design()","bio::pathway#dfs()","bio::pathway#dfs_topological_sort()","bio::pdb::utils::dihedral_angle()","bio::pathway#dijkstra()","bio::pathway#directed()","bio::pathway#directed?()","bio::fasta::report::hit#direction()","bio::kegg::genome#disease()","bio::kegg::enzyme#diseases()","bio::kegg::genes#diseases()","bio::kegg::pathway#diseases()","bio::kegg::common::diseasesashash#diseases_as_hash()","bio::kegg::genes#diseases_as_hash()","bio::kegg::pathway#diseases_as_hash()","bio::kegg::genes#diseases_as_strings()","bio::kegg::pathway#diseases_as_strings()","bio::pdb::coordinate#distance()","bio::pdb::utils::distance()","bio::tree#distance()","bio::tree::edge#distance=()","bio::tree#distance_matrix()","bio::tree::edge#distance_string=()","bio::psort::psort2::report::divent()","bio::embl#division()","bio::genbank#division()","bio::genpept#division()","bio::kegg::genes#division()","bio::prosite#division()","bio::das#dna()","bio::sequence::na#dna()","bio::sequence::na#dna!()","bio::alignment::originalalignment#do_align()","bio::pdb::record#do_parse()","bio::pdb::record::atom#do_parse()","bio::medline#doi()","bio::genscan::report::exon#donor_score()","bio::kegg::expression#down_regulated()","bio::medline#dp()","bio::embldb::common#dr()","bio::prosite#dr()","bio::transfac::class#dr()","bio::transfac::factor#dr()","bio::transfac::site#dr()","bio::uniprotkb#dr()","bio::kegg::genes#drug_targets_as_strings()","bio::embl#dt()","bio::prosite#dt()","bio::transfac#dt()","bio::uniprotkb#dt()","bio::pathway#dump_list()","bio::pathway#dump_matrix()","bio::paml::common#dump_parameters()","bio::alignment::originalalignment#dup()","bio::alignment::originalalignment#each()","bio::blast::default::report#each()","bio::blast::default::report::hit#each()","bio::blast::default::report::iteration#each()","bio::blast::fastacmd#each()","bio::blast::report#each()","bio::blast::report::hit#each()","bio::blast::report::iteration#each()","bio::blat::report#each()","bio::blat::report::hit#each()","bio::codontable#each()","bio::das::entry_point#each()","bio::fantom::maxml::annotations#each()","bio::fantom::maxml::sequences#each()","bio::fasta::report#each()","bio::fastanumericformat#each()","bio::feature#each()","bio::features#each()","bio::flatfile#each()","bio::flatfileindex::fileids#each()","bio::flatfileindex::flat_1::flatmappingfile#each()","bio::flatfileindex::indexer::parser::templateparser#each()","bio::flatfileindex::results#each()","bio::hmmer::report#each()","bio::hmmer::report::hit#each()","bio::locations#each()","bio::meme::mast::report#each()","bio::pdb#each()","bio::pdb::chain#each()","bio::pdb::model#each()","bio::pdb::residue#each()","bio::rebase#each()","bio::references#each()","bio::restrictionenzyme::denseintarray#each()","bio::restrictionenzyme::sortednumarray#each()","bio::sim4::report#each()","bio::sim4::report::hit#each()","bio::spidey::report#each()","bio::spidey::report::hit#each()","bio::pdb::atomfinder#each_atom()","bio::pdb::residue#each_atom()","bio::embl#each_cds()","bio::genbank#each_cds()","bio::pdb::chainfinder#each_chain()","bio::pdb::model#each_chain()","bio::tree#each_edge()","bio::tree#each_edge_in_path()","bio::blast::fastacmd#each_entry()","bio::flatfile#each_entry()","bio::flatfileindex::namespaces#each_files()","bio::embl#each_gene()","bio::genbank#each_gene()","bio::pdb::hetatmfinder#each_hetatm()","bio::pdb::chain#each_heterogen()","bio::pdb::heterogenfinder#each_heterogen()","bio::blast::default::report#each_hit()","bio::blast::report#each_hit()","bio::blat::report#each_hit()","bio::hmmer::report#each_hit()","bio::sim4::report#each_hit()","bio::spidey::report#each_hit()","bio::hmmer::report::hit#each_hsp()","bio::blast::default::report#each_iteration()","bio::blast::report#each_iteration()","bio::pdb#each_model()","bio::meme::mast::report#each_motif()","bio::flatfileindex::namespaces#each_names()","bio::tree#each_node()","bio::tree#each_out_edge()","bio::alignment::originalalignment#each_pair()","bio::pdb::chain#each_residue()","bio::pdb::residuefinder#each_residue()","bio::flatfile::autodetect#each_rule()","bio::alignment::arrayextension#each_seq()","bio::alignment::enumerableextension#each_seq()","bio::alignment::hashextension#each_seq()","bio::alignment::originalalignment#each_seq()","bio::alignment::enumerableextension#each_site()","bio::alignment::enumerableextension#each_site_step()","bio::pdb::record#each_symbol()","bio::alignment::enumerableextension#each_window()","bio::flatfileindex::fileids#each_with_index()","bio::kegg::genes#eclinks()","bio::kegg::kgml::relation#edge()","bio::pathway#edges()","bio::tree#edges()","bio::ncbi::rest#efetch()","bio::ncbi::rest::efetch()","bio::pubmed#efetch()","bio::pubmed::efetch()","bio::blast::report#eff_space()","bio::ncbi::rest#einfo()","bio::ncbi::rest::einfo()","bio::transfac::site#el()","bio::flatfile::autodetect#elements()","bio::pdb::coordinate::elements()","bio::reference#embl()","bio::uniprotkb#embl_dr()","bio::hinv::keywordsearch#end()","bio::reference#endnote()","bio::emboss::entret()","bio::blast::report#entrez_query()","bio::alignment::multifastaformat#entries()","bio::alignment::multifastaformat#entries()","bio::alignment::multifastaformat#entries()","bio::blast::default::report#entropy()","bio::blast::report#entropy()","bio::blast::report::blastxmlsplitter#entry()","bio::blast::report::blastxmlsplitter#entry()","bio::embl#entry()","bio::fastaformat#entry()","bio::kegg::enzyme#entry()","bio::kegg::genes#entry()","bio::nbrf#entry()","bio::togows::rest#entry()","bio::togows::rest::entry()","bio::uniprotkb#entry()","bio::togows::rest#entry_database_list()","bio::togows::rest::entry_database_list()","bio::blast::report::blastxmlsplitter#entry_ended_pos()","bio::blast::report::blastxmlsplitter#entry_ended_pos()","bio::flatfile#entry_ended_pos()","bio::aaindex#entry_id()","bio::db#entry_id()","bio::embl#entry_id()","bio::fantom::maxml#entry_id()","bio::fantom::maxml::annotation#entry_id()","bio::fasta::report::hit::query#entry_id()","bio::fastaformat#entry_id()","bio::fastq#entry_id()","bio::genbank#entry_id()","bio::genpept#entry_id()","bio::kegg::compound#entry_id()","bio::kegg::drug#entry_id()","bio::kegg::enzyme#entry_id()","bio::kegg::genes#entry_id()","bio::kegg::genome#entry_id()","bio::kegg::glycan#entry_id()","bio::kegg::module#entry_id()","bio::kegg::orthology#entry_id()","bio::kegg::pathway#entry_id()","bio::kegg::reaction#entry_id()","bio::litdb#entry_id()","bio::lasergene#entry_id()","bio::medline#entry_id()","bio::pdb#entry_id()","bio::pdb::chemicalcomponent#entry_id()","bio::prosite#entry_id()","bio::transfac#entry_id()","bio::targetp::report#entry_id()","bio::uniprotkb#entry_id()","bio::embl#entry_name()","bio::uniprotkb#entry_name()","bio::flatfile#entry_pos_flag()","bio::flatfile#entry_pos_flag=()","bio::flatfile#entry_raw()","bio::blast::report::blastxmlsplitter#entry_start_pos()","bio::blast::report::blastxmlsplitter#entry_start_pos()","bio::flatfile#entry_start_pos()","bio::embl#entry_version()","bio::rebase#enzyme_name?()","bio::restrictionenzyme::enzyme_name?()","bio::kegg::compound#enzymes()","bio::kegg::glycan#enzymes()","bio::kegg::pathway#enzymes()","bio::kegg::reaction#enzymes()","bio::rebase#enzymes()","bio::kegg::pathway#enzymes_as_strings()","bio::flatfile#eof?()","bio::flatfile::bufferedinputstream#eof?()","bio::relation#eql?()","bio::locations#equals?()","bio::kegg::reaction#equation()","bio::soft#error_msg()","bio::fastq#error_probabilities()","bio::clustalw#errorlog()","bio::command#escape_shell()","bio::command#escape_shell_unix()","bio::command#escape_shell_windows()","bio::restrictionenzyme::cutsymbol#escaped_cut_symbol()","bio::restrictionenzyme::cutsymbol::cutsymbol__::escaped_cut_symbol()","bio::ncbi::rest#esearch()","bio::ncbi::rest::esearch()","bio::pubmed#esearch()","bio::pubmed::esearch()","bio::ncbi::rest#esearch_count()","bio::ncbi::rest::esearch_count()","bio::ncbi::rest::esearch::methods#est()","bio::blast::default::report::hit#evalue()","bio::blast::report::hit#evalue()","bio::fasta::report::hit#evalue()","bio::iprscan::report::match#evalue()","bio::tree::node#events()","bio::fantom::maxml::annotations#evidence()","bio::emboss#exec()","bio::psort::cgidriver#exec()","bio::psort::psort1#exec()","bio::psort::psort2#exec()","bio::pts1#exec()","bio::sim4#exec()","bio::sim4#exec_local()","bio::db#exists?()","bio::blast::wu::report#exit_code()","bio::blast::wu::report#exit_code_message()","bio::genscan::report::exon#exon_type_long()","bio::blat::report::hit#exons()","bio::sim4::report::hit#exons()","bio::spidey::report::hit#exons()","bio::blast::report#expect()","bio::blast::wu::report#expect()","bio::contingencytable#expected()","bio::flatfileindex::flat_1::flatmappingfile#export_tsv()","bio::flatfileindex::flat_1::flatmappingfile::external_merge_proc()","bio::flatfileindex::flat_1::flatmappingfile::external_merge_sort_proc()","bio::flatfileindex::flat_1::flatmappingfile::external_sort_proc()","bio::alignment::originalprivate::extract_key()","bio::alignment::originalprivate::extract_seq()","bio::transfac::factor#fa()","bio::prosite#false_neg()","bio::prosite#false_negative_hits()","bio::prosite#false_pos()","bio::prosite#false_positive_hits()","bio::prosite#false_positive_sequences()","bio::fastaformat#fasta()","bio::blast::wu::report#fatal_errors()","bio::das#features()","bio::embl#features()","bio::ncbidb::common#features()","bio::blast::fastacmd#fetch()","bio::db#fetch()","bio::fetch#fetch()","bio::transfac::factor#ff()","bio::mafft::fftns()","bio::mafft::fftnsi()","bio::kegg::kgml::entry#fgcolor()","bio::kegg::kgml::entry#fgcolor=()","bio::embl#fh()","bio::litdb#field()","bio::flatfileindex::databank#fileids()","bio::flatfileindex::bdb_1::primarynamespace#filename()","bio::flatfileindex::bdb_1::secondarynamespace#filename()","bio::flatfileindex::bdbwrapper#filename()","bio::flatfileindex::databank::filename()","bio::flatfileindex::flat_1::primarynamespace#filename()","bio::flatfileindex::flat_1::secondarynamespace#filename()","bio::flatfileindex::template::namespace#filename()","bio::flatfileindex::fileids#filenames()","bio::blast::report#filter()","bio::pdb::atomfinder#find_atom()","bio::pdb::chainfinder#find_chain()","bio::pdb::hetatmfinder#find_hetatm()","bio::pdb::heterogenfinder#find_heterogen()","bio::restrictionenzyme::analysis#find_match_locations()","bio::pdb::modelfinder#find_model()","bio::pdb::residuefinder#find_residue()","bio::pdb::utils#finder()","bio::features#first()","bio::locations#first()","bio::restrictionenzyme::denseintarray#first()","bio::restrictionenzyme::sortednumarray#first()","bio::fastaformat#first_name()","bio::flatfileindex::bdbdefault::flag_append()","bio::flatfileindex::bdbdefault::flag_read()","bio::flatfileindex::bdbdefault::flag_write()","bio::pathway#floyd()","bio::pathway#floyd_warshall()","bio::restrictionenzyme::range::sequencerange::fragment#for_display()","bio::restrictionenzyme::range::sequencerange::fragments#for_display()","bio::flatfile::bufferedinputstream::for_io()","bio::flatfile::foreach()","bio::fastq#format()","bio::flatfileindex::databank#format()","bio::reference#format()","bio::fasta#format=()","bio::fastq#format=()","bio::flatfileindex::databank#format=()","bio::iprscan::report#format_raw()","bio::fetch#formats()","bio::flatfileindex::formatstring2class()","bio::pdb::chemicalcomponent#formul()","bio::kegg::compound#formula()","bio::kegg::drug#formula()","bio::sequence::na#forward_complement()","bio::sequence::na#forward_complement!()","bio::blast::default::report::hit#found_again?()","bio::restrictionenzyme::range::sequencerange#fragments()","bio::restrictionenzyme::analysis#fragments_for_display()","bio::relation#from()","bio::embl#ft()","bio::transfac::factor#ft()","bio::uniprotkb#ft()","bio::pts1#function()","bio::alignment::propertymethods#gap_char()","bio::blast::report#gap_extend()","bio::gcg::msf#gap_length_weight()","bio::blast::report#gap_open()","bio::alignment::propertymethods#gap_regexp()","bio::gcg::msf#gap_weight()","bio::blast::default::report#gapped_entropy()","bio::blast::default::report#gapped_kappa()","bio::blast::default::report#gapped_lambda()","bio::alignment::gap::gapped_pos()","bio::kegg::genes#gbposition()","bio::sequence::na#gc_content()","bio::sequence::na#gc_percent()","bio::sequence::na#gc_skew()","bio::codontable#gen_ambiguity_map()","bio::kegg::genes#gene()","bio::fantom::maxml::annotations#gene_name()","bio::uniprotkb#gene_name()","bio::uniprotkb#gene_names()","bio::reference#general()","bio::phylip::distancematrix::generate()","bio::kegg::enzyme#genes()","bio::kegg::genes#genes()","bio::kegg::orthology#genes()","bio::kegg::pathway#genes()","bio::kegg::common::genesashash#genes_as_hash()","bio::kegg::enzyme#genes_as_hash()","bio::kegg::orthology#genes_as_hash()","bio::kegg::pathway#genes_as_hash()","bio::kegg::enzyme#genes_as_strings()","bio::kegg::orthology#genes_as_strings()","bio::kegg::pathway#genes_as_strings()","bio::reference#genome_biol()","bio::reference#genome_res()","bio::blast::remote::genomenet()","bio::spidey::report::hit#genomic()","bio::pdb::utils#geometriccentre()","bio::blast::ncbioptions#get()","bio::db#get()","bio::fantom::maxml::sequences#get()","bio::fastadefline#get()","bio::flatfileindex::fileid#get()","bio::fantom::maxml::annotations#get_all_by_qualifier()","bio::fastadefline#get_all_by_type()","bio::alignment::propertymethods#get_all_property()","bio::gff::gff2::record#get_attribute()","bio::gff::gff2::record#get_attributes()","bio::nexus#get_blocks()","bio::nexus#get_blocks_by_name()","bio::blast::fastacmd#get_by_id()","bio::fantom::get_by_id()","bio::fetch#get_by_id()","bio::flatfileindex#get_by_id()","bio::fantom::maxml::annotations#get_by_qualifier()","bio::fastadefline#get_by_type()","bio::nexus#get_characters_blocks()","bio::nexus::charactersblock#get_characters_string()","bio::nexus::charactersblock#get_characters_strings_by_name()","bio::nexus#get_data_blocks()","bio::registry#get_database()","bio::nexus::charactersblock#get_datatype()","bio::nexus#get_distances_blocks()","bio::das#get_dna()","bio::das#get_dsn()","bio::tree#get_edge()","bio::tree#get_edge_distance()","bio::tree#get_edge_distance_string()","bio::tree#get_edge_merged()","bio::blast::rpsblast::rpsblastsplitter#get_entry()","bio::blast::rpsblast::rpsblastsplitter#get_entry()","bio::blast::report::blastxmlsplitter#get_entry()","bio::blast::report::blastxmlsplitter#get_entry()","bio::fasta::report::fastaformat10splitter#get_entry()","bio::fasta::report::fastaformat10splitter#get_entry()","bio::flatfile::splitter::default#get_entry()","bio::flatfile::splitter::lineoriented#get_entry()","bio::flatfile::splitter::template#get_entry()","bio::das#get_entry_points()","bio::das#get_features()","bio::flatfileindex::databank#get_flatfile_data()","bio::nexus::charactersblock#get_gap_character()","bio::pdb::chain#get_heterogen_by_id()","bio::nexus::charactersblock#get_match_character()","bio::nexus::charactersblock#get_matrix()","bio::nexus::distancesblock#get_matrix()","bio::nexus::nexusmatrix#get_max_col()","bio::nexus::nexusmatrix#get_max_row()","bio::nexus::charactersblock#get_missing()","bio::nexus::genericblock#get_name()","bio::nexus::nexusmatrix#get_name()","bio::tree#get_node_bootstrap()","bio::tree#get_node_bootstrap_string()","bio::tree#get_node_by_name()","bio::tree#get_node_name()","bio::nexus::charactersblock#get_number_of_characters()","bio::nexus::distancesblock#get_number_of_characters()","bio::nexus::charactersblock#get_number_of_taxa()","bio::nexus::distancesblock#get_number_of_taxa()","bio::nexus::taxablock#get_number_of_taxa()","bio::blast::report::blastxmlsplitter#get_parsed_entry()","bio::blast::report::blastxmlsplitter#get_parsed_entry()","bio::flatfile::splitter::lineoriented#get_parsed_entry()","bio::flatfile::splitter::template#get_parsed_entry()","bio::flatfileindex::flat_1::flatmappingfile#get_record()","bio::pdb::chemicalcomponent::record::get_record_class()","bio::pdb::record::get_record_class()","bio::pdb::chain#get_residue_by_id()","bio::pdb::residue::get_residue_id_from_atom()","bio::nexus::charactersblock#get_row_name()","bio::nexus::nexusmatrix#get_row_string()","bio::nexus::nexusmatrix#get_row_strings_by_name()","bio::clustalw::report#get_sequence()","bio::clustalw::report#get_sequence()","bio::das#get_sequence()","bio::nexus::charactersblock#get_sequence()","bio::nexus::charactersblock#get_sequences_by_name()","bio::nexus::datablock#get_taxa()","bio::nexus::taxablock#get_taxa()","bio::nexus#get_taxa_blocks()","bio::nexus::genericblock#get_tokens()","bio::nexus::treesblock#get_tree()","bio::nexus::treesblock#get_tree_names()","bio::nexus::treesblock#get_tree_strings()","bio::nexus::treesblock#get_tree_strings_by_name()","bio::nexus#get_trees_blocks()","bio::nexus::treesblock#get_trees_by_name()","bio::nexus::distancesblock#get_triangle()","bio::das#get_types()","bio::nexus::nexusmatrix#get_value()","bio::flatfile::bufferedinputstream#getc()","bio::flatfile#gets()","bio::flatfile::bufferedinputstream#gets()","bio::fastadefline#gi()","bio::fastaformat#gi()","bio::ncbidb::common#gi()","bio::kegg::compound#glycans()","bio::uniprotkb#gn()","bio::go::external2go#go_ids()","bio::go::external2go#go_terms()","bio::iprscan::report::match#go_terms()","bio::go::geneassociation#goid()","bio::go::ontology#goid2term()","bio::paml::codeml::positivesites#graph()","bio::paml::codeml::positivesites#graph_omega()","bio::paml::codeml::positivesites#graph_seq()","bio::ncbi::rest::esearch::methods#gss()","bio::fantom::maxml#gsub_entities()","bio::flatfile::autodetect::ruledebug#guess()","bio::flatfile::autodetect::ruleproc#guess()","bio::flatfile::autodetect::ruleregexp#guess()","bio::flatfile::autodetect::ruleregexp2#guess()","bio::flatfile::autodetect::ruletemplate#guess()","bio::sequence#guess()","bio::sequence::guess()","bio::alignment::sitemethods#has_gap?()","bio::alignment::originalalignment#has_key?()","bio::relation#hash()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#hc_between_strands()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#hc_between_strands_as_original_class()","bio::clustalw::report#header()","bio::clustalw::report#header()","bio::kegg::kgml::entry#height()","bio::kegg::kgml::entry#height=()","bio::pdb#helix()","bio::tmhmm::report#helix()","bio::restrictionenzyme::doublestranded::cutlocationsinenzymenotation#helper_for_to_array_index()","bio::pdb::heterogen#hetatm()","bio::pdb::residue#hetatm()","bio::pdb::hetatmfinder#hetatms()","bio::pdb::heterogenfinder#heterogens()","bio::pdb::chemicalcomponent#hetnam()","bio::pdb::chemicalcomponent#hetsyn()","bio::uniprotkb#hi()","bio::flatfile::autodetect::rulespecial#higher_priority_elements()","bio::hinv::hit2acc()","bio::hinv::hit_cnt()","bio::hinv::hit_definition()","bio::sim4::report::segmentpair#hit_from()","bio::spidey::report::segmentpair#hit_from()","bio::sim4::report::hit#hit_id()","bio::spidey::report::hit#hit_id()","bio::hinv::hit_pubmedid()","bio::spidey::report::segmentpair#hit_strand()","bio::sim4::report::segmentpair#hit_to()","bio::spidey::report::segmentpair#hit_to()","bio::hinv::hit_xml()","bio::blast::bl2seq::report::iteration#hits()","bio::blast::default::report#hits()","bio::blast::default::report::iteration#hits()","bio::blast::report#hits()","bio::blast::default::report::iteration#hits_for_pattern()","bio::blast::default::report::iteration#hits_found_again()","bio::blast::default::report::iteration#hits_newly_found()","bio::hinv::hix2hit()","bio::hinv::hix_cnt()","bio::hinv::hix_represent()","bio::transfac::factor#ho()","bio::sim4::report::segmentpair#hseq()","bio::spidey::report::segmentpair#hseq()","bio::blast::report#hsp_len()","bio::blat::report::hit#hsps()","bio::sim4::report::hit#hsps()","bio::spidey::report::hit#hsps()","bio::command#http_post()","bio::command#http_post_form()","bio::pdb::residue#icode=()","bio::gff::gff3::record#id()","bio::gff::gff3::record#id=()","bio::embl#id_line()","bio::uniprotkb#id_line()","bio::hinv::id_search()","bio::fantom::maxml::sequence#id_strings()","bio::fantom::maxml::sequences#id_strings()","bio::fastadefline#id_strings()","bio::fastaformat#identifiers()","bio::blast::default::report::hit#identity()","bio::blast::report::hit#identity()","bio::fasta::report::hit#identity()","bio::sequence::na#illegal_bases()","bio::flatfileindex::flat_1::flatmappingfile#import_tsv_files()","bio::psort::psort1::imsut()","bio::psort::psort2::imsut()","bio::transfac::factor#in()","bio::flatfileindex#include?()","bio::flatfileindex::template::namespace#include?()","bio::restrictionenzyme::denseintarray#include?()","bio::restrictionenzyme::range::cutranges#include?()","bio::restrictionenzyme::range::horizontalcutrange#include?()","bio::restrictionenzyme::range::verticalcutrange#include?()","bio::restrictionenzyme::sortednumarray#include?()","bio::tree#include?()","bio::flatfileindex#include_in_namespaces?()","bio::flatfileindex#include_in_primary?()","bio::blast::report#inclusion()","bio::aaindex1#index()","bio::alignment::originalalignment#index()","bio::flatfileindex::databank#index_type=()","bio::kegg::enzyme#inhibitors()","bio::flatfileindex::flat_1::flatmappingfile#init()","bio::flatfileindex::databank#init_fileids()","bio::restrictionenzyme::doublestranded::cutlocationpair#init_with_array()","bio::flatfileindex::flat_1::flatmappingfile#init_with_sorted_tsv_file()","bio::restrictionenzyme::denseintarray#initialize_copy()","bio::restrictionenzyme::sortednumarray#initialize_copy()","bio::pdb::record#initialize_from_string()","bio::restrictionenzyme::doublestranded#initialize_with_pattern_and_cut_locations()","bio::restrictionenzyme::doublestranded#initialize_with_pattern_and_cut_symbols()","bio::restrictionenzyme::doublestranded#initialize_with_rebase()","bio::genscan::report::exon#initiation_score()","bio::sequence::input()","bio::tree#insert_node()","bio::flatfile::autodetect#inspect()","bio::flatfile::autodetect::rulesarray#inspect()","bio::pdb#inspect()","bio::pdb::chain#inspect()","bio::pdb::model#inspect()","bio::pdb::record#inspect()","bio::pdb::residue#inspect()","bio::tree::edge#inspect()","bio::tree::node#inspect()","bio::phylip::phylipformat#interleaved?()","bio::restrictionenzyme::denseintarray#internal_data()","bio::restrictionenzyme::denseintarray#internal_data=()","bio::restrictionenzyme::sortednumarray#internal_data_hash()","bio::restrictionenzyme::sortednumarray#internal_data_hash=()","bio::togows::rest#internal_http()","bio::flatfileindex::flat_1::flatmappingfile::internal_sort_proc()","bio::sim4::report::hit#introns()","bio::spidey::report::hit#introns()","bio::flatfile#io()","bio::medline#ip()","bio::iprscan::report::match#ipr_id()","bio::iprscan::report::match#ipr_odescription()","bio::nexus::nexusmatrix#is_empty?()","bio::alignment::propertymethods#is_gap?()","bio::flatfile::autodetect::ruletemplate#is_prior_to()","bio::alignment::originalalignment#isolate()","bio::medline#issue()","bio::kegg::enzyme#iubmb_reactions()","bio::aaindex#journal()","bio::litdb#journal()","bio::medline#journal()","bio::ncbi::rest::efetch::methods#journal()","bio::ncbi::rest::esearch::methods#journal()","bio::pdb#jrnl()","bio::blast::default::report#kappa()","bio::blast::report#kappa()","bio::paml::codeml::model#kappa()","bio::kegg::compound#kcf()","bio::kegg::drug#kcf()","bio::kegg::glycan#kcf()","bio::kegg::enzyme#kegg_reactions()","bio::kegg::genes#keggclass()","bio::kegg::glycan#keggclass()","bio::kegg::module#keggclass()","bio::kegg::orthology#keggclass()","bio::kegg::pathway#keggclass()","bio::kegg::genes#keggclasses()","bio::kegg::orthology#keggclasses()","bio::kegg::keggtab#keggorg2taxo()","bio::kegg::keggtab#keggorg2taxonomy()","bio::flatfileindex::bdbwrapper#keys()","bio::flatfileindex::fileids#keys()","bio::litdb#keyword()","bio::hinv::keyword_search()","bio::embldb::common#keywords()","bio::ncbidb::common#keywords()","bio::pdb#keywords()","bio::kegg::pathway#ko_pathway()","bio::kegg::keggtab#korg2taxo()","bio::kegg::keggtab#korg2taxonomy()","bio::pathway#kruskal()","bio::embldb::common#kw()","bio::kegg::kgml::entry#label()","bio::kegg::kgml::entry#label=()","bio::blast::default::report#lambda()","bio::blast::report#lambda()","bio::blast::default::report::hit#lap_at()","bio::blast::report::hit#lap_at()","bio::fasta::report::hit#lap_at()","bio::fasta::report#lap_over()","bio::nexus::util::larger_than_zero()","bio::features#last()","bio::locations#last()","bio::restrictionenzyme::denseintarray#last()","bio::restrictionenzyme::sortednumarray#last()","bio::tree#leaves()","bio::restrictionenzyme::stringformatting#left_padding()","bio::blast::default::report::hit#len()","bio::blat::report::hit#len()","bio::sim4::report::hit#len()","bio::spidey::report::hit#len()","bio::fasta::report::hit::query#length()","bio::fastaformat#length()","bio::fastanumericformat#length()","bio::genbank#length()","bio::genpept#length()","bio::iprscan::report::match#length()","bio::kegg::genome#length()","bio::locations#length()","bio::meme::motif#length()","bio::nbrf#length()","bio::restrictionenzyme::denseintarray#length()","bio::restrictionenzyme::sortednumarray#length()","bio::targetp::report#length()","bio::fantom::maxml::sequence#library_id()","bio::kegg::genome#lineage()","bio::prosite#list_falsenegative()","bio::prosite#list_falsepositive()","bio::sequence::format#list_output_formats()","bio::prosite#list_potentialhit()","bio::prosite#list_truepositive()","bio::prosite#list_unknown()","bio::prosite#list_xref()","bio::paml::codeml::model#lnl()","bio::paml::common#load_parameters()","bio::rebase::load_yaml()","bio::targetp::report#loc()","bio::blast::local()","bio::fasta::local()","bio::feature#locations()","bio::kegg::genes#locations()","bio::fastadefline#locus()","bio::fastaformat#locus()","bio::genbank#locus()","bio::genpept#locus()","bio::ncbidb::common#locus()","bio::clustalw#log()","bio::mafft#log()","bio::sim4#log()","bio::kegg::expression#logy_minus_logx()","bio::nexus::util::longer_than_zero()","bio::flatfile::autodetect::rulespecial#lower_priority_elements()","bio::tree#lowest_common_ancestor()","bio::alignment::originalalignment#lstrip()","bio::alignment::enumerableextension#lstrip!()","bio::prosite#ma()","bio::transfac::matrix#ma()","bio::prosite#ma2re()","bio::command#make_cgi_params()","bio::command#make_cgi_params_key_value()","bio::command#make_command_line()","bio::blast::ncbioptions#make_command_line_options()","bio::command#make_command_line_unix()","bio::command#make_command_line_windows()","bio::flatfile::autodetect::make_default()","bio::flatfileindex::makeindex()","bio::flatfileindex::indexer::makeindexbdb()","bio::flatfileindex::indexer::makeindexflat()","bio::map::actslikemarker#mapped_to?()","bio::flatfileindex::bdb_1::primarynamespace#mapping()","bio::flatfileindex::bdb_1::secondarynamespace#mapping()","bio::flatfileindex::flat_1::primarynamespace#mapping()","bio::flatfileindex::flat_1::secondarynamespace#mapping()","bio::flatfileindex::template::namespace#mapping()","bio::map::actslikemarker#mappings_on()","bio::fastq#mask()","bio::sequence::sequencemasker#mask_with_enumerator()","bio::sequence::sequencemasker#mask_with_error_probability()","bio::sequence::sequencemasker#mask_with_quality_score()","bio::kegg::compound#mass()","bio::kegg::drug#mass()","bio::kegg::glycan#mass()","bio::blat::report::hit#match()","bio::iprscan::report::match#match_end()","bio::alignment::enumerableextension#match_line()","bio::clustalw::report#match_line()","bio::clustalw::report#match_line()","bio::alignment::enumerableextension#match_line_amino()","bio::alignment::sitemethods#match_line_amino()","bio::alignment::enumerableextension#match_line_nuc()","bio::alignment::sitemethods#match_line_nuc()","bio::iprscan::report::match#match_start()","bio::aaindex2#matrix()","bio::blast::report#matrix()","bio::restrictionenzyme::range::cutranges#max()","bio::prosite#max_repeat()","bio::restrictionenzyme::range::cutranges#max_vertical()","bio::fetch#maxids()","bio::alignment::originalalignment#merge()","bio::alignment::originalalignment#merge!()","bio::medline#mesh()","bio::blast::default::report#message()","bio::blast::report#message()","bio::fastadefline#method_missing()","bio::iprscan::report::match#method_missing()","bio::ncbi::rest::esearch::methods#method_missing()","bio::registry::db#method_missing()","bio::iprscan::report::match#method_name()","bio::medline#mh()","bio::blast::default::report::hit#midline()","bio::blast::report::hit#midline()","bio::blat::report::hit#milli_bad()","bio::restrictionenzyme::range::cutranges#min()","bio::restrictionenzyme::range::cutranges#min_vertical()","bio::blat::report::hit#mismatch()","bio::alignment::propertymethods#missing_char()","bio::spidey::report::hit#missing_mrna_ends()","bio::command#mktmpdir()","bio::transfac::site#mm()","bio::paml::codeml::model#modelnum()","bio::kegg::orthology#modules()","bio::kegg::pathway#modules()","bio::kegg::common::modulesashash#modules_as_hash()","bio::kegg::orthology#modules_as_hash()","bio::kegg::pathway#modules_as_hash()","bio::kegg::orthology#modules_as_strings()","bio::kegg::pathway#modules_as_strings()","bio::sequence::aa#molecular_weight()","bio::sequence::na#molecular_weight()","bio::embl#molecule()","bio::uniprotkb#molecule()","bio::embl#molecule_type()","bio::uniprotkb#molecule_type()","bio::fasta::report::hit::query#moltype()","bio::kegg::genes#motif()","bio::kegg::enzyme#motifs()","bio::kegg::genes#motifs()","bio::kegg::genes#motifs_as_hash()","bio::kegg::genes#motifs_as_strings()","bio::spidey::report#mrna()","bio::spidey::report::hit#mrna()","bio::transfac::factor#mx()","bio::blat::report::hit#n_s()","bio::nucleicacid::data#na()","bio::sequence#na()","bio::transfac::matrix#na()","bio::fastaformat#nalen()","bio::fastq#nalen()","bio::genbank#nalen()","bio::kegg::genes#nalen()","bio::kegg::genome#nalen()","bio::nbrf#nalen()","bio::aminoacid::data#name()","bio::kegg::compound#name()","bio::kegg::drug#name()","bio::kegg::enzyme#name()","bio::kegg::genes#name()","bio::kegg::genome#name()","bio::kegg::glycan#name()","bio::kegg::keggtab#name()","bio::kegg::module#name()","bio::kegg::orthology#name()","bio::kegg::pathway#name()","bio::kegg::reaction#name()","bio::nucleicacid::data#name()","bio::paml::codeml::model#name()","bio::prosite#name()","bio::targetp::report#name()","bio::aminoacid::data#name2one()","bio::aminoacid::data#name2three()","bio::flatfile::autodetect::rulespecial#name=()","bio::kegg::keggtab#name_by_abbrev()","bio::aminoacid::data#names()","bio::flatfileindex::indexer::namespaces#names()","bio::flatfileindex::namespaces#names()","bio::kegg::compound#names()","bio::kegg::drug#names()","bio::kegg::enzyme#names()","bio::kegg::genes#names()","bio::kegg::kgml::entry#names()","bio::kegg::orthology#names()","bio::nucleicacid::data#names()","bio::sequence::aa#names()","bio::sequence::na#names()","bio::kegg::genes#names_as_array()","bio::flatfileindex#namespaces()","bio::reference#nar()","bio::embl#naseq()","bio::fastaformat#naseq()","bio::fastq#naseq()","bio::gcg::seq#naseq()","bio::genbank#naseq()","bio::kegg::genes#naseq()","bio::nbrf#naseq()","bio::reference#nature()","bio::genbank#natype()","bio::paml::codeml::report#nb_sites()","bio::kegg::genes#networks_as_strings()","bio::aaindex::new()","bio::aaindex1::new()","bio::aaindex2::new()","bio::abif::new()","bio::alignment::new()","bio::alignment::factorytemplate::simple::new()","bio::alignment::multifastaformat::new()","bio::alignment::multifastaformat::new()","bio::alignment::multifastaformat::new()","bio::alignment::originalalignment::new()","bio::alignment::originalalignment#new()","bio::blast::new()","bio::blast::bl2seq::report::iteration::new()","bio::blast::default::report::new()","bio::blast::default::report::hsp::new()","bio::blast::default::report::hit::new()","bio::blast::default::report::iteration::new()","bio::blast::fastacmd::new()","bio::blast::ncbioptions::new()","bio::blast::rpsblast::rpsblastsplitter::new()","bio::blast::rpsblast::rpsblastsplitter::new()","bio::blast::rpsblast::report::new()","bio::blast::rpsblast::report::iteration::new()","bio::blast::remote::genomenet::new()","bio::blast::remote::genomenet::new()","bio::blast::report::new()","bio::blast::report::blastxmlsplitter::new()","bio::blast::report::blastxmlsplitter::new()","bio::blast::report::hit::new()","bio::blast::report::hsp::new()","bio::blast::report::iteration::new()","bio::blast::wu::report::hit::new()","bio::blast::wu::report::iteration::new()","bio::blat::report::new()","bio::blat::report::hit::new()","bio::blat::report::segmentpair::new()","bio::blat::report::seqdesc::new()","bio::clustalw::new()","bio::clustalw::report::new()","bio::clustalw::report::new()","bio::codontable::new()","bio::command::tmpdir::new()","bio::command::tmpdir::remover::new()","bio::contingencytable::new()","bio::das::new()","bio::das::entry_point::new()","bio::das::feature::new()","bio::das::gff::new()","bio::das::group::new()","bio::das::segment::new()","bio::ddbj::new()","bio::embldb::new()","bio::embldb::common::new()","bio::emboss::new()","bio::fantom::maxml::new()","bio::fantom::maxml::annotation::datasrc::new()","bio::fasta::new()","bio::fasta::report::new()","bio::fasta::report::fastaformat10splitter::new()","bio::fasta::report::fastaformat10splitter::new()","bio::fasta::report::hit::new()","bio::fasta::report::hit::query::new()","bio::fasta::report::program::new()","bio::fastadefline::new()","bio::fastaformat::new()","bio::fastq::new()","bio::fastq::error::new()","bio::fastq::formatdata::new()","bio::feature::new()","bio::feature::qualifier::new()","bio::features::new()","bio::features::new()","bio::fetch::new()","bio::fetch::ebi::new()","bio::flatfile::new()","bio::flatfile::autodetect::new()","bio::flatfile::autodetect::ruledebug::new()","bio::flatfile::autodetect::ruleproc::new()","bio::flatfile::autodetect::ruleregexp::new()","bio::flatfile::autodetect::ruleregexp2::new()","bio::flatfile::autodetect::rulespecial::new()","bio::flatfile::autodetect::ruletemplate::new()","bio::flatfile::bufferedinputstream::new()","bio::flatfile::splitter::default::new()","bio::flatfile::splitter::lineoriented::new()","bio::flatfile::splitter::template::new()","bio::flatfileindex::new()","bio::flatfileindex::bdb_1::bdbmappingfile::new()","bio::flatfileindex::bdbwrapper::new()","bio::flatfileindex::databank::new()","bio::flatfileindex::fileid::new()","bio::flatfileindex::fileids::new()","bio::flatfileindex::flat_1::flatmappingfile::new()","bio::flatfileindex::flat_1::record::new()","bio::flatfileindex::indexer::namespace::new()","bio::flatfileindex::indexer::namespaces::new()","bio::flatfileindex::indexer::parser::new()","bio::flatfileindex::indexer::parser::blastdefaultparser::new()","bio::flatfileindex::indexer::parser::emblparser::new()","bio::flatfileindex::indexer::parser::fastaformatparser::new()","bio::flatfileindex::indexer::parser::genbankparser::new()","bio::flatfileindex::indexer::parser::genpeptparser::new()","bio::flatfileindex::indexer::parser::maxmlclusterparser::new()","bio::flatfileindex::indexer::parser::maxmlsequenceparser::new()","bio::flatfileindex::indexer::parser::pdbchemicalcomponentparser::new()","bio::flatfileindex::indexer::parser::sptrparser::new()","bio::flatfileindex::indexer::parser::templateparser::new()","bio::flatfileindex::namespaces::new()","bio::flatfileindex::template::namespace::new()","bio::gcg::msf::new()","bio::gcg::seq::new()","bio::gff::new()","bio::gff::gff2::new()","bio::gff::gff2::metadata::new()","bio::gff::gff2::record::new()","bio::gff::gff2::record::value::new()","bio::gff::gff3::new()","bio::gff::gff3::record::new()","bio::gff::gff3::record::gap::new()","bio::gff::gff3::record::target::new()","bio::gff::gff3::recordboundary::new()","bio::gff::gff3::sequenceregion::new()","bio::gff::record::new()","bio::go::external2go::new()","bio::go::geneassociation::new()","bio::go::ontology::new()","bio::genbank::locus::new()","bio::genpept::locus::new()","bio::genscan::report::new()","bio::genscan::report::exon::new()","bio::genscan::report::gene::new()","bio::hmmer::new()","bio::hmmer::report::new()","bio::hmmer::report::hit::new()","bio::hmmer::report::hsp::new()","bio::hinv::acc2hit::new()","bio::hinv::hit2acc::new()","bio::hinv::hitcnt::new()","bio::hinv::hitdefinition::new()","bio::hinv::hitpubmedid::new()","bio::hinv::hitxml::new()","bio::hinv::hix2hit::new()","bio::hinv::hixcnt::new()","bio::hinv::hixrepresent::new()","bio::hinv::idsearch::new()","bio::hinv::keywordsearch::new()","bio::iprscan::report::new()","bio::iprscan::report::match::new()","bio::kegg::brite::new()","bio::kegg::compound::new()","bio::kegg::drug::new()","bio::kegg::enzyme::new()","bio::kegg::expression::new()","bio::kegg::genes::new()","bio::kegg::genome::new()","bio::kegg::glycan::new()","bio::kegg::kgml::new()","bio::kegg::kgml::substrateproduct::new()","bio::kegg::keggtab::new()","bio::kegg::keggtab::db::new()","bio::kegg::module::new()","bio::kegg::orthology::new()","bio::kegg::pathway::new()","bio::kegg::reaction::new()","bio::litdb::new()","bio::lasergene::new()","bio::location::new()","bio::locations::new()","bio::mafft::new()","bio::mafft::report::new()","bio::medline::new()","bio::map::mapping::new()","bio::map::marker::new()","bio::map::simplemap::new()","bio::meme::mast::new()","bio::meme::mast::report::new()","bio::meme::motif::new()","bio::nbrf::new()","bio::ncbidb::new()","bio::ncbidb::common::new()","bio::newick::new()","bio::nexus::new()","bio::nexus::charactersblock::new()","bio::nexus::datablock::new()","bio::nexus::distancesblock::new()","bio::nexus::genericblock::new()","bio::nexus::nexusmatrix::new()","bio::nexus::taxablock::new()","bio::nexus::treesblock::new()","bio::paml::codeml::model::new()","bio::paml::codeml::positivesite::new()","bio::paml::codeml::positivesites::new()","bio::paml::codeml::rates::new()","bio::paml::codeml::report::new()","bio::paml::codeml::reportsingle::new()","bio::paml::common::new()","bio::paml::common::report::new()","bio::pdb::new()","bio::pdb::chain::new()","bio::pdb::chemicalcomponent::new()","bio::pdb::datatype::pdb_integer::new()","bio::pdb::datatype::pdb_lstring::new()","bio::pdb::datatype::pdb_lstring::new()","bio::pdb::datatype::pdb_list::new()","bio::pdb::datatype::pdb_real::new()","bio::pdb::datatype::pdb_slist::new()","bio::pdb::datatype::pdb_specification_list::new()","bio::pdb::datatype::pdb_string::new()","bio::pdb::datatype::pdb_string::new()","bio::pdb::datatype::pdb_string::new()","bio::pdb::datatype::pdb_string::new()","bio::pdb::datatype::pdb_string::new()","bio::pdb::datatype::pdb_string::new()","bio::pdb::datatype::pdb_string::new()","bio::pdb::datatype::pdb_stringrj::new()","bio::pdb::model::new()","bio::pdb::residue::new()","bio::prosite::new()","bio::psort::cgidriver::new()","bio::psort::psort1::new()","bio::psort::psort1::remote::new()","bio::psort::psort1::report::new()","bio::psort::psort2::new()","bio::psort::psort2::remote::new()","bio::psort::psort2::report::new()","bio::pts1::new()","bio::pts1::report::new()","bio::pathway::new()","bio::phylip::distancematrix::new()","bio::phylip::phylipformat::new()","bio::rebase::new()","bio::refseq::new()","bio::reference::new()","bio::references::new()","bio::references::new()","bio::registry::new()","bio::registry::db::new()","bio::relation::new()","bio::restrictionenzyme::new()","bio::restrictionenzyme::denseintarray::new()","bio::restrictionenzyme::doublestranded::new()","bio::restrictionenzyme::doublestranded::alignedstrands::new()","bio::restrictionenzyme::doublestranded::cutlocationpair::new()","bio::restrictionenzyme::doublestranded::cutlocations::new()","bio::restrictionenzyme::range::horizontalcutrange::new()","bio::restrictionenzyme::range::sequencerange::new()","bio::restrictionenzyme::range::sequencerange::calculatedcuts::new()","bio::restrictionenzyme::range::sequencerange::fragment::new()","bio::restrictionenzyme::range::sequencerange::fragments::new()","bio::restrictionenzyme::range::verticalcutrange::new()","bio::restrictionenzyme::singlestrand::new()","bio::restrictionenzyme::singlestrand::cutlocationsinenzymenotation::new()","bio::restrictionenzyme::sortednumarray::new()","bio::soft::new()","bio::sosui::report::new()","bio::sosui::report::tmh::new()","bio::scf::new()","bio::sequence::new()","bio::sequence::aa::new()","bio::sequence::dblink::new()","bio::sequence::format::formatter::fasta::new()","bio::sequence::format::formatter::fasta_numeric::new()","bio::sequence::format::formatter::fastq::new()","bio::sequence::format::formatter::fastq::new()","bio::sequence::format::formatter::qual::new()","bio::sequence::format::formatterbase::new()","bio::sequence::na::new()","bio::sirna::new()","bio::sirna::pair::new()","bio::sirna::shrna::new()","bio::sim4::new()","bio::sim4::report::new()","bio::sim4::report::hit::new()","bio::sim4::report::segment::new()","bio::sim4::report::segmentpair::new()","bio::sim4::report::seqdesc::new()","bio::spidey::report::new()","bio::spidey::report::hit::new()","bio::spidey::report::segment::new()","bio::spidey::report::segmentpair::new()","bio::spidey::report::seqdesc::new()","bio::swissprot::new()","bio::tmhmm::report::new()","bio::tmhmm::tmh::new()","bio::transfac::new()","bio::transfac::cell::new()","bio::transfac::class::new()","bio::transfac::factor::new()","bio::transfac::gene::new()","bio::transfac::matrix::new()","bio::transfac::site::new()","bio::targetp::report::new()","bio::togows::rest::new()","bio::trembl::new()","bio::tree::new()","bio::tree::edge::new()","bio::tree::node::new()","bio::alignment::new2()","bio::alignment::originalalignment::new2()","bio::mafft::new2()","bio::pdb::record::new_direct()","bio::gff::gff3::record::gap::new_from_sequences_na()","bio::gff::gff3::record::gap::new_from_sequences_na_aa()","bio::flatfileindex::fileid::new_from_string()","bio::command#new_http()","bio::command#new_https()","bio::pdb::record::new_inherit()","bio::spidey::report::segmentpair::new_intron()","bio::pts1::new_with_fungi_function()","bio::pts1::new_with_general_function()","bio::pts1::new_with_metazoa_function()","bio::tree#newick()","bio::flatfile#next_entry()","bio::tree::edge#nhx_parameters()","bio::tree::node#nhx_parameters()","bio::ncbidb::common#nid()","bio::command#no_fork?()","bio::pathway#nodes()","bio::tree#nodes()","bio::alignment::originalalignment#normalize()","bio::alignment::enumerableextension#normalize!()","bio::blast::ncbioptions#normalize!()","bio::sequence::common#normalize!()","bio::blast::wu::report#notes()","bio::blast::wu::report#notice()","bio::prosite#nr()","bio::kegg::genes#ntlen()","bio::embl#ntseq()","bio::kegg::genes#ntseq()","bio::ncbi::rest::efetch::methods#nucleotide()","bio::blast::remote::information#nucleotide_databases()","bio::paml::codeml::report#num_codons()","bio::kegg::genome#num_gene()","bio::blat::report#num_hits()","bio::sim4::report#num_hits()","bio::spidey::report#num_hits()","bio::kegg::genome#num_rna()","bio::paml::codeml::report#num_sequences()","bio::tree#number_of_edges()","bio::spidey::report::hit#number_of_exons()","bio::tree#number_of_nodes()","bio::alignment::arrayextension#number_of_sequences()","bio::alignment::enumerableextension#number_of_sequences()","bio::alignment::hashextension#number_of_sequences()","bio::alignment::originalalignment#number_of_sequences()","bio::spidey::report::hit#number_of_splice_sites()","bio::mafft::nwap()","bio::mafft::nwns()","bio::mafft::nwnsi()","bio::kegg::enzyme#obsolete?()","bio::embldb::common#oc()","bio::transfac#oc()","bio::embldb::common#og()","bio::uniprotkb#oh()","bio::psort::psort1::okazaki()","bio::psort::psort2::okazaki()","bio::aaindex2#old_matrix()","bio::paml::codeml::model#omega()","bio::ncbi::rest::efetch::methods#omim()","bio::aminoacid::data#one()","bio::aminoacid::data#one2name()","bio::aminoacid::data#one2three()","bio::blast::default::report::open()","bio::db::open()","bio::flatfile::open()","bio::flatfileindex::open()","bio::flatfileindex::bdb_1::bdbmappingfile::open()","bio::flatfileindex::bdb_1::bdbmappingfile#open()","bio::flatfileindex::bdbwrapper#open()","bio::flatfileindex::databank::open()","bio::flatfileindex::fileid#open()","bio::flatfileindex::flat_1::flatmappingfile::open()","bio::flatfileindex::flat_1::flatmappingfile#open()","bio::sangerchromatogram::open()","bio::flatfile::open_file()","bio::flatfile::bufferedinputstream::open_file()","bio::flatfileindex::indexer::parser::blastdefaultparser#open_flatfile()","bio::flatfileindex::indexer::parser::fastaformatparser#open_flatfile()","bio::flatfileindex::indexer::parser::pdbchemicalcomponentparser#open_flatfile()","bio::flatfileindex::indexer::parser::templateparser#open_flatfile()","bio::flatfile::open_uri()","bio::flatfile::bufferedinputstream::open_uri()","bio::blast#option()","bio::clustalw#option()","bio::fasta#option()","bio::hmmer#option()","bio::mafft#option()","bio::sim4#option()","bio::blast#option=()","bio::fasta#option=()","bio::hmmer#option=()","bio::blast::ncbioptions#options()","bio::paml::codeml#options()","bio::blast#options=()","bio::paml::codeml#options=()","bio::alignment::originalalignment#order()","bio::transfac#org_class()","bio::transfac#org_species()","bio::kegg::genes#organism()","bio::kegg::genome#organism()","bio::kegg::pathway#organism()","bio::ncbidb::common#organism()","bio::restrictionenzyme::singlestrand#orientation()","bio::restrictionenzyme::singlestrandcomplement#orientation()","bio::ncbidb::common#origin()","bio::pdb::record#original_data()","bio::kegg::genome#original_databases()","bio::kegg::genome#original_db()","bio::kegg::enzyme#orthologs()","bio::kegg::genes#orthologs()","bio::kegg::glycan#orthologs()","bio::kegg::module#orthologs()","bio::kegg::pathway#orthologs()","bio::kegg::reaction#orthologs()","bio::kegg::module#orthologs_as_array()","bio::kegg::common::orthologsashash#orthologs_as_hash()","bio::kegg::enzyme#orthologs_as_hash()","bio::kegg::genes#orthologs_as_hash()","bio::kegg::glycan#orthologs_as_hash()","bio::kegg::module#orthologs_as_hash()","bio::kegg::pathway#orthologs_as_hash()","bio::kegg::reaction#orthologs_as_hash()","bio::kegg::enzyme#orthologs_as_strings()","bio::kegg::genes#orthologs_as_strings()","bio::kegg::glycan#orthologs_as_strings()","bio::kegg::module#orthologs_as_strings()","bio::kegg::pathway#orthologs_as_strings()","bio::kegg::reaction#orthologs_as_strings()","bio::embl#os()","bio::embldb::common#os()","bio::transfac#os()","bio::uniprotkb#os()","bio::flatfileindex::debug::out()","bio::flatfileindex::debug::out=()","bio::tree#out_degree()","bio::tree#out_edges()","bio::alignment::output#output()","bio::iprscan::report#output()","bio::sequence::format#output()","bio::sequence::format::formatter::fasta#output()","bio::sequence::format::formatter::fasta_ncbi#output()","bio::sequence::format::formatter::fasta_numeric#output()","bio::sequence::format::formatter::fastq#output()","bio::sequence::format::formatter::fastq#output()","bio::sequence::format::formatter::raw#output()","bio::sequence::format::formatterbase::output()","bio::sequence::format::formatterbase#output()","bio::tree#output()","bio::alignment::output#output_clustal()","bio::alignment::output#output_fasta()","bio::sequence::format#output_fasta()","bio::alignment::output#output_molphy()","bio::alignment::output#output_msf()","bio::tree#output_newick()","bio::tree#output_nhx()","bio::alignment::output#output_phylip()","bio::tree#output_phylip_distance_matrix()","bio::alignment::output#output_phylipnon()","bio::blast::default::report::hit#overlap()","bio::blast::report::hit#overlap()","bio::fasta::report::hit#overlap()","bio::uniprotkb#ox()","bio::sequence::qualityscore::phred#p2q()","bio::sequence::qualityscore::phred::p2q()","bio::sequence::qualityscore::solexa#p2q()","bio::sequence::qualityscore::solexa::p2q()","bio::prosite#pa()","bio::prosite::pa2re()","bio::prosite#pa2re()","bio::medline#pages()","bio::restrictionenzyme::singlestrand#palindromic?()","bio::blast::wu::report#parameter_matrix()","bio::blast::wu::report#parameters()","bio::tree#parent()","bio::blast::ncbioptions::parse()","bio::gff::gff2#parse()","bio::gff::gff2::metadata::parse()","bio::gff::gff2::record::parse()","bio::gff::gff2::record#parse()","bio::gff::gff3#parse()","bio::gff::gff3::record::parse()","bio::gff::gff3::record#parse()","bio::gff::gff3::record::gap::parse()","bio::gff::gff3::record::target::parse()","bio::gff::gff3::sequenceregion::parse()","bio::sim4::report::segmentpair::parse()","bio::sim4::report::seqdesc::parse()","bio::spidey::report::segmentpair::parse()","bio::spidey::report::seqdesc::parse()","bio::sequence::dblink::parse_embl_dr_line()","bio::rebase#parse_enzymes()","bio::go::ontology::parse_goids()","bio::flatfileindex::indexer::parser::fastaformatparser#parse_primary()","bio::flatfileindex::indexer::parser::templateparser#parse_primary()","bio::iprscan::report::parse_ptxt()","bio::iprscan::report::parse_ptxt_entry()","bio::iprscan::report::parse_raw()","bio::iprscan::report::parse_raw_entry()","bio::rebase#parse_references()","bio::flatfileindex::indexer::parser::templateparser#parse_secondary()","bio::rebase#parse_suppliers()","bio::iprscan::report::parse_txt()","bio::iprscan::report::parse_txt_entry()","bio::sequence::dblink::parse_uniprot_dr_line()","bio::fasta::parser()","bio::go::external2go::parser()","bio::go::geneassociation::parser()","bio::genscan::report::exon::parser()","bio::psort::psort1::report::parser()","bio::psort::psort2::report::parser()","bio::prosite#partial()","bio::command::tmpdir#path()","bio::flatfile#path()","bio::kegg::keggtab#path()","bio::tree#path()","bio::kegg::genes#pathway()","bio::kegg::compound#pathways()","bio::kegg::drug#pathways()","bio::kegg::enzyme#pathways()","bio::kegg::genes#pathways()","bio::kegg::glycan#pathways()","bio::kegg::module#pathways()","bio::kegg::orthology#pathways()","bio::kegg::pathway#pathways()","bio::kegg::reaction#pathways()","bio::kegg::compound#pathways_as_hash()","bio::kegg::common::pathwaysashash#pathways_as_hash()","bio::kegg::drug#pathways_as_hash()","bio::kegg::enzyme#pathways_as_hash()","bio::kegg::genes#pathways_as_hash()","bio::kegg::glycan#pathways_as_hash()","bio::kegg::module#pathways_as_hash()","bio::kegg::orthology#pathways_as_hash()","bio::kegg::pathway#pathways_as_hash()","bio::kegg::reaction#pathways_as_hash()","bio::kegg::compound#pathways_as_strings()","bio::kegg::drug#pathways_as_strings()","bio::kegg::enzyme#pathways_as_strings()","bio::kegg::genes#pathways_as_strings()","bio::kegg::glycan#pathways_as_strings()","bio::kegg::module#pathways_as_strings()","bio::kegg::orthology#pathways_as_strings()","bio::kegg::pathway#pathways_as_strings()","bio::kegg::reaction#pathways_as_strings()","bio::kegg::orthology#pathways_in_keggclass()","bio::blast::default::report#pattern()","bio::blast::default::report::iteration#pattern()","bio::blast::report#pattern()","bio::prosite#pattern()","bio::restrictionenzyme::singlestrand#pattern()","bio::blast::default::report#pattern_positions()","bio::blast::default::report::iteration#pattern_positions()","bio::prosite#pdb_xref()","bio::prosite#pdoc_xref()","bio::psort::psort1::peking()","bio::psort::psort2::peking()","bio::blast::report::hit#percent_identity()","bio::blat::report::hit#percent_identity()","bio::spidey::report::hit#percent_identity()","bio::flatfileindex::bdbdefault::permission()","bio::restrictionenzyme::analysis#permute()","bio::medline#pg()","bio::sequence::qualityscore::phred#phred_p2q()","bio::sequence::qualityscore::phred#phred_q2p()","bio::medline#pii()","bio::kegg::genome#plasmids()","bio::ncbi::rest::efetch::methods#pmc()","bio::pubmed#pmfetch()","bio::pubmed::pmfetch()","bio::medline#pmid()","bio::flatfile#pos()","bio::flatfile::bufferedinputstream#pos()","bio::flatfile#pos=()","bio::flatfile::bufferedinputstream#pos=()","bio::kegg::genes#position()","bio::map::actslikemarker#positions_on()","bio::prosite#positive()","bio::prosite#positive_hits()","bio::prosite#positive_sequences()","bio::command#post()","bio::command#post_form()","bio::flatfile::bufferedinputstream#prefetch_buffer()","bio::flatfile::bufferedinputstream#prefetch_gets()","bio::flatfile::bufferedinputstream#prefetch_readpartial()","bio::flatfileindex::databank#primary()","bio::restrictionenzyme::doublestranded::cutlocations#primary()","bio::restrictionenzyme::fragments#primary()","bio::flatfileindex::databank#primary=()","bio::flatfileindex#primary_namespace()","bio::restrictionenzyme::doublestranded::cutlocationsinenzymenotation#primary_to_array_index()","bio::flatfileindex::debug::print()","bio::lasergene#process()","bio::soft#process()","bio::gff::gff3::record::gap#process_sequences_na()","bio::gff::gff3::record::gap#process_sequences_na_aa()","bio::kegg::drug#products()","bio::kegg::enzyme#products()","bio::prosite#profile()","bio::blast::default::report#program()","bio::ncbi::rest::efetch::methods#protein()","bio::blat::report::hit#protein?()","bio::blast::remote::information#protein_databases()","bio::uniprotkb#protein_name()","bio::medline#pt()","bio::medline#publication_type()","bio::ncbi::rest::efetch::methods#pubmed()","bio::reference#pubmed_url()","bio::alignment::originalalignment#purge()","bio::restrictionenzyme::denseintarray#push()","bio::restrictionenzyme::sortednumarray#push()","bio::flatfileindex::flat_1::flatmappingfile#put_record()","bio::sequence::qualityscore::phred#q2p()","bio::sequence::qualityscore::phred::q2p()","bio::sequence::qualityscore::solexa#q2p()","bio::sequence::qualityscore::solexa::q2p()","bio::sim4::report::segmentpair#qseq()","bio::spidey::report::segmentpair#qseq()","bio::fastq#qualities()","bio::fastq#quality_score_type()","bio::sequence::qualityscore::phred#quality_score_type()","bio::sequence::qualityscore::solexa#quality_score_type()","bio::fastq#quality_scores()","bio::alignment::factorytemplate::simple#query()","bio::blast#query()","bio::blat::report::hit#query()","bio::clustalw#query()","bio::fantom::query()","bio::fasta#query()","bio::fastaformat#query()","bio::fetch::ebi::query()","bio::hmmer#query()","bio::hinv::common#query()","bio::hinv::idsearch#query()","bio::hinv::keywordsearch#query()","bio::mafft#query()","bio::paml::codeml#query()","bio::paml::common#query()","bio::paml::yn00#query()","bio::pubmed#query()","bio::pubmed::query()","bio::registry#query()","bio::sim4#query()","bio::alignment::factorytemplate::simple#query_align()","bio::clustalw#query_align()","bio::mafft#query_align()","bio::alignment::factorytemplate::simple#query_alignment()","bio::clustalw#query_alignment()","bio::mafft#query_alignment()","bio::alignment::factorytemplate::simple#query_by_filename()","bio::clustalw#query_by_filename()","bio::mafft#query_by_filename()","bio::paml::codeml#query_by_string()","bio::paml::common#query_by_string()","bio::paml::yn00#query_by_string()","bio::command#query_command()","bio::command#query_command_fork()","bio::command#query_command_open3()","bio::command#query_command_popen()","bio::blast::default::report#query_def()","bio::blast::rpsblast::report#query_def()","bio::blat::report#query_def()","bio::blat::report::hit#query_def()","bio::fasta::report::hit#query_def()","bio::sim4::report#query_def()","bio::sim4::report::hit#query_def()","bio::spidey::report#query_def()","bio::spidey::report::hit#query_def()","bio::blast::default::report::hit#query_end()","bio::blast::report::hit#query_end()","bio::fasta::report::hit#query_end()","bio::hmmer::report::hsp#query_from()","bio::sim4::report::segmentpair#query_from()","bio::spidey::report::segmentpair#query_from()","bio::blat::report#query_id()","bio::blat::report::hit#query_id()","bio::fasta::report::hit#query_id()","bio::iprscan::report::match#query_id()","bio::sim4::report#query_id()","bio::sim4::report::hit#query_id()","bio::spidey::report#query_id()","bio::spidey::report::hit#query_id()","bio::blast::default::report#query_len()","bio::blast::rpsblast::report#query_len()","bio::blat::report#query_len()","bio::blat::report::hit#query_len()","bio::fasta::report::hit#query_len()","bio::sim4::report#query_len()","bio::sim4::report::hit#query_len()","bio::spidey::report#query_len()","bio::spidey::report::hit#query_len()","bio::targetp::report#query_len()","bio::sim4#query_pairwise()","bio::blast::wu::report#query_record_number()","bio::blast::default::report::hit#query_seq()","bio::blast::report::hit#query_seq()","bio::fasta::report::hit#query_seq()","bio::hmmer::report::hsp#query_seq()","bio::blast::default::report::hit#query_start()","bio::blast::report::hit#query_start()","bio::fasta::report::hit#query_start()","bio::spidey::report::segmentpair#query_strand()","bio::alignment::factorytemplate::simple#query_string()","bio::clustalw#query_string()","bio::mafft#query_string()","bio::hmmer::report::hsp#query_to()","bio::sim4::report::segmentpair#query_to()","bio::spidey::report::segmentpair#query_to()","bio::fasta::report::hit#query_type()","bio::transfac#ra()","bio::pdb::utils::rad2deg()","bio::sequence::aa::randomize()","bio::sequence::common#randomize()","bio::sequence::na::randomize()","bio::genscan::report::exon#range()","bio::location#range()","bio::locations#range()","bio::flatfile#raw=()","bio::rebase#raw_to_reference()","bio::targetp::report#rc()","bio::reference#rd()","bio::prosite#re()","bio::transfac::site#re()","bio::restrictionenzyme::cutsymbol#re_cut_symbol()","bio::restrictionenzyme::cutsymbol#re_cut_symbol_adjacent()","bio::kegg::enzyme#reaction()","bio::kegg::compound#reactions()","bio::kegg::glycan#reactions()","bio::kegg::module#reactions()","bio::kegg::pathway#reactions()","bio::kegg::module#reactions_as_hash()","bio::kegg::pathway#reactions_as_hash()","bio::kegg::module#reactions_as_strings()","bio::kegg::pathway#reactions_as_strings()","bio::flatfileindex::databank::read()","bio::flatfileindex::fileid#read()","bio::rebase::read()","bio::sequence::read()","bio::command#read_uri()","bio::alignment::readfiles()","bio::alignment::originalalignment::readfiles()","bio::restrictionenzyme::rebase()","bio::flatfileindex::fileid#recalc()","bio::flatfileindex::fileids#recalc()","bio::flatfileindex::fileids#recalc_all()","bio::pdb#record()","bio::pdb::chemicalcomponent#record()","bio::pdb::record#record_name()","bio::flatfileindex::flat_1::flatmappingfile#record_size()","bio::pdb::record#record_type()","bio::flatfileindex::bdb_1::bdbmappingfile#records()","bio::flatfileindex::flat_1::flatmappingfile#records()","bio::embldb::common#ref()","bio::uniprotkb#ref()","bio::transfac#ref_authors()","bio::transfac#ref_data()","bio::transfac#ref_no()","bio::transfac#ref_title()","bio::blast::default::report#reference()","bio::litdb#reference()","bio::medline#reference()","bio::blast::default::report#references()","bio::embldb::common#references()","bio::kegg::common::references#references()","bio::kegg::genome#references()","bio::kegg::glycan#references()","bio::kegg::orthology#references()","bio::kegg::pathway#references()","bio::ncbidb::common#references()","bio::uniprotkb#references()","bio::das::segment::region()","bio::kegg::expression#regulated()","bio::alignment::originalalignment#rehash()","bio::flatfile::autodetect#rehash()","bio::pdb::chain#rehash()","bio::pdb::model#rehash()","bio::pdb::chain#rehash_heterogens()","bio::pdb::chain#rehash_residues()","bio::kegg::pathway#rel_pathways()","bio::kegg::pathway#rel_pathways_as_hash()","bio::kegg::pathway#rel_pathways_as_strings()","bio::relation#relation()","bio::locations#relative()","bio::prosite#release()","bio::embl#release_created()","bio::embl#release_modified()","bio::kegg::compound#remark()","bio::kegg::drug#remark()","bio::kegg::glycan#remark()","bio::pdb#remark()","bio::blast::remote()","bio::fasta::remote()","bio::psort::psort2::remote()","bio::pdb::model#removesolvent()","bio::alignment::originalalignment#remove_all_gaps()","bio::alignment::enumerableextension#remove_all_gaps!()","bio::tree#remove_edge()","bio::tree#remove_edge_if()","bio::command#remove_entry_secure()","bio::alignment::sitemethods#remove_gaps!()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#remove_incomplete_cuts()","bio::tree#remove_node()","bio::tree#remove_node_if()","bio::tree#remove_nonsense_nodes()","bio::alignment::originalalignment#remove_seq()","bio::hinv::hixrepresent#rep_accession_no()","bio::hinv::hixrepresent#rep_h_invitational_id()","bio::blat::report::hit#rep_match()","bio::newick#reparse()","bio::location#replace()","bio::gff::gff2::record#replace_attributes()","bio::alignment::originalalignment#replace_slice()","bio::sirna::pair#report()","bio::sirna::shrna#report()","bio::blast::reports()","bio::hmmer::reports()","bio::tmhmm::reports()","bio::blast::reports_xml()","bio::fantom::maxml::cluster#representative_annotations()","bio::fantom::maxml::cluster#representative_clone()","bio::fantom::maxml::cluster#representative_cloneid()","bio::fantom::maxml::cluster#representative_seqid()","bio::fantom::maxml::cluster#representative_sequence()","bio::pdb::residue#resseq=()","bio::alignment::factorytemplate::fileinfileoutwithtree#reset()","bio::alignment::factorytemplate::simple#reset()","bio::blast::remote::information#reset()","bio::clustalw#reset()","bio::mafft#reset()","bio::ncbi::reset_entrez_default_parameters()","bio::pdb::residuefinder#residues()","bio::hinv::acc2hit#result()","bio::hinv::hit2acc#result()","bio::hinv::hitcnt#result()","bio::hinv::hitdefinition#result()","bio::hinv::hitpubmedid#result()","bio::hinv::hitxml#result()","bio::hinv::hix2hit#result()","bio::hinv::hixcnt#result()","bio::hinv::hixrepresent#result()","bio::hinv::keywordsearch#result()","bio::togows::rest#retrieve()","bio::togows::rest::retrieve()","bio::sequence::na#reverse_complement()","bio::sequence::na#reverse_complement!()","bio::restrictionenzyme::denseintarray#reverse_each()","bio::restrictionenzyme::sortednumarray#reverse_each()","bio::codontable#revtrans()","bio::blast::rpsblast::rpsblastsplitter#rewind()","bio::blast::rpsblast::rpsblastsplitter#rewind()","bio::blast::report::blastxmlsplitter#rewind()","bio::blast::report::blastxmlsplitter#rewind()","bio::flatfile#rewind()","bio::flatfile::bufferedinputstream#rewind()","bio::flatfile::splitter::lineoriented#rewind()","bio::flatfile::splitter::template#rewind()","bio::blast::report::rexml()","bio::sirna#reynolds()","bio::sirna#reynolds?()","bio::restrictionenzyme::stringformatting#right_padding()","bio::transfac#rl()","bio::transfac#rn()","bio::sequence::na#rna()","bio::sequence::na#rna!()","bio::sequence::na#rna?()","bio::contingencytable#row_sum()","bio::contingencytable#row_sum_all()","bio::aaindex2#rows()","bio::kegg::compound#rpairs()","bio::kegg::reaction#rpairs()","bio::kegg::reaction#rpairs_as_hash()","bio::kegg::reaction#rpairs_as_strings()","bio::kegg::reaction#rpairs_as_tokens()","bio::alignment::originalalignment#rstrip()","bio::alignment::enumerableextension#rstrip!()","bio::transfac#rt()","bio::prosite#ru()","bio::prosite#rule()","bio::emboss::run()","bio::meme::mast#run()","bio::paml::common#run()","bio::transfac::site#s1()","bio::command#safe_command_line_array()","bio::rebase#save_yaml()","bio::transfac::factor#sc()","bio::blast::report#sc_match()","bio::blast::report#sc_mismatch()","bio::reference#science()","bio::blast::default::report::hit#score()","bio::blast::wu::report::hit#score()","bio::blat::report::hit#score()","bio::fastq::formatdata#scores2str()","bio::transfac::class#sd()","bio::transfac::gene#sd()","bio::flatfileindex#search()","bio::flatfileindex::bdb_1::bdbmappingfile#search()","bio::flatfileindex::bdb_1::primarynamespace#search()","bio::flatfileindex::bdb_1::secondarynamespace#search()","bio::flatfileindex::flat_1::flatmappingfile#search()","bio::flatfileindex::flat_1::secondarynamespace#search()","bio::flatfileindex::namespaces#search()","bio::flatfileindex::template::namespace#search()","bio::ncbi::rest::esearch::methods#search()","bio::pubmed#search()","bio::pubmed::search()","bio::togows::rest#search()","bio::togows::rest::search()","bio::flatfileindex::databank#search_all()","bio::flatfileindex::databank#search_all_get_unique_id()","bio::togows::rest#search_database_list()","bio::togows::rest::search_database_list()","bio::flatfileindex::namespaces#search_names()","bio::flatfileindex#search_namespaces()","bio::flatfileindex::databank#search_namespaces()","bio::flatfileindex::databank#search_namespaces_get_unique_id()","bio::flatfileindex#search_primary()","bio::flatfileindex::databank#search_primary()","bio::flatfileindex::databank#search_primary_get_unique_id()","bio::flatfileindex::databank#secondary()","bio::flatfileindex::databank#secondary=()","bio::flatfileindex#secondary_namespaces()","bio::flatfileindex::fileid#seek()","bio::flatfileindex::flat_1::flatmappingfile#seek()","bio::ncbidb::common#segment()","bio::sim4::report::hit#segmentpairs()","bio::spidey::report::hit#segmentpairs()","bio::alignment::originalalignment#select()","bio::embl#seq()","bio::fastaformat#seq()","bio::fastq#seq()","bio::gcg::seq#seq()","bio::genbank#seq()","bio::genpept#seq()","bio::lasergene#seq()","bio::nbrf#seq()","bio::sangerchromatogram#seq()","bio::sequence::common#seq()","bio::uniprotkb#seq()","bio::sequence::common#seq!()","bio::sim4::report::segmentpair::seq1_intron()","bio::sim4::report::segmentpair::seq2_intron()","bio::nbrf#seq_class()","bio::gcg::msf#seq_data()","bio::genbank#seq_len()","bio::genpept#seq_len()","bio::alignment::enumerableextension#seq_length()","bio::alignment::enumerableextension#seqclass()","bio::alignment::propertymethods#seqclass()","bio::embl#seqlen()","bio::pdb#seqres()","bio::emboss::seqret()","bio::fantom::maxml::cluster#sequence()","bio::ncbi::rest::efetch::methods#sequence()","bio::embl#sequence_length()","bio::uniprotkb#sequence_length()","bio::alignment::enumerableextension#sequence_names()","bio::alignment::hashextension#sequence_names()","bio::sangerchromatogram#sequence_string()","bio::fantom::maxml::cluster#sequences()","bio::blast#server=()","bio::blast::ncbioptions#set()","bio::uniprotkb#set_rn()","bio::genscan::report::gene#set_aaseq()","bio::hmmer::report::hsp#set_alignment()","bio::alignment::propertymethods#set_all_property()","bio::gff::gff2::record#set_attribute()","bio::restrictionenzyme::cutsymbol#set_cut_symbol()","bio::nexus::charactersblock#set_datatype()","bio::go::external2go#set_date()","bio::paml::common#set_default_parameters()","bio::go::external2go#set_desc()","bio::psort::psort2::report#set_features()","bio::nexus::charactersblock#set_gap_character()","bio::psort::psort2::report#set_header_line()","bio::psort::psort2::report::set_knn_prob()","bio::nexus::charactersblock#set_match_character()","bio::nexus::charactersblock#set_matrix()","bio::nexus::distancesblock#set_matrix()","bio::nexus::charactersblock#set_missing()","bio::genscan::report::gene#set_naseq()","bio::nexus::charactersblock#set_number_of_characters()","bio::nexus::distancesblock#set_number_of_characters()","bio::nexus::charactersblock#set_number_of_taxa()","bio::nexus::distancesblock#set_number_of_taxa()","bio::nexus::taxablock#set_number_of_taxa()","bio::genscan::report::gene#set_polya()","bio::psort::psort2::report#set_prediction()","bio::flatfileindex::indexer::parser::templateparser#set_primary_namespace()","bio::genscan::report::gene#set_promoter()","bio::nexus::distancesblock#set_triangle()","bio::nexus::nexusmatrix#set_value()","bio::rebase#setup_enzyme_and_reference_association()","bio::rebase#setup_enzyme_data()","bio::restrictionenzyme::range::sequencerange#setup_new_bin()","bio::transfac::factor#sf()","bio::transfac::site#sf()","bio::kegg::kgml::entry#shape()","bio::kegg::kgml::entry#shape=()","bio::pdb#sheet()","bio::alignment::originalalignment#shift()","bio::paml::codeml::report#significant()","bio::prosite#site()","bio::paml::codeml::report#sites()","bio::alignment::originalalignment#size()","bio::flatfileindex::bdb_1::bdbmappingfile#size()","bio::flatfileindex::flat_1::flatmappingfile#size()","bio::flatfileindex::results#size()","bio::hinv::keywordsearch#size()","bio::locations#size()","bio::restrictionenzyme::denseintarray#size()","bio::restrictionenzyme::sortednumarray#size()","bio::prosite#skip_flag()","bio::blast::rpsblast::rpsblastsplitter#skip_leader()","bio::blast::rpsblast::rpsblastsplitter#skip_leader()","bio::blast::report::blastxmlsplitter#skip_leader()","bio::blast::report::blastxmlsplitter#skip_leader()","bio::fasta::report::fastaformat10splitter#skip_leader()","bio::fasta::report::fastaformat10splitter#skip_leader()","bio::flatfile::splitter::default#skip_leader()","bio::flatfile::splitter::lineoriented#skip_leader()","bio::flatfile::splitter::template#skip_leader()","bio::flatfile::bufferedinputstream#skip_spaces()","bio::alignment::enumerableextension#slice()","bio::pathway#small_world()","bio::medline#so()","bio::transfac::site#so()","bio::sequence::qualityscore::solexa#solexa_p2q()","bio::sequence::qualityscore::solexa#solexa_q2p()","bio::restrictionenzyme::denseintarray#sort!()","bio::restrictionenzyme::sortednumarray#sort!()","bio::gff::gff2::record#sort_attributes_by_tag!()","bio::medline#source()","bio::ncbidb::common#source()","bio::prosite#sp_xref()","bio::locations#span()","bio::embl#species()","bio::sequence::common#splice()","bio::sequence::common#splicing()","bio::soft#split_label_value_in()","bio::embl#sq()","bio::transfac::factor#sq()","bio::transfac::site#sq()","bio::uniprotkb#sq()","bio::pdb#ssbond()","bio::transfac::site#st()","bio::lasergene#standard_comment?()","bio::fasta::report::hit::query#start()","bio::hinv::keywordsearch#start()","bio::codontable#start_codon?()","bio::command#start_http()","bio::command#start_http_uri()","bio::blast::report#statistics()","bio::kegg::genome#statistics()","bio::prosite#statistics()","bio::iprscan::report::match#status()","bio::restrictionenzyme::doublestranded#sticky?()","bio::fasta::report::hit::query#stop()","bio::codontable#stop_codon?()","bio::alignment::originalalignment#store()","bio::fastq::formatdata#str2scores()","bio::blat::report::hit#strand()","bio::genbank#strand()","bio::spidey::report::hit#strand()","bio::genbank#strandedness()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#strands_for_display()","bio::alignment::originalalignment#strip()","bio::alignment::enumerableextension#strip!()","bio::restrictionenzyme::fragments#strip_and_sort()","bio::restrictionenzyme::stringformatting#strip_cuts_and_padding()","bio::restrictionenzyme::stringformatting#strip_padding()","bio::kegg::genes#structure()","bio::kegg::enzyme#structures()","bio::kegg::genes#structures()","bio::pathway#subgraph()","bio::alignment::enumerableextension#subseq()","bio::sequence::common#subseq()","bio::kegg::enzyme#substrates()","bio::tree#subtree()","bio::tree#subtree_with_all_paths()","bio::embl#sv()","bio::fasta::report::hit#sw()","bio::prosite#swissprot_release_number()","bio::prosite#swissprot_release_sequences()","bio::transfac::factor#sy()","bio::gcg::msf#symbol_comparison_table()","bio::pdb::record::symbols()","bio::uniprotkb#synonyms()","bio::kegg::enzyme#sysname()","bio::transfac::factor#sz()","bio::medline#ta()","bio::blast::report::tab()","bio::contingencytable#table_sum_all()","bio::db#tags()","bio::blat::report::hit#target()","bio::kegg::expression#target_avg()","bio::blast::default::report::hit#target_def()","bio::blat::report::hit#target_def()","bio::fasta::report::hit#target_def()","bio::hmmer::report::hit#target_def()","bio::sim4::report::hit#target_def()","bio::spidey::report::hit#target_def()","bio::blast::default::report::hit#target_end()","bio::blast::report::hit#target_end()","bio::fasta::report::hit#target_end()","bio::hmmer::report::hsp#target_from()","bio::blast::default::report::hit#target_id()","bio::blat::report::hit#target_id()","bio::fasta::report::hit#target_id()","bio::sim4::report::hit#target_id()","bio::spidey::report::hit#target_id()","bio::blast::default::report::hit#target_len()","bio::blat::report::hit#target_len()","bio::fasta::report::hit#target_len()","bio::sim4::report::hit#target_len()","bio::spidey::report::hit#target_len()","bio::kegg::expression#target_sd()","bio::blast::default::report::hit#target_seq()","bio::blast::report::hit#target_seq()","bio::fasta::report::hit#target_seq()","bio::hmmer::report::hsp#target_seq()","bio::blast::default::report::hit#target_start()","bio::blast::report::hit#target_start()","bio::fasta::report::hit#target_start()","bio::hmmer::report::hsp#target_to()","bio::fasta::report::hit#target_type()","bio::kegg::expression#target_var()","bio::kegg::keggtab#taxa_list()","bio::kegg::genome#taxid()","bio::kegg::keggtab#taxo2keggorgs()","bio::kegg::keggtab#taxo2korgs()","bio::kegg::keggtab#taxon2keggorgs()","bio::kegg::keggtab#taxon2korgs()","bio::prosite#taxon_range()","bio::kegg::genome#taxonomy()","bio::kegg::keggtab#taxonomy()","bio::ncbi::rest::efetch::methods#taxonomy()","bio::ncbidb::common#taxonomy()","bio::genscan::report::exon#termination_score()","bio::aminoacid::data#three()","bio::aminoacid::data#three2name()","bio::aminoacid::data#three2one()","bio::fasta::report#threshold()","bio::medline#ti()","bio::aaindex#title()","bio::litdb#title()","bio::medline#title()","bio::relation#to()","bio::aminoacid::data#to_1()","bio::aminoacid::data#to_3()","bio::clustalw::report#to_a()","bio::clustalw::report#to_a()","bio::fantom::maxml::annotations#to_a()","bio::fantom::maxml::sequences#to_a()","bio::flatfile::to_a()","bio::flatfileindex::results#to_a()","bio::gff::gff2::record::value#to_a()","bio::mafft::report#to_a()","bio::paml::codeml::positivesite#to_a()","bio::pdb::record::atom#to_a()","bio::restrictionenzyme::sortednumarray#to_a()","bio::restrictionenzyme::doublestranded::cutlocationsinenzymenotation#to_array_index()","bio::restrictionenzyme::singlestrand::cutlocationsinenzymenotation#to_array_index()","bio::pdb::coordinate#to_ary()","bio::embl#to_biosequence()","bio::fastaformat#to_biosequence()","bio::fastanumericformat#to_biosequence()","bio::fastq#to_biosequence()","bio::genbank#to_biosequence()","bio::sangerchromatogram#to_biosequence()","bio::alignment::output#to_clustal()","bio::alignment::originalalignment#to_fasta()","bio::clustalw::report#to_fasta()","bio::clustalw::report#to_fasta()","bio::mafft::report#to_fasta()","bio::sequence::common#to_fasta()","bio::alignment::originalalignment#to_fasta_array()","bio::alignment::originalalignment#to_fastaformat_array()","bio::gcg::seq::to_gcg()","bio::alignment::originalalignment#to_hash()","bio::feature#to_hash()","bio::iprscan::report#to_hash()","bio::flatfile#to_io()","bio::flatfile::bufferedinputstream#to_io()","bio::pathway#to_list()","bio::pathway#to_matrix()","bio::nbrf::to_nbrf()","bio::nexus::charactersblock#to_nexus()","bio::nexus::datablock#to_nexus()","bio::nexus::distancesblock#to_nexus()","bio::nexus::genericblock#to_nexus()","bio::nexus::taxablock#to_nexus()","bio::nexus::treesblock#to_nexus()","bio::nexus::util::to_nexus_helper()","bio::nexus::nexusmatrix#to_nexus_row_array()","bio::aminoacid::data#to_re()","bio::nucleicacid::data#to_re()","bio::sequence::aa#to_re()","bio::sequence::na#to_re()","bio::pathway#to_relations()","bio::blast::default::report#to_s()","bio::fantom::maxml#to_s()","bio::fastadefline#to_s()","bio::fastaformat#to_s()","bio::fastq#to_s()","bio::flatfileindex::databank#to_s()","bio::flatfileindex::fileid#to_s()","bio::flatfileindex::flat_1::record#to_s()","bio::flatfileindex::namespaces#to_s()","bio::flatfileindex::results#to_s()","bio::gff::gff2#to_s()","bio::gff::gff2::metadata#to_s()","bio::gff::gff2::record#to_s()","bio::gff::gff2::record::value#to_s()","bio::gff::gff3#to_s()","bio::gff::gff3::record#to_s()","bio::gff::gff3::record::gap#to_s()","bio::gff::gff3::record::gap::code#to_s()","bio::gff::gff3::record::target#to_s()","bio::gff::gff3::recordboundary#to_s()","bio::gff::gff3::sequenceregion#to_s()","bio::locations#to_s()","bio::nbrf#to_s()","bio::nexus#to_s()","bio::nexus::genericblock#to_s()","bio::nexus::nexusmatrix#to_s()","bio::paml::codeml::model#to_s()","bio::paml::codeml::positivesites#to_s()","bio::pdb#to_s()","bio::pdb::chain#to_s()","bio::pdb::model#to_s()","bio::pdb::record::atom#to_s()","bio::pdb::residue#to_s()","bio::sequence#to_s()","bio::sequence::common#to_s()","bio::tmhmm::report#to_s()","bio::tmhmm::tmh#to_s()","bio::tree::edge#to_s()","bio::tree::node#to_s()","bio::fastaformat#to_seq()","bio::fastanumericformat#to_seq()","bio::sangerchromatogram#to_seq()","bio::go::external2go#to_str()","bio::go::geneassociation#to_str()","bio::nexus#to_str()","bio::nexus::genericblock#to_str()","bio::nexus::nexusmatrix#to_str()","bio::sequence#to_str()","bio::sequence::common#to_str()","bio::flatfileindex::flat_1::record::to_string()","bio::pdb::utils::to_xyz()","bio::psort::psort2::report::too_short_parser()","bio::embl#topology()","bio::prosite#total()","bio::sequence::common#total()","bio::tree#total_distance()","bio::prosite#total_hits()","bio::prosite#total_sequences()","bio::transfac::gene#tr()","bio::sequence::na#translate()","bio::newick#tree()","bio::paml::codeml::model#tree()","bio::paml::codeml::model#tree_length()","bio::reference#trends()","bio::flatfile::autodetect#tsort_each_child()","bio::flatfile::autodetect#tsort_each_node()","bio::pdb#turn()","bio::transfac::site#ty()","bio::medline#ui()","bio::sirna#uitei()","bio::sirna#uitei?()","bio::pathway#undirected()","bio::pathway#undirected?()","bio::alignment::gap::ungapped_pos()","bio::flatfile::bufferedinputstream#ungetc()","bio::flatfile::bufferedinputstream#ungets()","bio::restrictionenzyme::denseintarray#uniq!()","bio::restrictionenzyme::sortednumarray#uniq!()","bio::prosite#unknown()","bio::prosite#unknown_hits()","bio::prosite#unknown_sequences()","bio::alignment::originalalignment#unshift()","bio::restrictionenzyme::denseintarray#unshift()","bio::restrictionenzyme::sortednumarray#unshift()","bio::kegg::expression#up_regulated()","bio::flatfileindex::update_index()","bio::flatfileindex::indexer::update_index()","bio::psort::psort2::report::v_parser()","bio::kegg::expression#val2rgb()","bio::restrictionenzyme::doublestranded::cutlocationpair#validate_1()","bio::restrictionenzyme::doublestranded::cutlocationpair#validate_2()","bio::restrictionenzyme::doublestranded::cutlocationpairinenzymenotation#validate_2()","bio::restrictionenzyme::doublestranded::cutlocations#validate_args()","bio::restrictionenzyme::doublestranded::cutlocationsinenzymenotation#validate_args()","bio::restrictionenzyme::singlestrand#validate_args()","bio::gcg::msf#validate_checksum()","bio::gcg::seq#validate_checksum()","bio::restrictionenzyme::singlestrand::cutlocationsinenzymenotation#validate_cut_locations()","bio::fastq#validate_format()","bio::restrictionenzyme::doublestranded::alignedstrands::validate_input()","bio::alignment::originalalignment#values()","bio::gff::gff2::record::value#values()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#vc_complement()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#vc_complement_as_original_class()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#vc_primary()","bio::restrictionenzyme::range::sequencerange::calculatedcuts#vc_primary_as_original_class()","bio::ncbidb::common#vernacular_name()","bio::blast::default::report#version()","bio::embl#version()","bio::ncbidb::common#version()","bio::pdb#version()","bio::blast::default::report#version_date()","bio::blast::default::report#version_number()","bio::ncbidb::common#versions()","bio::restrictionenzyme::range::cutranges#vertical_min_max_helper()","bio::medline#vi()","bio::litdb#volume()","bio::medline#volume()","bio::paml::codeml::positivesite#w()","bio::blast::wu::report#warnings()","bio::blast::wu::report::iteration#warnings()","bio::aminoacid::data#weight()","bio::nucleicacid::data#weight()","bio::kegg::kgml::entry#width()","bio::kegg::kgml::entry#width=()","bio::alignment::enumerableextension#window()","bio::sequence::common#window_search()","bio::command#windows_platform?()","bio::restrictionenzyme::singlestrand#with_cut_symbols()","bio::restrictionenzyme::singlestrand#with_spaces()","bio::fastadefline#words()","bio::flatfileindex::databank#write()","bio::flatfileindex::flat_1::flatmappingfile#write_record()","bio::flatfileindex::bdbwrapper#writeback_array()","bio::kegg::kgml::entry#x()","bio::pdb::coordinate#x()","bio::kegg::kgml::entry#x=()","bio::pdb::coordinate#x=()","bio::pdb::coordinate#xyz()","bio::pdb::record::atom#xyz()","bio::kegg::kgml::entry#y()","bio::pdb::coordinate#y()","bio::kegg::kgml::entry#y=()","bio::pdb::coordinate#y=()","bio::medline#year()","bio::pdb::coordinate#z()","bio::pdb::coordinate#z=()","","","","","","","","","",""],"info":[["Bio","","Bio.html","","<p>bio.rb - Loading all BioRuby modules\n<p>Copyright &mdash; Copyright (C) 2001-2007 Toshiaki Katayama &lt;k@bioruby.org&gt; …\n"],["Bio::AAindex","","Bio/AAindex.html","","<p>Description\n<p>Bio::AAindex is the super class of Bio::AAindex1 and Bio::AAindex2, parser\nclasses for AAindex …\n"],["Bio::AAindex1","","Bio/AAindex1.html","","<p>Description\n<p>Parser class for AAindex1, Amino Acid Index Database.\n<p>AAindex Help: www.genome.jp/aaindex/aaindex_help.html …\n"],["Bio::AAindex2","","Bio/AAindex2.html","","<p>Description\n<p>Parser class for AAindex2, Amino Acid Index Database.\n<p>AAindex Help: www.genome.jp/aaindex/aaindex_help.html …\n"],["Bio::Abif","","Bio/Abif.html","","<p>Description\n<p>This class inherits from the SangerChromatogram superclass. It captures the\ninformation contained …\n"],["Bio::Abif::DirectoryEntry","","Bio/Abif/DirectoryEntry.html","",""],["Bio::Alignment","","Bio/Alignment.html","","<p>About Bio::Alignment\n<p>Bio::Alignment is a namespace of classes/modules for multiple sequence\nalignment. …\n"],["Bio::Alignment::ArrayExtension","","Bio/Alignment/ArrayExtension.html","","<p>Bio::Alignment::ArrayExtension is a set of useful methods for multiple\nsequence alignment. It is designed …\n"],["Bio::Alignment::EnumerableExtension","","Bio/Alignment/EnumerableExtension.html","","<p>The module Bio::Alignment::EnumerableExtension is a set of useful methods\nfor multiple sequence alignment. …\n"],["Bio::Alignment::FactoryTemplate","","Bio/Alignment/FactoryTemplate.html","","<p>Namespace for templates for alignment application factory\n"],["Bio::Alignment::FactoryTemplate::FileInFileOut","","Bio/Alignment/FactoryTemplate/FileInFileOut.html","","<p>Template class for alignment application factory. The program needs: input:\nfile (cannot accept stdin), …\n"],["Bio::Alignment::FactoryTemplate::FileInFileOutWithTree","","Bio/Alignment/FactoryTemplate/FileInFileOutWithTree.html","","<p>Template class for alignment application factory. The program needs: input:\nfile (cannot accept stdin), …\n"],["Bio::Alignment::FactoryTemplate::FileInStdoutOut","","Bio/Alignment/FactoryTemplate/FileInStdoutOut.html","","<p>Template class for alignment application factory. The program needs: input:\nfile (cannot accept stdin), …\n"],["Bio::Alignment::FactoryTemplate::Simple","","Bio/Alignment/FactoryTemplate/Simple.html","","<p>Template class for alignment application factory. The program acts: input:\nstdin or file, format = fasta …\n"],["Bio::Alignment::FactoryTemplate::StdinInFileOut","","Bio/Alignment/FactoryTemplate/StdinInFileOut.html","","<p>Template class for alignment application factory. The program needs: input:\nstdin or file, format = fasta …\n"],["Bio::Alignment::FactoryTemplate::WrapInputStdin","","Bio/Alignment/FactoryTemplate/WrapInputStdin.html","","<p>mix-in module\n"],["Bio::Alignment::FactoryTemplate::WrapInputTempfile","","Bio/Alignment/FactoryTemplate/WrapInputTempfile.html","","<p>mix-in module\n"],["Bio::Alignment::FactoryTemplate::WrapOutputStdout","","Bio/Alignment/FactoryTemplate/WrapOutputStdout.html","","<p>mix-in module\n"],["Bio::Alignment::FactoryTemplate::WrapOutputTempfile","","Bio/Alignment/FactoryTemplate/WrapOutputTempfile.html","","<p>mix-in module\n"],["Bio::Alignment::GAP","","Bio/Alignment/GAP.html","","<p>Bio::Alignment::GAP is a set of class methods for gap-related position\ntranslation.\n"],["Bio::Alignment::HashExtension","","Bio/Alignment/HashExtension.html","","<p>Bio::Alignment::HashExtension is a set of useful methods for multiple\nsequence alignment. It is designed …\n"],["Bio::Alignment::MultiFastaFormat","","Bio/Alignment/MultiFastaFormat.html","","<p>Data class for fasta-formatted multiple sequence alignment data, which is\nsimply multiple entiries of …\n"],["Bio::Alignment::OriginalAlignment","","Bio/Alignment/OriginalAlignment.html","","<p>Bio::Alignment::OriginalAlignment is the BioRuby original multiple sequence\nalignment container class. …\n"],["Bio::Alignment::OriginalPrivate","","Bio/Alignment/OriginalPrivate.html","","<p>Bio::Alignment::OriginalPrivate is a set of private methods for\nBio::Alignment::OriginalAlignment.\n"],["Bio::Alignment::Output","","Bio/Alignment/Output.html","",""],["Bio::Alignment::PropertyMethods","","Bio/Alignment/PropertyMethods.html","","<p>Bio::Alignment::PropertyMethods is a set of methods to treat the gap\ncharacter and so on.\n"],["Bio::Alignment::SequenceArray","","Bio/Alignment/SequenceArray.html","","<p>Bio::Alignment::SequenceArray is a container class of multiple sequence\nalignment. Since it inherits …\n"],["Bio::Alignment::SequenceHash","","Bio/Alignment/SequenceHash.html","","<p>Bio::Alignment::SequenceHash is a container class of multiple sequence\nalignment. Since it inherits  …\n"],["Bio::Alignment::Site","","Bio/Alignment/Site.html","","<p>Bio::Alignment::Site stores bases or amino-acids in a  site of the\nalignment. It would store multiple …\n"],["Bio::Alignment::SiteMethods","","Bio/Alignment/SiteMethods.html","","<p>Bio::Alignment::SiteMethods is a set of methods for Bio::Alignment::Site.\nIt can also be used for extending …\n"],["Bio::AminoAcid","","Bio/AminoAcid.html","",""],["Bio::AminoAcid::Data","","Bio/AminoAcid/Data.html","",""],["Bio::Blast","","Bio/Blast.html","","<p>Description\n<p>The Bio::Blast class contains methods for running local or remote BLAST\nsearches, as well …\n"],["Bio::Blast::Bl2seq","","Bio/Blast/Bl2seq.html","",""],["Bio::Blast::Bl2seq::Report","","Bio/Blast/Bl2seq/Report.html","","<p>Bio::Blast::Bl2seq::Report is a NCBI bl2seq (BLAST 2 sequences) output\nparser. It inherits Bio::Blast::Default::Report …\n"],["Bio::Blast::Bl2seq::Report::HSP","","Bio/Blast/Bl2seq/Report/HSP.html","","<p>Bio::Blast::Bl2seq::Report::HSP holds information about the hsp\n(high-scoring segment pair). NOTE that …\n"],["Bio::Blast::Bl2seq::Report::Hit","","Bio/Blast/Bl2seq/Report/Hit.html","","<p>Bio::Blast::Bl2seq::Report::Hit contains information about a hit. It may\ncontain some Bio::Blast::Default::Report::HSP …\n"],["Bio::Blast::Bl2seq::Report::Iteration","","Bio/Blast/Bl2seq/Report/Iteration.html","","<p>Bio::Blast::Bl2seq::Report::Iteration stores information about a iteration.\nNormally, it may contain …\n"],["Bio::Blast::Default","","Bio/Blast/Default.html","",""],["Bio::Blast::Default::Report","","Bio/Blast/Default/Report.html","","<p>Bio::Blast::Default::Report parses NCBI BLAST default output and stores\ninformation in the data. It may …\n"],["Bio::Blast::Default::Report::HSP","","Bio/Blast/Default/Report/HSP.html","","<p>Bio::Blast::Default::Report::HSP holds information about the hsp\n(high-scoring segment pair).\n"],["Bio::Blast::Default::Report::Hit","","Bio/Blast/Default/Report/Hit.html","","<p>Bio::Blast::Default::Report::Hit contains information about a hit. It may\ncontain some Bio::Blast::Default::Report::HSP …\n"],["Bio::Blast::Default::Report::Iteration","","Bio/Blast/Default/Report/Iteration.html","","<p>Bio::Blast::Default::Report::Iteration stores information about a\niteration. It may contain some Bio::Blast::Default::Report::Hit …\n"],["Bio::Blast::Default::Report_TBlast","","Bio/Blast/Default/Report_TBlast.html","","<p>NCBI BLAST default (-m 0 option) output parser for TBLAST. All methods are\nequal to Bio::Blast::Default::Report …\n"],["Bio::Blast::Fastacmd","","Bio/Blast/Fastacmd.html","","<p>DESCRIPTION\n<p>Retrieves FASTA formatted sequences from a blast database using  NCBI\nfastacmd command.\n<p>This …\n"],["Bio::Blast::NCBIOptions","","Bio/Blast/NCBIOptions.html","","<p>A class to parse and store NCBI-tools style command-line options. It is\ninternally used in Bio::Blast …\n"],["Bio::Blast::RPSBlast","","Bio/Blast/RPSBlast.html","","<p>NCBI RPS Blast (Reversed Position Specific Blast) namespace. Currently,\nthis module is existing only …\n"],["Bio::Blast::RPSBlast::RPSBlastSplitter","","Bio/Blast/RPSBlast/RPSBlastSplitter.html","","<p>Flatfile splitter for RPS-BLAST reports. It is internally used when reading\nRPS-BLAST report. Normally …\n"],["Bio::Blast::RPSBlast::Report","","Bio/Blast/RPSBlast/Report.html","","<p>NCBI RPS Blast (Reversed Position Specific Blast) default output parser.\n<p>It supports defalut (-m 0 option) …\n"],["Bio::Blast::RPSBlast::Report::FLATFILE_SPLITTER","","Bio/Blast/RPSBlast/RPSBlastSplitter.html","","<p>Flatfile splitter for RPS-BLAST reports. It is internally used when reading\nRPS-BLAST report. Normally …\n"],["Bio::Blast::RPSBlast::Report::Iteration","","Bio/Blast/RPSBlast/Report/Iteration.html","","<p>Iteration class for RPS-Blast. Though RPS-Blast does not iterate like\nPSI-BLAST,  it aims to store a …\n"],["Bio::Blast::Remote","","Bio/Blast/Remote.html","","<p>Bio::Blast::Remote is a namespace for Remote Blast factory.\n"],["Bio::Blast::Remote::GenomeNet","","Bio/Blast/Remote/GenomeNet.html","","<p>Description\n<p>The Bio::Blast::Remote::GenomeNet class contains methods for running remote\nBLAST searches …\n"],["Bio::Blast::Remote::GenomeNet::Information","","Bio/Blast/Remote/GenomeNet/Information.html","","<p>Information for GenomeNet BLAST search.\n"],["Bio::Blast::Remote::Genomenet","","Bio/Blast/Remote/GenomeNet.html","","<p>Description\n<p>The Bio::Blast::Remote::GenomeNet class contains methods for running remote\nBLAST searches …\n"],["Bio::Blast::Remote::Information","","Bio/Blast/Remote/Information.html","","<p>Common methods for meta-information processing (e.g. list of databases).\n"],["Bio::Blast::Report","","Bio/Blast/Report.html","","<p>Bio::Blast::Report\n<p>Parsed results of the blast execution for Tab-delimited and XML output\nformat.  Tab-delimited …\n"],["Bio::Blast::Report::BlastXmlSplitter","","Bio/Blast/Report/BlastXmlSplitter.html","","<p>Flatfile splitter for NCBI BLAST XML format. It is internally used when\nreading BLAST XML. Normally, …\n"],["Bio::Blast::Report::FLATFILE_SPLITTER","","Bio/Blast/Report/BlastXmlSplitter.html","","<p>Flatfile splitter for NCBI BLAST XML format. It is internally used when\nreading BLAST XML. Normally, …\n"],["Bio::Blast::Report::Hit","","Bio/Blast/Report/Hit.html","","<p>Bio::Blast::Report::Hit\n"],["Bio::Blast::Report::Hsp","","Bio/Blast/Report/Hsp.html","","<p>Bio::Blast::Report::Hsp\n"],["Bio::Blast::Report::Iteration","","Bio/Blast/Report/Iteration.html","","<p>Bio::Blast::Report::Iteration\n"],["Bio::Blast::Report_tab","","Bio/Blast/Report_tab.html","","<p>NCBI BLAST tabular (-m 8) output parser. All methods are equal to\nBio::Blast::Report. Only DELIMITER …\n"],["Bio::Blast::WU","","Bio/Blast/WU.html","",""],["Bio::Blast::WU::Report","","Bio/Blast/WU/Report.html","","<p>Bio::Blast::WU::Report parses WU-BLAST default output and stores\ninformation in the data. It may contain …\n"],["Bio::Blast::WU::Report::HSP","","Bio/Blast/WU/Report/HSP.html","","<p>Bio::Blast::WU::Report::HSP holds information about the hsp (high-scoring\nsegment pair).\n<p>Because it inherits …\n"],["Bio::Blast::WU::Report::Hit","","Bio/Blast/WU/Report/Hit.html","","<p>Bio::Blast::WU::Report::Hit contains information about a hit. It may\ncontain some Bio::Blast::WU::Report::HSP …\n"],["Bio::Blast::WU::Report::Iteration","","Bio/Blast/WU/Report/Iteration.html","","<p>Iteration class for WU-BLAST report. Though WU-BLAST does not iterate like\nPSI-BLAST, Bio::Blast::WU::Report::Iteration …\n"],["Bio::Blast::WU::Report_TBlast","","Bio/Blast/WU/Report_TBlast.html","","<p>WU-BLAST default output parser for TBLAST. All methods are equal to\nBio::Blast::WU::Report. Only DELIMITER …\n"],["Bio::Blat","","Bio/Blat.html","",""],["Bio::Blat::Report","","Bio/Blat/Report.html","","<p>Bio::Blat::Report is a BLAT report parser class. Its object may contain\nsome Bio::Blat::Report::Hits …\n"],["Bio::Blat::Report::Hit","","Bio/Blat/Report/Hit.html","","<p>Hit class for the BLAT result parser. Similar to Bio::Blast::Report::Hit\nbut lacks many methods. Its …\n"],["Bio::Blat::Report::SegmentPair","","Bio/Blat/Report/SegmentPair.html","","<p>Sequence segment pair of BLAT result. Similar to Bio::Blast::Report::Hsp\nbut lacks many methods.\n"],["Bio::Blat::Report::SeqDesc","","Bio/Blat/Report/SeqDesc.html","","<p>Bio::Blat::Report::SeqDesc stores sequence information of query or subject\nof the BLAT report. It also …\n"],["Bio::ClustalW","","Bio/ClustalW.html","","<p>Bio::ClustalW is a CLUSTAL W execution wrapper class. Its object is also\ncalled an alignment factory. …\n"],["Bio::ClustalW::Report","","Bio/ClustalW/Report.html","","<p>CLUSTAL W result data (*.aln file) parser class.\n"],["Bio::CodonTable","","Bio/CodonTable.html","",""],["Bio::ColorScheme","","Bio/ColorScheme.html","","<p>bio/util/color_scheme.rb - Popular color codings for nucleic and amino\nacids\n<p>Author &mdash; Trevor Wennblom  &lt; …\n"],["Bio::Command","","Bio/Command.html","","<p>Bio::Command\n<p>Bio::Command is a collection of useful methods for execution of external\ncommands or web …\n"],["Bio::Command::Tmpdir","","Bio/Command/Tmpdir.html","","<p>Bio::Command::Tmpdir is a wrapper class to handle temporary directory like\nTempfile class. A temporary …\n"],["Bio::Command::Tmpdir::Remover","","Bio/Command/Tmpdir/Remover.html","","<p>Internal use only. Users should not use this class directly.\n<p>Bio::Command::Tmpdir::Remover is a class …\n"],["Bio::ContingencyTable","","Bio/ContingencyTable.html","","<p>bio/util/contingency_table.rb - Statistical contingency table analysis for\naligned sequences\n<p>Author &mdash; Trevor …\n"],["Bio::DAS","","Bio/DAS.html","",""],["Bio::DAS::DNA","","Bio/DAS/DNA.html","",""],["Bio::DAS::DSN","","Bio/DAS/DSN.html","",""],["Bio::DAS::ENTRY_POINT","","Bio/DAS/ENTRY_POINT.html","",""],["Bio::DAS::FEATURE","","Bio/DAS/FEATURE.html","",""],["Bio::DAS::GFF","","Bio/DAS/GFF.html","",""],["Bio::DAS::GROUP","","Bio/DAS/GROUP.html","",""],["Bio::DAS::LINK","","Bio/DAS/LINK.html","",""],["Bio::DAS::SEGMENT","","Bio/DAS/SEGMENT.html","",""],["Bio::DAS::SEQUENCE","","Bio/DAS/SEQUENCE.html","",""],["Bio::DAS::TARGET","","Bio/DAS/TARGET.html","",""],["Bio::DAS::TYPE","","Bio/DAS/TYPE.html","",""],["Bio::DAS::TYPES","","Bio/DAS/TYPES.html","",""],["Bio::DB","","Bio/DB.html","",""],["Bio::DDBJ","","Bio/DDBJ.html","","<p>Bio::DDBJ is deprecated. Use Bio::GenBank.\n"],["Bio::EMBL","","Bio/EMBL.html","",""],["Bio::EMBLDB","","Bio/EMBLDB.html","","<p>Stores an EMBL style (EMBL, TrEMBL, Swiss-Prot etc.) entry.\n"],["Bio::EMBLDB::Common","","Bio/EMBLDB/Common.html","",""],["Bio::EMBOSS","","Bio/EMBOSS.html","","<p>Pre-requisites\n<p>You must have the EMBOSS suite installed locally. You can download from the\nproject website …\n"],["Bio::FANTOM","","Bio/FANTOM.html","",""],["Bio::FANTOM::MaXML","","Bio/FANTOM/MaXML.html","",""],["Bio::FANTOM::MaXML::Annotation","","Bio/FANTOM/MaXML/Annotation.html","",""],["Bio::FANTOM::MaXML::Annotation::DataSrc","","Bio/FANTOM/MaXML/Annotation/DataSrc.html","",""],["Bio::FANTOM::MaXML::Annotations","","Bio/FANTOM/MaXML/Annotations.html","",""],["Bio::FANTOM::MaXML::Cluster","","Bio/FANTOM/MaXML/Cluster.html","",""],["Bio::FANTOM::MaXML::Sequence","","Bio/FANTOM/MaXML/Sequence.html","",""],["Bio::FANTOM::MaXML::Sequences","","Bio/FANTOM/MaXML/Sequences.html","",""],["Bio::Fasta","","Bio/Fasta.html","",""],["Bio::Fasta::Report","","Bio/Fasta/Report.html","","<p>Summarized results of the fasta execution results.\n"],["Bio::Fasta::Report::FLATFILE_SPLITTER","","Bio/Fasta/Report/FastaFormat10Splitter.html","","<p>Splitter for Bio::FlatFile\n"],["Bio::Fasta::Report::FastaFormat10Splitter","","Bio/Fasta/Report/FastaFormat10Splitter.html","","<p>Splitter for Bio::FlatFile\n"],["Bio::Fasta::Report::Hit","","Bio/Fasta/Report/Hit.html","",""],["Bio::Fasta::Report::Hit::Query","","Bio/Fasta/Report/Hit/Query.html","",""],["Bio::Fasta::Report::Hit::Target","","Bio/Fasta/Report/Hit/Target.html","","<p>Same as Bio::Fasta::Report::Hit::Query but for Target.\n"],["Bio::Fasta::Report::Program","","Bio/Fasta/Report/Program.html","","<p>Log of the fasta execution environments.\n"],["Bio::FastaDefline","","Bio/FastaDefline.html","","<p>Parsing FASTA Defline, and extract IDs and other informations. IDs are\nNSIDs (NCBI standard FASTA sequence …\n"],["Bio::FastaFormat","","Bio/FastaFormat.html","","<p>Treats a FASTA formatted entry, such as:\n\n<pre>&gt;id and/or some comments                    &lt;== definition line ...</pre>\n"],["Bio::FastaNumericFormat","","Bio/FastaNumericFormat.html","","<p>Treats a FASTA formatted numerical entry, such as:\n\n<pre>&gt;id and/or some comments                    &lt;== comment ...</pre>\n"],["Bio::Fastq","","Bio/Fastq.html","","<p>Bio::Fastq is a parser for FASTQ format.\n"],["Bio::Fastq::Error","","Bio/Fastq/Error.html","","<p>Basic exception class of all Bio::Fastq::Error:XXXX. Bio::Fastq internal\nuse only.\n"],["Bio::Fastq::Error::Diff_ids","","Bio/Fastq/Error/Diff_ids.html","","<p>Error::Diff_ids   – the identifier in the two lines are different\n"],["Bio::Fastq::Error::Long_qual","","Bio/Fastq/Error/Long_qual.html","","<p>Error::Long_qual  – length of quality is longer than the sequence\n"],["Bio::Fastq::Error::No_atmark","","Bio/Fastq/Error/No_atmark.html","","<p>Error::No_atmark  – the first identifier does not begin with “@”\n"],["Bio::Fastq::Error::No_ids","","Bio/Fastq/Error/No_ids.html","","<p>Error::No_ids     – sequence identifier not found\n"],["Bio::Fastq::Error::No_qual","","Bio/Fastq/Error/No_qual.html","","<p>Error::No_qual    – no quality characters found\n"],["Bio::Fastq::Error::No_seq","","Bio/Fastq/Error/No_seq.html","","<p>Error::No_seq     – no sequence found\n"],["Bio::Fastq::Error::Qual_char","","Bio/Fastq/Error/Qual_char.html","","<p>Error::Qual_char  – invalid character in the quality\n"],["Bio::Fastq::Error::Qual_range","","Bio/Fastq/Error/Qual_range.html","","<p>Error::Qual_range – quality score value out of range\n"],["Bio::Fastq::Error::Seq_char","","Bio/Fastq/Error/Seq_char.html","","<p>Error::Seq_char   – invalid character in the sequence\n"],["Bio::Fastq::Error::Short_qual","","Bio/Fastq/Error/Short_qual.html","","<p>Error::Short_qual – length of quality is shorter than the sequence\n"],["Bio::Fastq::Error::Skipped_unformatted_lines","","Bio/Fastq/Error/Skipped_unformatted_lines.html","","<p>Error::Skipped_unformatted_lines – the parser skipped unformatted lines\nthat could not be recognized …\n"],["Bio::Fastq::FormatData","","Bio/Fastq/FormatData.html","","<p>Bio::Fastq::FormatData is a data class to store Fastq format parameters and\nquality calculation methods. …\n"],["Bio::Fastq::FormatData::FASTQ_ILLUMINA","","Bio/Fastq/FormatData/FASTQ_ILLUMINA.html","","<p>Format information for “fastq-illumina” Bio::Fastq internal use only.\n"],["Bio::Fastq::FormatData::FASTQ_SANGER","","Bio/Fastq/FormatData/FASTQ_SANGER.html","","<p>Format information for “fastq-sanger”. Bio::Fastq internal use only.\n"],["Bio::Fastq::FormatData::FASTQ_SOLEXA","","Bio/Fastq/FormatData/FASTQ_SOLEXA.html","","<p>Format information for “fastq-solexa” Bio::Fastq internal use only.\n"],["Bio::Feature","","Bio/Feature.html","","<p>DESCRIPTION\n<p>Container for the sequence annotation.\n<p>USAGE\n"],["Bio::Feature::Qualifier","","Bio/Feature/Qualifier.html","","<p>Container for qualifier-value pairs for sequence features.\n"],["Bio::Features","","Bio/Features.html","","<p>DESCRIPTION\n<p>This class is OBSOLETED, and will soon be removed. Instead of this class,\nan array is to be …\n"],["Bio::Fetch","","Bio/Fetch.html","","<p>DESCRIPTION\n<p>The Bio::Fetch class provides an interface to dbfetch servers. Given a\ndatabase name and an …\n"],["Bio::Fetch::EBI","","Bio/Fetch/EBI.html","","<p>Bio::Fetch::EBI is a client of EBI Dbfetch\n(www.ebi.ac.uk/Tools/dbfetch/dbfetch).\n<p>An instance of this …\n"],["Bio::FlatFile","","Bio/FlatFile.html","","<p>Bio::FlatFile is a helper and wrapper class to read a biological data file.\nIt acts like a IO object. …\n"],["Bio::FlatFile::AutoDetect","","Bio/FlatFile/AutoDetect.html","","<p>AutoDetect automatically determines database class of given data.\n"],["Bio::FlatFile::AutoDetect::RuleDebug","","Bio/FlatFile/AutoDetect/RuleDebug.html","","<p>RuleDebug is a class for debugging autodetect classes/methods\n"],["Bio::FlatFile::AutoDetect::RuleProc","","Bio/FlatFile/AutoDetect/RuleProc.html","","<p>A autodetection rule that passes data to the proc object.\n"],["Bio::FlatFile::AutoDetect::RuleRegexp","","Bio/FlatFile/AutoDetect/RuleRegexp.html","","<p>A autodetection rule to use a regular expression\n"],["Bio::FlatFile::AutoDetect::RuleRegexp2","","Bio/FlatFile/AutoDetect/RuleRegexp2.html","","<p>A autodetection rule to use more than two regular expressions. If given\nstring matches one of the regular …\n"],["Bio::FlatFile::AutoDetect::RuleSpecial","","Bio/FlatFile/AutoDetect/RuleSpecial.html","","<p>Special element that is always top or bottom priority.\n"],["Bio::FlatFile::AutoDetect::RuleTemplate","","Bio/FlatFile/AutoDetect/RuleTemplate.html","","<p>Template of a single rule of autodetection\n"],["Bio::FlatFile::AutoDetect::RulesArray","","Bio/FlatFile/AutoDetect/RulesArray.html","","<p>Array to store autodetection rules. This is defined only for inspect.\n"],["Bio::FlatFile::BufferedInputStream","","Bio/FlatFile/BufferedInputStream.html","","<p>Wrapper for a IO (or IO-like) object. It can input with a buffer.\n"],["Bio::FlatFile::Splitter","","Bio/FlatFile/Splitter.html","","<p>The Bio::FlatFile::Splitter is a namespace for flatfile splitters. Each\nsplitter is a class to get entries …\n"],["Bio::FlatFile::Splitter::Default","","Bio/FlatFile/Splitter/Default.html","","<p>Default splitter. It sees following constants in the given class.\n<p>DELIMITER &mdash; (String) delimiter indicates …\n"],["Bio::FlatFile::Splitter::LineOriented","","Bio/FlatFile/Splitter/LineOriented.html","","<p>A splitter for line oriented text data.\n<p>The given class&#39;s object must have following methods.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Klass</span><span class=\"ruby-comment\">#add_header_line(line) ...</span>\n</pre>\n"],["Bio::FlatFile::Splitter::Template","","Bio/FlatFile/Splitter/Template.html","","<p>This is a template of splitter.\n"],["Bio::FlatFile::UnknownDataFormatError","","Bio/FlatFile/UnknownDataFormatError.html","","<p>Exception class to be raised when data format hasn&#39;t been specified.\n"],["Bio::FlatFileIndex","","Bio/FlatFileIndex.html","","<p>Bio::FlatFileIndex is a class for OBDA flatfile index.\n"],["Bio::FlatFileIndex::BDB_1","","Bio/FlatFileIndex/BDB_1.html","",""],["Bio::FlatFileIndex::BDB_1::BDBMappingFile","","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html","",""],["Bio::FlatFileIndex::BDB_1::PrimaryNameSpace","","Bio/FlatFileIndex/BDB_1/PrimaryNameSpace.html","",""],["Bio::FlatFileIndex::BDB_1::SecondaryNameSpace","","Bio/FlatFileIndex/BDB_1/SecondaryNameSpace.html","",""],["Bio::FlatFileIndex::BDBdefault","","Bio/FlatFileIndex/BDBdefault.html","",""],["Bio::FlatFileIndex::BDBwrapper","","Bio/FlatFileIndex/BDBwrapper.html","",""],["Bio::FlatFileIndex::DEBUG","","Bio/FlatFileIndex/DEBUG.html","","<p>Module for output debug messages. Default setting: If $DEBUG or $VERBOSE is\ntrue, output debug messages …\n"],["Bio::FlatFileIndex::DataBank","","Bio/FlatFileIndex/DataBank.html","","<p>databank\n<p>Internal use only.\n"],["Bio::FlatFileIndex::FileID","","Bio/FlatFileIndex/FileID.html","","<p>FileID class.\n<p>Internal use only.\n"],["Bio::FlatFileIndex::FileIDs","","Bio/FlatFileIndex/FileIDs.html","","<p>FileIDs class.\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Flat_1","","Bio/FlatFileIndex/Flat_1.html","","<p>module for flat/1 databank\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Flat_1::FlatMappingFile","","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html","","<p>FlatMappingFile class.\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Flat_1::PrimaryNameSpace","","Bio/FlatFileIndex/Flat_1/PrimaryNameSpace.html","","<p>primary name space\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Flat_1::Record","","Bio/FlatFileIndex/Flat_1/Record.html","","<p>Record class.\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Flat_1::SecondaryNameSpace","","Bio/FlatFileIndex/Flat_1/SecondaryNameSpace.html","","<p>secondary name space\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Indexer","","Bio/FlatFileIndex/Indexer.html","",""],["Bio::FlatFileIndex::Indexer::NameSpace","","Bio/FlatFileIndex/Indexer/NameSpace.html","",""],["Bio::FlatFileIndex::Indexer::NameSpaces","","Bio/FlatFileIndex/Indexer/NameSpaces.html","",""],["Bio::FlatFileIndex::Indexer::Parser","","Bio/FlatFileIndex/Indexer/Parser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::BlastDefaultParser","","Bio/FlatFileIndex/Indexer/Parser/BlastDefaultParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::EMBLParser","","Bio/FlatFileIndex/Indexer/Parser/EMBLParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::FastaFormatParser","","Bio/FlatFileIndex/Indexer/Parser/FastaFormatParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::GenBankParser","","Bio/FlatFileIndex/Indexer/Parser/GenBankParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::GenPeptParser","","Bio/FlatFileIndex/Indexer/Parser/GenPeptParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::MaXMLClusterParser","","Bio/FlatFileIndex/Indexer/Parser/MaXMLClusterParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::MaXMLSequenceParser","","Bio/FlatFileIndex/Indexer/Parser/MaXMLSequenceParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::PDBChemicalComponentParser","","Bio/FlatFileIndex/Indexer/Parser/PDBChemicalComponentParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::SPTRParser","","Bio/FlatFileIndex/Indexer/Parser/SPTRParser.html","",""],["Bio::FlatFileIndex::Indexer::Parser::TemplateParser","","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html","",""],["Bio::FlatFileIndex::NameSpaces","","Bio/FlatFileIndex/NameSpaces.html","","<p>namespaces\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Results","","Bio/FlatFileIndex/Results.html","","<p><code>Results</code> stores search results created by\n<code>Bio::FlatFileIndex</code> methods.\n<p>Currently, this class inherits Hash …\n"],["Bio::FlatFileIndex::Template","","Bio/FlatFileIndex/Template.html","","<p>Templates\n<p>Internal use only.\n"],["Bio::FlatFileIndex::Template::NameSpace","","Bio/FlatFileIndex/Template/NameSpace.html","","<p>templates of namespace\n<p>Internal use only.\n"],["Bio::GCG","","Bio/GCG.html","",""],["Bio::GCG::Msf","","Bio/GCG/Msf.html","","<p>The msf is a multiple sequence alignment format developed by Wisconsin.\nBio::GCG::Msf is a msf format …\n"],["Bio::GCG::Seq","","Bio/GCG/Seq.html","","<p>Bio::GCG::Seq\n<p>This is GCG sequence file format (.seq or .pep) parser class.\n<p>References\n"],["Bio::GFF","","Bio/GFF.html","","<p>DESCRIPTION\n<p>The Bio::GFF and Bio::GFF::Record classes describe data contained in a \nGFF-formatted file. …\n"],["Bio::GFF::GFF2","","Bio/GFF/GFF2.html","","<p>DESCRIPTION\n<p>Represents version 2 of GFF specification. Its behavior is somehow\ndifferent from Bio::GFF …\n"],["Bio::GFF::GFF2::Escape","","Bio/GFF/GFF2/Escape.html","","<p>Private methods for GFF2 escaping characters. Internal only. Users should\nnot use this module directly. …\n"],["Bio::GFF::GFF2::MetaData","","Bio/GFF/GFF2/MetaData.html","","<p>Stores GFF2 meta-data.\n"],["Bio::GFF::GFF2::Record","","Bio/GFF/GFF2/Record.html","","<p>Stores GFF2 record.\n"],["Bio::GFF::GFF2::Record::Value","","Bio/GFF/GFF2/Record/Value.html","","<p>Stores GFF2 attribute&#39;s value.\n"],["Bio::GFF::GFF3","","Bio/GFF/GFF3.html","","<p>DESCRIPTION\n<p>Represents version 3 of GFF specification. For more information on version\nGFF3, see song.sourceforge.net/gff3.shtml …\n"],["Bio::GFF::GFF3::Escape","","Bio/GFF/GFF3/Escape.html","","<p>Private methods for escaping characters. Internal only. Users should not\nuse this module directly.\n"],["Bio::GFF::GFF3::Record","","Bio/GFF/GFF3/Record.html","","<p>Represents a single line of a GFF3-formatted file. See Bio::GFF::GFF3 for\nmore information.\n"],["Bio::GFF::GFF3::Record::Gap","","Bio/GFF/GFF3/Record/Gap.html","","<p>Bio:GFF::GFF3::Record::Gap is a class to store data of “Gap” attribute.\n"],["Bio::GFF::GFF3::Record::Gap::Code","","Bio/GFF/GFF3/Record/Gap/Code.html","","<p>Code is a class to store length of single-letter code.\n"],["Bio::GFF::GFF3::Record::Target","","Bio/GFF/GFF3/Record/Target.html","","<p>Bio:GFF::GFF3::Record::Target is a class to store data of “Target”\nattribute.\n"],["Bio::GFF::GFF3::RecordBoundary","","Bio/GFF/GFF3/RecordBoundary.html","","<p>This is a dummy record corresponding to the “###” metadata.\n"],["Bio::GFF::GFF3::SequenceRegion","","Bio/GFF/GFF3/SequenceRegion.html","","<p>Stores meta-data “##sequence-region seqid start end”.\n"],["Bio::GFF::Record","","Bio/GFF/Record.html","","<p>Represents a single line of a GFF-formatted file. See Bio::GFF for more\ninformation.\n"],["Bio::GO","","Bio/GO.html","","<p>Bio::GO\n<p>Classes for Gene Ontology www.geneontology.org\n"],["Bio::GO::External2go","","Bio/GO/External2go.html","","<p>Container class for files in geneontology.org/go/external2go/*2go.\n<p>The line syntax is:\n<p>database:&lt;identifier&gt; …\n"],["Bio::GO::GeneAssociation","","Bio/GO/GeneAssociation.html","","<p>Bio::GO::GeneAssociation\n<p>$CVSROOT/go/gene-associations/gene_association.*\n<p>Data parser for the gene_association …\n"],["Bio::GO::Ontology","","Bio/GO/Ontology.html","","<p>Bio::GO::Ontology\n<p>Container class for ontologies in the DAG Edit format.\n<p>Example\n"],["Bio::GenBank","","Bio/GenBank.html","","<p>Description\n<p>Parses a GenBank formatted database entry\n<p>Example\n"],["Bio::GenBank::Locus","","Bio/GenBank/Locus.html","","<p>Parses the LOCUS line and returns contents of the LOCUS record as a\nBio::GenBank::Locus object.  Locus …\n"],["Bio::GenPept","","Bio/GenPept.html","",""],["Bio::GenPept::Locus","","Bio/GenPept/Locus.html","","<p>LOCUS\n"],["Bio::Genscan","","Bio/Genscan.html","","<p>Bio::Genscan\n"],["Bio::Genscan::Report","","Bio/Genscan/Report.html","","<p>Bio::Genscan::Report - Class for Genscan report output.\n<p>Parser for the Genscan report output.\n<p>Genscan  …\n"],["Bio::Genscan::Report::Exon","","Bio/Genscan/Report/Exon.html","","<p>Container class of a predicted gene structure.\n"],["Bio::Genscan::Report::Gene","","Bio/Genscan/Report/Gene.html","","<p>Container class of predicted gene structures.\n"],["Bio::HMMER","","Bio/HMMER.html","","<p>Description\n<p>A wapper for HMMER programs (hmmsearch or hmmpfam).\n<p>Examples\n"],["Bio::HMMER::Report","","Bio/HMMER/Report.html","","<p>A parser class for a search report by hmmsearch or hmmpfam program in the \nHMMER package.\n<p>Examples\n\n<pre>Examples ...</pre>\n"],["Bio::HMMER::Report::Hit","","Bio/HMMER/Report/Hit.html","","<p>Container class for HMMER search hits.\n"],["Bio::HMMER::Report::Hsp","","Bio/HMMER/Report/Hsp.html","","<p>Container class for HMMER search hsps.\n"],["Bio::Hinv","","Bio/Hinv.html","","<p>Bio::Hinv\n<p>Accessing the H-invDB web services.\n<p>www.h-invitational.jp/\n"],["Bio::Hinv::Acc2hit","","Bio/Hinv/Acc2hit.html","","<p>serv = Bio::Hinv::Acc2hit.new serv.query(“acc” =&gt; “BC053657”) puts\nserv.result …\n"],["Bio::Hinv::Common","","Bio/Hinv/Common.html","",""],["Bio::Hinv::Hit2acc","","Bio/Hinv/Hit2acc.html","","<p>serv = Bio::Hinv::Hit2acc.new serv.query(“hit” =&gt; “HIT000022181”) puts\nserv.result …\n"],["Bio::Hinv::HitCnt","","Bio/Hinv/HitCnt.html","","<p>serv = Bio::Hinv::HitCnt.new serv.query puts serv.result\n"],["Bio::Hinv::HitDefinition","","Bio/Hinv/HitDefinition.html","","<p>serv = Bio::Hinv::HitDefinition.new serv.query(“hit” =&gt; “HIT000000001”)\nputs  …\n"],["Bio::Hinv::HitPubmedId","","Bio/Hinv/HitPubmedId.html","","<p>serv = Bio::Hinv::HitPubmedId.new serv.query(“hit” =&gt; “HIT000053961”)\nputs serv.result …\n"],["Bio::Hinv::HitXML","","Bio/Hinv/HitXML.html","","<p>serv = Bio::Hinv::HitXML.new serv.query(“hit” =&gt; “HIT000000001”) puts\nserv.result …\n"],["Bio::Hinv::Hix2hit","","Bio/Hinv/Hix2hit.html","","<p>serv = Bio::Hinv::Hix2hit.new serv.query(“hix” =&gt; “HIX0000004”) puts\nserv.result …\n"],["Bio::Hinv::HixCnt","","Bio/Hinv/HixCnt.html","","<p>serv = Bio::Hinv::HixCnt.new serv.query puts serv.result\n"],["Bio::Hinv::HixRepresent","","Bio/Hinv/HixRepresent.html","","<p>serv = Bio::Hinv::HixRepresent.new serv.query(“hix” =&gt; “HIX0000001”)\nputs serv.result …\n"],["Bio::Hinv::HixXML","","Bio/Hinv/HixXML.html","","<p>example at “www.jbirc.aist.go.jp/hinv/hws/doc/index_jp.html” is for\nhit_xml.php (not for hix_xml.php …\n"],["Bio::Hinv::IdSearch","","Bio/Hinv/IdSearch.html","","<p>serv = Bio::Hinv::IdSearch.new serv.query(“query” =&gt; “HIT00002218*”,\n“id_type” …\n"],["Bio::Hinv::KeywordSearch","","Bio/Hinv/KeywordSearch.html","","<p>serv = Bio::Hinv::KeywordSearch.new serv.query(“query” =&gt;\n“HIT00002218*”, “start” …\n"],["Bio::Iprscan","","Bio/Iprscan.html","",""],["Bio::Iprscan::Report","","Bio/Iprscan/Report.html","","<p>DESCRIPTION\n<p>Class for InterProScan report. It is used to parse results and reformat \nresults from (raw|xml|txt) …\n"],["Bio::Iprscan::Report::Match","","Bio/Iprscan/Report/Match.html","","<p>Description\n<p>Container class for InterProScan matches.\n<p>Usage\n"],["Bio::KEGG","","Bio/KEGG.html","","<p>KEGG\n"],["Bio::KEGG::BRITE","","Bio/KEGG/BRITE.html","","<p>Note\n<p>This class is not completely implemented, but obsolete as the original\ndatabase BRITE has changed …\n"],["Bio::KEGG::COMPOUND","","Bio/KEGG/COMPOUND.html","","<p>Description\n<p>Bio::KEGG::COMPOUND is a parser class for the KEGG COMPOUND database entry.\nKEGG COMPOUND …\n"],["Bio::KEGG::Common","","Bio/KEGG/Common.html","","<p>Namespace for methods commonly used in the Bio::KEGG::* classes.\n"],["Bio::KEGG::Common::DblinksAsHash","","Bio/KEGG/Common/DblinksAsHash.html","","<p>The module providing dblinks_as_hash methods.\n<p>Bio::KEGG::* internal use only.\n"],["Bio::KEGG::Common::DiseasesAsHash","","Bio/KEGG/Common/DiseasesAsHash.html","","<p>This module provides diseases_as_hash method.\n<p>Bio::KEGG::* internal use only.\n"],["Bio::KEGG::Common::GenesAsHash","","Bio/KEGG/Common/GenesAsHash.html","","<p>This module provides genes_as_hash method.\n<p>Bio::KEGG::* internal use only.\n"],["Bio::KEGG::Common::ModulesAsHash","","Bio/KEGG/Common/ModulesAsHash.html","","<p>This module provides modules_as_hash method.\n<p>Bio::KEGG::* internal use only.\n"],["Bio::KEGG::Common::OrthologsAsHash","","Bio/KEGG/Common/OrthologsAsHash.html","","<p>This module provides orthologs_as_hash method.\n<p>Bio::KEGG::* internal use only.\n"],["Bio::KEGG::Common::PathwaysAsHash","","Bio/KEGG/Common/PathwaysAsHash.html","","<p>The module providing pathways_as_hash method.\n<p>Bio::KEGG::* internal use only.\n"],["Bio::KEGG::Common::References","","Bio/KEGG/Common/References.html","","<p>The module provides references method.\n"],["Bio::KEGG::Common::StringsAsHash","","Bio/KEGG/Common/StringsAsHash.html","","<p>This module provides strings_as_hash private method.\n<p>Bio::KEGG::* internal use only.\n"],["Bio::KEGG::DRUG","","Bio/KEGG/DRUG.html","","<p>Description\n<p>Bio::KEGG::DRUG is a parser class for the KEGG DRUG database entry. KEGG\nDRUG is a drug information …\n"],["Bio::KEGG::ENZYME","","Bio/KEGG/ENZYME.html","",""],["Bio::KEGG::EXPRESSION","","Bio/KEGG/EXPRESSION.html","",""],["Bio::KEGG::GENES","","Bio/KEGG/GENES.html","","<p>Description\n<p>KEGG GENES entry parser.\n<p>References\n"],["Bio::KEGG::GENOME","","Bio/KEGG/GENOME.html","","<p>Description\n<p>Parser for the KEGG GENOME database\n<p>References\n"],["Bio::KEGG::GLYCAN","","Bio/KEGG/GLYCAN.html","",""],["Bio::KEGG::KGML","","Bio/KEGG/KGML.html","","<p>KGML (KEGG XML) parser\n<p>See www.genome.jp/kegg/xml/ for more details on KGML.\n<p>Note for older version users …\n"],["Bio::KEGG::KGML::Entry","","Bio/KEGG/KGML/Entry.html","","<p>Bio::KEGG:Entry contains an entry element in the KGML.\n"],["Bio::KEGG::KGML::Graphics","","Bio/KEGG/KGML/Graphics.html","","<p>Bio::KEGG::KGML::Graphics contains a &#39;graphics&#39; element in the\nKGML.\n"],["Bio::KEGG::KGML::Product","","Bio/KEGG/KGML/Product.html","","<p>Bio::KEGG::KGML::Product contains a product element in the KGML.\n"],["Bio::KEGG::KGML::Reaction","","Bio/KEGG/KGML/Reaction.html","","<p>Bio::KEGG::KGML::Reaction contains a reaction element in the KGML.\n"],["Bio::KEGG::KGML::Relation","","Bio/KEGG/KGML/Relation.html","","<p>Bio::KEGG::KGML::Relation contains a relation element in the KGML.\n"],["Bio::KEGG::KGML::Substrate","","Bio/KEGG/KGML/Substrate.html","","<p>Bio::KEGG::KGML::Substrate contains a substrate element in the KGML.\n"],["Bio::KEGG::KGML::SubstrateProduct","","Bio/KEGG/KGML/SubstrateProduct.html","","<p>Bio::KEGG::KGML::SubstrateProduct contains a substrate element or a product\nelement in the KGML.\n<p>Please …\n"],["Bio::KEGG::Keggtab","","Bio/KEGG/Keggtab.html","","<p>Description\n<p>Parse &#39;keggtab&#39; KEGG database definition file which also includes\nTaxonomic category …\n"],["Bio::KEGG::Keggtab::DB","","Bio/KEGG/Keggtab/DB.html","","<p>Bio::KEGG::Keggtab::DB\n"],["Bio::KEGG::MODULE","","Bio/KEGG/MODULE.html","","<p>Description\n<p>Bio::KEGG::MODULE is a parser class for the KEGG MODULE database entry.\n<p>References\n"],["Bio::KEGG::ORTHOLOGY","","Bio/KEGG/ORTHOLOGY.html","","<p>Description\n<p>KO (KEGG Orthology) entry parser.\n<p>References\n"],["Bio::KEGG::PATHWAY","","Bio/KEGG/PATHWAY.html","","<p>Description\n<p>Bio::KEGG::PATHWAY is a parser class for the KEGG PATHWAY database entry.\n<p>References\n"],["Bio::KEGG::REACTION","","Bio/KEGG/REACTION.html","",""],["Bio::KEGGDB","","Bio/KEGGDB.html","","<p>Class for KEGG databases. Inherits a NCBIDB class.\n"],["Bio::LITDB","","Bio/LITDB.html","","<p>LITDB class\n"],["Bio::Lasergene","","Bio/Lasergene.html","","<p>bio/db/lasergene.rb - Interface for DNAStar Lasergene sequence file format\n<p>Author &mdash; Trevor Wennblom  &lt; …\n"],["Bio::Location","","Bio/Location.html","","<p>Description\n<p>The Bio::Location class describes the position of a genomic locus.\nTypically, Bio::Location …\n"],["Bio::Locations","","Bio/Locations.html","","<p>Description\n<p>The Bio::Locations class is a container for Bio::Location objects: creating\na Bio::Locations …\n"],["Bio::MAFFT","","Bio/MAFFT.html","","<p>Bio::MAFFT is a wrapper class to execute MAFFT. MAFFT is a very fast\nmultiple sequence alignment software. …\n"],["Bio::MAFFT::Report","","Bio/MAFFT/Report.html","","<p>MAFFT result parser class. MAFFT is a very fast multiple sequence alignment\nsoftware.\n<p>Since a result of …\n"],["Bio::MEDLINE","","Bio/MEDLINE.html","","<p>Description\n<p>NCBI PubMed/MEDLINE database class.\n<p>Examples\n"],["Bio::Map","","Bio/Map.html","","<p>Description\n<p>The Bio::Map contains classes that describe mapping information and can be\nused to contain …\n"],["Bio::Map::ActsLikeMap","","Bio/Map/ActsLikeMap.html","","<p>Description\n<p>The Bio::Map::ActsLikeMap module contains methods that are typical for\nmap-like things:\n<p>add …\n"],["Bio::Map::ActsLikeMarker","","Bio/Map/ActsLikeMarker.html","","<p>Description\n<p>The Bio::Map::ActsLikeMarker module contains methods that are typical for\nmarker-like things: …\n"],["Bio::Map::Mapping","","Bio/Map/Mapping.html","","<p>Description\n<p>Creates a new Bio::Map::Mapping object, which links Bio::Map::ActsAsMap-\nand Bio::Map::ActsAsMarker-like …\n"],["Bio::Map::Marker","","Bio/Map/Marker.html","","<p>Description\n<p>This class handles markers that are anchored to a Bio::Map::SimpleMap. It\nincludes Bio::Map::ActsLikeMarker …\n"],["Bio::Map::SimpleMap","","Bio/Map/SimpleMap.html","","<p>Description\n<p>This class handles the essential storage of name, type and units of a map. \nIt includes Bio::Map::ActsLikeMap …\n"],["Bio::Meme","","Bio/Meme.html","",""],["Bio::Meme::Mast","","Bio/Meme/Mast.html","","<p>Description\n<p>Bio::Meme::Mast is a wrapper for searching a database using sequence\nmotifs.  The code will …\n"],["Bio::Meme::Mast::Report","","Bio/Meme/Mast/Report.html","","<p>Description\n<p>A class to parse the output from Mast\n<p>WARNING: Currently support is only for -hit_list (machine …\n"],["Bio::Meme::Motif","","Bio/Meme/Motif.html","","<p>Description\n<p>This class minimally represents a sequence motif according to the MEME\nprogram\n<p>TODO: integrate …\n"],["Bio::Muscle","","Bio/Muscle.html","","<p>Bio::Muscle is a wrapper class to execute MUSCLE.\n<p>Please refer documents in bio/apple/muscle.rb for references. …\n"],["Bio::Muscle::DEFAULT_PARSER","","Bio/Alignment/MultiFastaFormat.html","","<p>Data class for fasta-formatted multiple sequence alignment data, which is\nsimply multiple entiries of …\n"],["Bio::NBRF","","Bio/NBRF.html","","<p>Sequence data class for NBRF/PIR flatfile format.\n"],["Bio::NCBI","","Bio/NCBI.html","",""],["Bio::NCBI::REST","","Bio/NCBI/REST.html","","<p>Description\n<p>The Bio::NCBI::REST class provides REST client for the NCBI E-Utilities\n<p>Entrez Programming …\n"],["Bio::NCBI::REST::EFetch","","Bio/NCBI/REST/EFetch.html","","<p>Shortcut methods for the EFetch service\n"],["Bio::NCBI::REST::EFetch::Methods","","Bio/NCBI/REST/EFetch/Methods.html","",""],["Bio::NCBI::REST::ESearch","","Bio/NCBI/REST/ESearch.html","","<p>Shortcut methods for the ESearch service\n"],["Bio::NCBI::REST::ESearch::Methods","","Bio/NCBI/REST/ESearch/Methods.html","","<p>Search database entries by given keywords using E-Utils (esearch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESearch …\n\n"],["Bio::NCBIDB","","Bio/NCBIDB.html","","<p>Stores a NCBI style (GenBank, KEGG etc.) entry.\n"],["Bio::NCBIDB::Common","","Bio/NCBIDB/Common.html","","<p>Description\n<p>This module defines a common framework among GenBank, GenPept, RefSeq, and\nDDBJ.  For more …\n"],["Bio::Newick","","Bio/Newick.html","","<p>Newick standard phylogenetic tree parser class.\n<p>This is alpha version. Incompatible changes may be made …\n"],["Bio::Newick::ParseError","","Bio/Newick/ParseError.html","","<p>parse error class\n"],["Bio::Nexus","","Bio/Nexus.html","","<p>DESCRIPTION\n<p>Bio::Nexus is a parser for nexus formatted data. It contains classes and\nconstants enabling …\n"],["Bio::Nexus::CharactersBlock","","Bio/Nexus/CharactersBlock.html","","<p>DESCRIPTION\n<p>Bio::Nexus::CharactersBlock represents a characters nexus block.\n<p>Example of Characters block: …\n"],["Bio::Nexus::DataBlock","","Bio/Nexus/DataBlock.html","","<p>DESCRIPTION\n<p>Bio::Nexus::DataBlock represents a data nexus block. A data block is a\nBio::Nexus::CharactersBlock …\n"],["Bio::Nexus::DistancesBlock","","Bio/Nexus/DistancesBlock.html","","<p>DESCRIPTION\n<p>Bio::Nexus::DistancesBlock represents a distances nexus block.\n<p>Example of Distances block: …\n"],["Bio::Nexus::GenericBlock","","Bio/Nexus/GenericBlock.html","","<p>DESCRIPTION\n<p>Bio::Nexus::GenericBlock represents a generic nexus block. It is mainly\nintended to be extended …\n"],["Bio::Nexus::NexusMatrix","","Bio/Nexus/NexusMatrix.html","","<p>DESCRIPTION\n<p>Bio::Nexus::NexusMatrix represents a characters or distance matrix, where\nthe names are stored …\n"],["Bio::Nexus::NexusMatrix::NexusMatrixError","","Bio/Nexus/NexusMatrix/NexusMatrixError.html","","<p>Nexus matrix error class.\n"],["Bio::Nexus::NexusParseError","","Bio/Nexus/NexusParseError.html","","<p>Nexus parse error class,  indicates error during parsing of nexus formatted\ndata.\n"],["Bio::Nexus::TaxaBlock","","Bio/Nexus/TaxaBlock.html","","<p>DESCRIPTION\n<p>Bio::Nexus::TaxaBlock represents a taxa nexus block.\n<p>Example of Taxa block:\n"],["Bio::Nexus::TreesBlock","","Bio/Nexus/TreesBlock.html","","<p>DESCRIPTION\n<p>Bio::Nexus::TreesBlock represents a trees nexus block.\n<p>Example of Trees block:\n"],["Bio::Nexus::Util","","Bio/Nexus/Util.html","","<p>DESCRIPTION\n<p>Bio::Nexus::Util is a class containing static helper methods\n"],["Bio::NucleicAcid","","Bio/NucleicAcid.html","",""],["Bio::NucleicAcid::Data","","Bio/NucleicAcid/Data.html","",""],["Bio::PAML","","Bio/PAML.html","",""],["Bio::PAML::Baseml","","Bio/PAML/Baseml.html","","<p>Description\n<p>Bio::PAML::Baseml is a wrapper for running PAML baseml program.\n<p>Because most of the methods …\n"],["Bio::PAML::Baseml::Report","","Bio/PAML/Baseml/Report.html","","<p>UNDER CONSTRUCTION.\n<p>Bio::PAML::Baseml::Report is a parser class for a baseml result.\n"],["Bio::PAML::Codeml","","Bio/PAML/Codeml.html","","<p>Description\n<p>Bio::PAML::Codeml is a wrapper for estimating evolutionary rate using the\nCODEML  tool. The …\n"],["Bio::PAML::Codeml::Model","","Bio/PAML/Codeml/Model.html","","<p>Model class contains one of the models of a codeml run (e.g. M0) which is\nused as a test hypothesis for …\n"],["Bio::PAML::Codeml::PositiveSite","","Bio/PAML/Codeml/PositiveSite.html","","<p>A record of codon sites, across the sequences in the alignment, showing\nevidence of positive selection. …\n"],["Bio::PAML::Codeml::PositiveSites","","Bio/PAML/Codeml/PositiveSites.html","","<p>List for the positive selection sites. PAML returns:\n<p>Naive Empirical Bayes (NEB) analysis Positively selected …\n"],["Bio::PAML::Codeml::Rates","","Bio/PAML/Codeml/Rates.html","","<p>Description\n<p>A simple class for parsing the codeml rates file.\n<p>WARNING: The order of the parsed data should …\n"],["Bio::PAML::Codeml::Report","","Bio/PAML/Codeml/Report.html","","<p>Description\n<p>Run PAML codeml and get the results from the output file. The\nCodeml::Report object is returned …\n"],["Bio::PAML::Codeml::ReportError","","Bio/PAML/Codeml/ReportError.html","","<p>Supporting error class\n"],["Bio::PAML::Codeml::ReportSingle","","Bio/PAML/Codeml/ReportSingle.html","","<p>ReportSingle is a simpler parser for a codeml report containing a single\nrun. This is retained for  backward …\n"],["Bio::PAML::Common","","Bio/PAML/Common.html","","<p>Description\n<p>Bio::PAML::Common is a basic wrapper class for PAML programs.  The class\nprovides methods …\n"],["Bio::PAML::Common::Report","","Bio/PAML/Common/Report.html","","<p>UNDER CONSTRUCTION.\n<p>Bio::PAML::Common::Report is a basic report class for PAML program&#39;s\nresults. …\n"],["Bio::PAML::Yn00","","Bio/PAML/Yn00.html","","<p>Description\n<p>Bio::PAML::Yn00 is a wrapper for running PAML yn00 program.\n<p>Because most of the methods in …\n"],["Bio::PAML::Yn00::Report","","Bio/PAML/Yn00/Report.html","","<p>UNDER CONSTRUCTION.\n<p>Bio::PAML::Yn00::Report is a parser class for a yn00 result.\n"],["Bio::PDB","","Bio/PDB.html","","<p>This is the main PDB class which takes care of parsing, annotations and is\nthe entry way to the co-ordinate …\n"],["Bio::PDB::AtomFinder","","Bio/PDB/AtomFinder.html","","<p>methods to access atoms\n<p>XXX#each_residue must be defined.\n"],["Bio::PDB::Chain","","Bio/PDB/Chain.html","","<p>Bio::PDB::Chain is a class to store a chain.\n<p>The object would contain some residues (Bio::PDB::Residue …\n"],["Bio::PDB::ChainFinder","","Bio/PDB/ChainFinder.html","","<p>methods to access chains\n<p>XXX#each_model must be defined.\n<p>Bio::PDB::ChainFinder is included by Bio::PDB::PDB …\n"],["Bio::PDB::ChemicalComponent","","Bio/PDB/ChemicalComponent.html","","<p>Bio::PDB::ChemicalComponet is a parser for a entry of the PDB Chemical\nComponent Dictionary.\n<p>The PDB  …\n"],["Bio::PDB::ChemicalComponent::Record","","Bio/PDB/ChemicalComponent/Record.html","","<p>Single field (normally single line) of a entry\n"],["Bio::PDB::Coordinate","","Bio/PDB/Coordinate.html","","<p>Bio::PDB::Coordinate is a class to store a 3D coordinate. It inherits\nVector (in bundled library in  …\n"],["Bio::PDB::DataType","","Bio/PDB/DataType.html","","<p>Modules required by the field definitions\n"],["Bio::PDB::DataType::ConstLikeMethod","","Bio/PDB/DataType/ConstLikeMethod.html","",""],["Bio::PDB::DataType::Pdb_AChar","","Bio/PDB/DataType/Pdb_String.html","",""],["Bio::PDB::DataType::Pdb_Atom","","Bio/PDB/DataType/Pdb_String.html","",""],["Bio::PDB::DataType::Pdb_Character","","Bio/PDB/DataType/Pdb_LString.html","",""],["Bio::PDB::DataType::Pdb_Date","","Bio/PDB/DataType/Pdb_String.html","",""],["Bio::PDB::DataType::Pdb_IDcode","","Bio/PDB/DataType/Pdb_String.html","",""],["Bio::PDB::DataType::Pdb_Integer","","Bio/PDB/DataType/Pdb_Integer.html","",""],["Bio::PDB::DataType::Pdb_LString","","Bio/PDB/DataType/Pdb_LString.html","",""],["Bio::PDB::DataType::Pdb_List","","Bio/PDB/DataType/Pdb_List.html","",""],["Bio::PDB::DataType::Pdb_Real","","Bio/PDB/DataType/Pdb_Real.html","",""],["Bio::PDB::DataType::Pdb_Residue_name","","Bio/PDB/DataType/Pdb_String.html","",""],["Bio::PDB::DataType::Pdb_SList","","Bio/PDB/DataType/Pdb_SList.html","",""],["Bio::PDB::DataType::Pdb_Specification_list","","Bio/PDB/DataType/Pdb_Specification_list.html","",""],["Bio::PDB::DataType::Pdb_String","","Bio/PDB/DataType/Pdb_String.html","",""],["Bio::PDB::DataType::Pdb_StringRJ","","Bio/PDB/DataType/Pdb_StringRJ.html","",""],["Bio::PDB::DataType::Pdb_SymOP","","Bio/PDB/DataType/Pdb_String.html","",""],["Bio::PDB::HetatmFinder","","Bio/PDB/HetatmFinder.html","","<p>methods to access HETATMs\n<p>XXX#each_heterogen must be defined.\n<p>Bio::PDB::HetatmFinder is included by Bio::PDB::PDB …\n"],["Bio::PDB::Heterogen","","Bio/PDB/Heterogen.html","","<p>Bio::PDB::Heterogen is a class to store a heterogen. It inherits\nBio::PDB::Residue and most of the methods …\n"],["Bio::PDB::HeterogenFinder","","Bio/PDB/HeterogenFinder.html","","<p>methods to access heterogens (compounds or ligands)\n<p>XXX#each_chain must be defined.\n<p>Bio::PDB::HeterogenFinder …\n"],["Bio::PDB::Model","","Bio/PDB/Model.html","","<p>Bio::PDB::Model is a class to store a model.\n<p>The object would contain some chains (Bio::PDB::Chain objects). …\n"],["Bio::PDB::ModelFinder","","Bio/PDB/ModelFinder.html","","<p>methods to access models\n<p>XXX#each_model must be defined.\n<p>Bio::PDB::ModelFinder is included by Bio::PDB::PDB …\n"],["Bio::PDB::Record","","Bio/PDB/Record.html","","<p>The ancestor of every single PDB record class. It inherits\n<code>Struct</code> class. Basically, each line of a PDB …\n"],["Bio::PDB::Record::ANISOU","","Bio/PDB/Record/ANISOU.html","","<p>ANISOU record class\n"],["Bio::PDB::Record::ATOM","","Bio/PDB/Record/ATOM.html","","<p>ATOM record class\n"],["Bio::PDB::Record::HETATM","","Bio/PDB/Record/HETATM.html","","<p>HETATM record class. It inherits ATOM class.\n"],["Bio::PDB::Record::Jrnl","","Bio/PDB/Record/Jrnl.html","","<p>JRNL record classes\n"],["Bio::PDB::Record::Remark1","","Bio/PDB/Record/Remark1.html","","<p>REMARK record classes for REMARK 1\n"],["Bio::PDB::Record::Remark2","","Bio/PDB/Record/Remark2.html","","<p>REMARK record classes for REMARK 2\n"],["Bio::PDB::Residue","","Bio/PDB/Residue.html","","<p>Bio::PDB::Residue is a class to store a residue. The object would contain\nsome atoms (Bio::PDB::Record::ATOM …\n"],["Bio::PDB::ResidueFinder","","Bio/PDB/ResidueFinder.html","","<p>methods to access residues\n<p>XXX#each_chain must be defined.\n<p>Bio::PDB::ResidueFinder is included by Bio::PDB::PDB …\n"],["Bio::PDB::Utils","","Bio/PDB/Utils.html","","<p>Utility methods for PDB data. The methods in this mixin should be\napplicalbe to all PDB objects.\n<p>Bio::PDB::Utils …\n"],["Bio::PROSITE","","Bio/PROSITE.html","",""],["Bio::PSORT","","Bio/PSORT.html","","<p>A client for PSORT WWW Server \n<p>A client for PSORT WWW Server for predicting protein subcellular \nlocalization. …\n"],["Bio::PSORT::CGIDriver","","Bio/PSORT/CGIDriver.html","","<p>Generic CGI client class\n<p>A generic CGI client class for Bio::PSORT::* classes. The class provides an\ninterface …\n"],["Bio::PSORT::IPSORT","","Bio/PSORT/IPSORT.html","",""],["Bio::PSORT::PSORT1","","Bio/PSORT/PSORT1.html","","<p>Bio::PSORT::PSORT1\n<p>Bio::PSORT::PSORT1 is a wapper class for the original PSORT program.\n<p>Example\n"],["Bio::PSORT::PSORT1::Remote","","Bio/PSORT/PSORT1/Remote.html","","<p>Bio::PSORT::PSORT1::Remote\n<p>PSORT1 specific CGIDriver.\n"],["Bio::PSORT::PSORT1::Report","","Bio/PSORT/PSORT1/Report.html","","<p>Bio::PSORT::PSORT1::Report\n<p>Parser class for PSORT1 output report.\n<p>Example\n"],["Bio::PSORT::PSORT2","","Bio/PSORT/PSORT2.html","","<p>Bio::PSORT::PSORT2\n<p>Bio::PSORT::PSORT2 is a wapper class for the original PSORT program.\n<p>Example\n"],["Bio::PSORT::PSORT2::Remote","","Bio/PSORT/PSORT2/Remote.html","","<p>Bio::PSORT::PSORT2::Remote\n<p>PSORT2 specific CGIDriver\n"],["Bio::PSORT::PSORT2::Report","","Bio/PSORT/PSORT2/Report.html","","<p>Bio::PSORT::PSORT2::Report\n<p>Report parser classe for PSORT II(PSORT2).\n<p>Example\n"],["Bio::PSORT::PSORTB","","Bio/PSORT/PSORTB.html","",""],["Bio::PSORT::WoLF_PSORT","","Bio/PSORT/WoLF_PSORT.html","",""],["Bio::PTS1","","Bio/PTS1.html","","<p>Bio::PTS1 - A web service client class for PTS1 predictor.\n<p>Peroxisomal targeting signal type 1 (PTS1) …\n"],["Bio::PTS1::Report","","Bio/PTS1/Report.html","","<p>Parser for the PTS1 prediction Report (in HTML).\n"],["Bio::Pathway","","Bio/Pathway.html","","<p>Bio::Pathway is a general graph object initially constructed by the list of\nthe ((&lt;Bio::Relation&gt;)) …\n"],["Bio::Phylip","","Bio/Phylip.html","",""],["Bio::Phylip::DistanceMatrix","","Bio/Phylip/DistanceMatrix.html","","<p>This is a parser class for phylip distance matrix data created by dnadist,\nprotdist, or restdist commands. …\n"],["Bio::Phylip::PhylipFormat","","Bio/Phylip/PhylipFormat.html","","<p>This is phylip multiple alignment format parser. The two formats,\ninterleaved and non-interleaved, are …\n"],["Bio::Probcons","","Bio/Probcons.html","","<p>Bio::Probcons is a wrapper class to execute PROBCONS (Probabilistic\nConsistency-based Multiple Alignment …\n"],["Bio::Probcons::DEFAULT_PARSER","","Bio/Alignment/MultiFastaFormat.html","","<p>Data class for fasta-formatted multiple sequence alignment data, which is\nsimply multiple entiries of …\n"],["Bio::PubMed","","Bio/PubMed.html","","<p>Description\n<p>The Bio::PubMed class provides several ways to retrieve bibliographic\ninformation from the …\n"],["Bio::REBASE","","Bio/REBASE.html","","<p>bio/db/rebase.rb - Interface for EMBOSS formatted REBASE files\n<p>Author &mdash; Trevor Wennblom  &lt;trevor@corevx.com …\n"],["Bio::RefSeq","","Bio/RefSeq.html","","<p>Bio::RefSeq is deprecated. Use Bio::GenBank.\n"],["Bio::Reference","","Bio/Reference.html","","<p>DESCRIPTION\n<p>A class for journal reference information.\n<p>USAGE\n"],["Bio::References","","Bio/References.html","","<p>DESCRIPTION\n<p>This class is OBSOLETED, and will soon be removed. Instead of this class,\nan array is to be …\n"],["Bio::Registry","","Bio/Registry.html","",""],["Bio::Registry::DB","","Bio/Registry/DB.html","",""],["Bio::Relation","","Bio/Relation.html","","<p>Bio::Relation is a simple object storing two nodes and the relation of\nthem. The nodes and the edge (relation) …\n"],["Bio::RestrictionEnzyme","","Bio/RestrictionEnzyme.html","","<p>Description\n<p>Bio::RestrictionEnzyme allows you to fragment a DNA strand using one or\nmore restriction enzymes. …\n"],["Bio::RestrictionEnzyme::Analysis","","Bio/RestrictionEnzyme/Analysis.html","",""],["Bio::RestrictionEnzyme::CutSymbol","","Bio/RestrictionEnzyme/CutSymbol.html","","<p>Usage\n\n<pre>#require &#39;bio/util/restriction_enzyme/cut_symbol&#39;\nrequire &#39;cut_symbol&#39;\ninclude Bio::RestrictionEnzyme::CutSymbol ...</pre>\n"],["Bio::RestrictionEnzyme::CutSymbol::CutSymbol__","","Bio/RestrictionEnzyme/CutSymbol/CutSymbol__.html","","<p>Class to keep state\n"],["Bio::RestrictionEnzyme::DenseIntArray","","Bio/RestrictionEnzyme/DenseIntArray.html","","<p>a class to store integer numbers, containing many contiguous integral\nnumbers.\n<p>Bio::RestrictionEnzyme …\n"],["Bio::RestrictionEnzyme::DoubleStranded","","Bio/RestrictionEnzyme/DoubleStranded.html","","<p>A pair of SingleStrand and SingleStrandComplement objects with methods to\nadd utility to their relation. …\n"],["Bio::RestrictionEnzyme::DoubleStranded::AlignedStrands","","Bio/RestrictionEnzyme/DoubleStranded/AlignedStrands.html","","<p>Align two SingleStrand objects and return a Result object with\n<code>primary</code> and <code>complement</code> accessors.\n"],["Bio::RestrictionEnzyme::DoubleStranded::CutLocationPair","","Bio/RestrictionEnzyme/DoubleStranded/CutLocationPair.html","","<p>Stores a single cut location pair in 0-based index notation for use with\nDoubleStranded enzyme sequences. …\n"],["Bio::RestrictionEnzyme::DoubleStranded::CutLocationPairInEnzymeNotation","","Bio/RestrictionEnzyme/DoubleStranded/CutLocationPairInEnzymeNotation.html","","<p>Inherits from DoubleStranded::CutLocationPair , stores the cut location\npair in enzyme notation instead …\n"],["Bio::RestrictionEnzyme::DoubleStranded::CutLocations","","Bio/RestrictionEnzyme/DoubleStranded/CutLocations.html","","<p>Contains an <code>Array</code> of CutLocationPair objects.\n"],["Bio::RestrictionEnzyme::DoubleStranded::CutLocationsInEnzymeNotation","","Bio/RestrictionEnzyme/DoubleStranded/CutLocationsInEnzymeNotation.html","","<p>Inherits from DoubleStranded::CutLocations.  Contains\nCutLocationPairInEnzymeNotation objects. Adds helper …\n"],["Bio::RestrictionEnzyme::DoubleStranded::EnzymeAction","","Bio/RestrictionEnzyme/DoubleStranded/EnzymeAction.html","","<p>An EnzymeAction is a way of representing a potential effect that a\nRestrictionEnzyme may have on a nucleotide …\n"],["Bio::RestrictionEnzyme::Fragments","","Bio/RestrictionEnzyme/Fragments.html","","<p>Bio::RestrictionEnzyme::Fragments inherits from <code>Array</code>.\n<p>Bio::RestrictionEnzyme::Fragments is a container …\n"],["Bio::RestrictionEnzyme::Range","","Bio/RestrictionEnzyme/Range.html","",""],["Bio::RestrictionEnzyme::Range::CutRange","","Bio/RestrictionEnzyme/Range/CutRange.html","","<p>Abstract base class for HorizontalCutRange and VerticalCutRange\n"],["Bio::RestrictionEnzyme::Range::CutRanges","","Bio/RestrictionEnzyme/Range/CutRanges.html","","<p>Container for many CutRange objects or CutRange child objects.  Inherits\nfrom array.\n"],["Bio::RestrictionEnzyme::Range::HorizontalCutRange","","Bio/RestrictionEnzyme/Range/HorizontalCutRange.html","",""],["Bio::RestrictionEnzyme::Range::SequenceRange","","Bio/RestrictionEnzyme/Range/SequenceRange.html","","<p>A defined range over a nucleotide sequence.\n<p>This class accomadates having cuts defined on a sequence and …\n"],["Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html","","<p>cc = CalculatedCuts.new(@size) cc.add_cuts_from_cut_ranges(@cut_ranges)\ncc.remove_incomplete_cuts\n\n<pre>1 2 ...</pre>\n"],["Bio::RestrictionEnzyme::Range::SequenceRange::Fragment","","Bio/RestrictionEnzyme/Range/SequenceRange/Fragment.html","",""],["Bio::RestrictionEnzyme::Range::SequenceRange::Fragments","","Bio/RestrictionEnzyme/Range/SequenceRange/Fragments.html","",""],["Bio::RestrictionEnzyme::Range::VerticalCutRange","","Bio/RestrictionEnzyme/Range/VerticalCutRange.html","","<p>FIXME docs are kind of out of date.  Change this to\nVerticalAndHorizontalCutRange\n"],["Bio::RestrictionEnzyme::SingleStrand","","Bio/RestrictionEnzyme/SingleStrand.html","","<p>A single strand of restriction enzyme sequence pattern with a 5&#39; to\n3&#39;  orientation.\n<p>DoubleStranded …\n"],["Bio::RestrictionEnzyme::SingleStrand::CutLocationsInEnzymeNotation","","Bio/RestrictionEnzyme/SingleStrand/CutLocationsInEnzymeNotation.html","","<p>Stores the cut location in thier enzyme index notation\n<p>May be initialized with a series of cuts or an …\n"],["Bio::RestrictionEnzyme::SingleStrandComplement","","Bio/RestrictionEnzyme/SingleStrandComplement.html","","<p>A single strand of restriction enzyme sequence pattern with a 3&#39; to\n5&#39; orientation.\n"],["Bio::RestrictionEnzyme::SortedNumArray","","Bio/RestrictionEnzyme/SortedNumArray.html","","<p>a class to store sorted numerics.\n<p>Bio::RestrictionEnzyme internal use only. Please do not create the instance\n…\n"],["Bio::RestrictionEnzyme::StringFormatting","","Bio/RestrictionEnzyme/StringFormatting.html","",""],["Bio::SOFT","","Bio/SOFT.html","","<p>bio/db/soft.rb - Interface for SOFT formatted files\n<p>Author &mdash; Trevor Wennblom  &lt;trevor@corevx.com&gt; …\n"],["Bio::SOSUI","","Bio/SOSUI.html","",""],["Bio::SOSUI::Report","","Bio/SOSUI/Report.html","","<p>SOSUI output report parsing class\n<p>References\n<p>bp.nuap.nagoya-u.ac.jp/sosui/\n"],["Bio::SOSUI::Report::TMH","","Bio/SOSUI/Report/TMH.html","","<p>Bio::SOSUI::Report::TMH\n<p>Container class for transmembrane helix information.\n\n<pre>TM 1   31-  53 SECONDARY  ...</pre>\n"],["Bio::SangerChromatogram","","Bio/SangerChromatogram.html","","<p>Description\n<p>This is the Superclass for the Abif and Scf classes that allow importing of\nthe common scf …\n"],["Bio::Scf","","Bio/Scf.html","","<p>Description\n<p>This class inherits from the SangerChromatogram superclass. It captures the\ninformation contained …\n"],["Bio::Sequence","","Bio/Sequence.html","","<p>DESCRIPTION\n<p>Bio::Sequence objects represent annotated sequences in bioruby. A\nBio::Sequence object is …\n"],["Bio::Sequence::AA","","Bio/Sequence/AA.html","","<p>DESCRIPTION\n<p>Bio::Sequence::AA represents a bare Amino Acid sequence in bioruby.\n<p>USAGE\n"],["Bio::Sequence::Adapter","","Bio/Sequence/Adapter.html","","<p>Internal use only. Normal users should not use this module.\n<p>Helper methods for defining adapters used …\n"],["Bio::Sequence::Adapter::EMBL","","Bio/Sequence/Adapter/EMBL.html","","<p>Internal use only. Normal users should not use this module.\n<p>Bio::EMBL to Bio::Sequence adapter module. …\n"],["Bio::Sequence::Adapter::FastaFormat","","Bio/Sequence/Adapter/FastaFormat.html","","<p>Internal use only. Normal users should not use this module.\n<p>Bio::FastaFormat to Bio::Sequence adapter …\n"],["Bio::Sequence::Adapter::FastaNumericFormat","","Bio/Sequence/Adapter/FastaNumericFormat.html","","<p>Internal use only. Normal users should not use this module.\n<p>Bio::FastaNumericFormat to Bio::Sequence adapter …\n"],["Bio::Sequence::Adapter::Fastq","","Bio/Sequence/Adapter/Fastq.html","","<p>Internal use only. Normal users should not use this module.\n<p>Bio::Fastq to Bio::Sequence adapter module. …\n"],["Bio::Sequence::Adapter::GenBank","","Bio/Sequence/Adapter/GenBank.html","","<p>Internal use only. Normal users should not use this module.\n<p>Bio::GenBank to Bio::Sequence adapter module. …\n"],["Bio::Sequence::Adapter::SangerChromatogram","","Bio/Sequence/Adapter/SangerChromatogram.html","","<p>Internal use only. Normal users should not use this module.\n<p>Bio::SangerChromatogram to Bio::Sequence adapter …\n"],["Bio::Sequence::Common","","Bio/Sequence/Common.html","","<p>DESCRIPTION\n<p>Bio::Sequence::Common is a  Mixin implementing methods common to\nBio::Sequence::AA and Bio::Sequence::NA …\n"],["Bio::Sequence::DBLink","","Bio/Sequence/DBLink.html","","<p>Bio::Sequence::DBLink stores IDs with the database name. Its main purpose\nis to store database cross-reference …\n"],["Bio::Sequence::Format","","Bio/Sequence/Format.html","","<p>DESCRIPTION\n<p>A Mixin of methods used by Bio::Sequence#output to output sequences in \ncommon bioinformatic …\n"],["Bio::Sequence::Format::AminoFormatter","","Bio/Sequence/Format/AminoFormatter.html","","<p>Repository of protein sequence formatter classes\n"],["Bio::Sequence::Format::Formatter","","Bio/Sequence/Format/Formatter.html","","<p>bio/db/fasta/format_fasta.rb - Fasta format generater\n<p>Copyright &mdash; Copyright (C) 2006-2008 Toshiaki Katayama …\n"],["Bio::Sequence::Format::Formatter::Fasta","","Bio/Sequence/Format/Formatter/Fasta.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS. Simple Fasta format\noutput class for Bio::Sequence …\n"],["Bio::Sequence::Format::Formatter::Fasta_ncbi","","Bio/Sequence/Format/Formatter/Fasta_ncbi.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS. NCBI-Style Fasta format\noutput class for Bio::Sequence …\n"],["Bio::Sequence::Format::Formatter::Fasta_numeric","","Bio/Sequence/Format/Formatter/Fasta_numeric.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS. Simple FastaNumeric\nformat output class for Bio::Sequence …\n"],["Bio::Sequence::Format::Formatter::Fastq","","Bio/Sequence/Format/Formatter/Fastq.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS.\n<p>FASTQ format output class for Bio::Sequence.\n<p>The default …\n"],["Bio::Sequence::Format::Formatter::Fastq_illumina","","Bio/Sequence/Format/Formatter/Fastq_illumina.html","",""],["Bio::Sequence::Format::Formatter::Fastq_sanger","","Bio/Sequence/Format/Formatter/Fastq.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS.\n<p>FASTQ format output class for Bio::Sequence.\n<p>The default …\n"],["Bio::Sequence::Format::Formatter::Fastq_solexa","","Bio/Sequence/Format/Formatter/Fastq_solexa.html","",""],["Bio::Sequence::Format::Formatter::Qual","","Bio/Sequence/Format/Formatter/Qual.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS. Simple Qual format\n(sequence quality) output class …\n"],["Bio::Sequence::Format::Formatter::Raw","","Bio/Sequence/Format/Formatter/Raw.html","","<p>Raw sequence output formatter class\n"],["Bio::Sequence::Format::FormatterBase","","Bio/Sequence/Format/FormatterBase.html","","<p>Formatter base class. Any formatter class should inherit this class.\n"],["Bio::Sequence::Format::INSDFeatureHelper","","Bio/Sequence/Format/INSDFeatureHelper.html","","<p>Formatting helper methods for INSD (NCBI, EMBL, DDBJ) feature table\n"],["Bio::Sequence::Format::NucFormatter","","Bio/Sequence/Format/NucFormatter.html","","<p>bio/db/embl/format_embl.rb - EMBL format generater\n<p>Copyright &mdash; Copyright (C) 2008 Jan Aerts &lt;jandot@bioruby.org&gt;, …\n"],["Bio::Sequence::Format::NucFormatter::Embl","","Bio/Sequence/Format/NucFormatter/Embl.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS. Embl format output class\nfor Bio::Sequence.\n"],["Bio::Sequence::Format::NucFormatter::Genbank","","Bio/Sequence/Format/NucFormatter/Genbank.html","","<p>INTERNAL USE ONLY, YOU SHOULD NOT USE THIS CLASS. GenBank format output\nclass for Bio::Sequence.\n"],["Bio::Sequence::NA","","Bio/Sequence/NA.html","","<p>DESCRIPTION\n<p>Bio::Sequence::NA represents a bare Nucleic Acid sequence in bioruby.\n<p>USAGE\n"],["Bio::Sequence::QualityScore","","Bio/Sequence/QualityScore.html","","<p>Bio::Sequence::QualityScore is a name space for quality score modules. \nBioRuby internal use only (mainly …\n"],["Bio::Sequence::QualityScore::Converter","","Bio/Sequence/QualityScore/Converter.html","","<p>Converter methods between PHRED and Solexa quality scores.\n"],["Bio::Sequence::QualityScore::Phred","","Bio/Sequence/QualityScore/Phred.html","","<p>Bio::Sequence::QualityScore::Phred is a module having quality calculation\nmethods for the PHRED quality …\n"],["Bio::Sequence::QualityScore::Solexa","","Bio/Sequence/QualityScore/Solexa.html","","<p>Bio::Sequence::QualityScore::Solexa is a module having quality calculation\nmethods for the Solexa quality …\n"],["Bio::Sequence::SequenceMasker","","Bio/Sequence/SequenceMasker.html","","<p>Bio::Sequence::SequenceMasker is a mix-in module to provide helpful methods\nfor masking a sequence.\n<p>It …\n"],["Bio::SiRNA","","Bio/SiRNA.html","","<p>Bio::SiRNA\n<p>Designing siRNA.\n<p>This class implements the selection rules described by Kumiko Ui-Tei et al.\n…\n"],["Bio::SiRNA::Pair","","Bio/SiRNA/Pair.html","","<p>Bio::SiRNA::Pair\n"],["Bio::SiRNA::ShRNA","","Bio/SiRNA/ShRNA.html","","<p>Bio::SiRNA::ShRNA\n<p>Designing shRNA.\n"],["Bio::Sim4","","Bio/Sim4.html","","<p>The sim4 execution wrapper class.\n"],["Bio::Sim4::Report","","Bio/Sim4/Report.html","","<p>Bio::Sim4::Report is the sim4 report parser class. Its object may contain\nsome Bio::Sim4::Report::Hit …\n"],["Bio::Sim4::Report::Hit","","Bio/Sim4/Report/Hit.html","","<p>Hit object of the sim4 result. Similar to Bio::Blast::Report::Hit but lacks\nmany methods.\n"],["Bio::Sim4::Report::Segment","","Bio/Sim4/Report/Segment.html","","<p>Segment informations of a segment pair.\n"],["Bio::Sim4::Report::SegmentPair","","Bio/Sim4/Report/SegmentPair.html","","<p>Sequence segment pair of the sim4 result. Similar to\nBio::Blast::Report::HSP but lacks many methods. …\n"],["Bio::Sim4::Report::SeqDesc","","Bio/Sim4/Report/SeqDesc.html","","<p>Bio::Sim4::Report::SeqDesc stores sequence information of query or subject\nof sim4 report.\n"],["Bio::Spidey","","Bio/Spidey.html","",""],["Bio::Spidey::Report","","Bio/Spidey/Report.html","","<p>Spidey report parser class. Please see bio/appl/spidey/report.rb for\ndetails.\n<p>Its object may contain some …\n"],["Bio::Spidey::Report::Hit","","Bio/Spidey/Report/Hit.html","","<p>Hit object of Spidey result. Similar to Bio::Blast::Report::Hit but lacks\nmany methods.\n"],["Bio::Spidey::Report::Segment","","Bio/Spidey/Report/Segment.html","","<p>Segment informations of a segment pair.\n"],["Bio::Spidey::Report::SegmentPair","","Bio/Spidey/Report/SegmentPair.html","","<p>Sequence segment pair of Spidey result. Similar to Bio::Blast::Report::Hsp\nbut lacks many methods. For …\n"],["Bio::Spidey::Report::SeqDesc","","Bio/Spidey/Report/SeqDesc.html","","<p>SeqDesc stores sequence information of query or subject.\n"],["Bio::SwissProt","","Bio/SwissProt.html","","<p>Bio::SwissProt is deprecated. Use Bio::UniProtKB.\n"],["Bio::TMHMM","","Bio/TMHMM.html","","<p>TMHMM class for www.cbs.dtu.dk/services/TMHMM/\n"],["Bio::TMHMM::Report","","Bio/TMHMM/Report.html","","<p>TMHMM report parser class.\n"],["Bio::TMHMM::TMH","","Bio/TMHMM/TMH.html","","<p>Container class of the trainsmembrane helix(TMH) and the other\n\n<pre>segments.</pre>\n"],["Bio::TRANSFAC","","Bio/TRANSFAC.html","",""],["Bio::TRANSFAC::CELL","","Bio/TRANSFAC/CELL.html","",""],["Bio::TRANSFAC::CLASS","","Bio/TRANSFAC/CLASS.html","",""],["Bio::TRANSFAC::FACTOR","","Bio/TRANSFAC/FACTOR.html","",""],["Bio::TRANSFAC::GENE","","Bio/TRANSFAC/GENE.html","",""],["Bio::TRANSFAC::MATRIX","","Bio/TRANSFAC/MATRIX.html","",""],["Bio::TRANSFAC::SITE","","Bio/TRANSFAC/SITE.html","",""],["Bio::TargetP","","Bio/TargetP.html","",""],["Bio::TargetP::Report","","Bio/TargetP/Report.html","","<p>A parser and container class for TargetP report.\n"],["Bio::Tcoffee","","Bio/Tcoffee.html","","<p>Bio::Tcoffee is a wrapper class to execute t-coffee.\n<p>Please refer documents in bio/apple/tcoffee.rb for …\n"],["Bio::Tcoffee::DEFAULT_PARSER","","Bio/ClustalW/Report.html","","<p>CLUSTAL W result data (*.aln file) parser class.\n"],["Bio::TogoWS","","Bio/TogoWS.html","","<p>Bio::TogoWS is a namespace for the TogoWS web services.\n"],["Bio::TogoWS::AccessWait","","Bio/TogoWS/AccessWait.html","","<p>Internal Use Only.\n<p>Bio::TogoWS::AccessWait is a module to implement a private method for\naccess.\n"],["Bio::TogoWS::REST","","Bio/TogoWS/REST.html","","<p>Description\n<p>Bio::TogoWS::REST is a REST client for the TogoWS web service.\n<p>Details of the service are desribed …\n"],["Bio::TrEMBL","","Bio/TrEMBL.html","","<p>Bio::TrEMBL is deprecated. Use Bio::UniProtKB.\n"],["Bio::Tree","","Bio/Tree.html","","<p>This is the class for phylogenetic tree. It stores a phylogenetic tree.\n<p>Internally, it is based on Bio::Pathway …\n"],["Bio::Tree::Edge","","Bio/Tree/Edge.html","","<p>Edge object of each node. By default, the object doesn&#39;t contain any\nnode information.\n"],["Bio::Tree::NoPathError","","Bio/Tree/NoPathError.html","","<p>Error when there are no path between specified nodes\n"],["Bio::Tree::Node","","Bio/Tree/Node.html","","<p>Node object.\n"],["Bio::UniProtKB","","Bio/UniProtKB.html","","<p>Description\n<p>Parser class for UniProtKB/SwissProt and TrEMBL database entry.\n<p>See the UniProtKB document …\n"],["Object","","Object.html","",""],["*","Bio::FlatFileIndex::Results","Bio/FlatFileIndex/Results.html#method-i-2A","(a)","<p>Returns set intersection of results. “a * b” means “a AND b”.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># I want to search ...</span>\n</pre>\n"],["+","Bio::FlatFileIndex::Results","Bio/FlatFileIndex/Results.html#method-i-2B","(a)","<p>Add search results. “a + b” means “a OR b”.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># I want to search &#39;ADH_IRON_1&#39; ...</span>\n</pre>\n"],["+","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-2B","(other)","<p>Same usage as Array#+, but accepts only the same classes instance.\n"],["+","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-2B","(other)","<p>Same usage as Array#+, but accepts only the same classes instance.\n"],["+","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-2B","(*arg)","<p>Create a new sequence by adding to an existing sequence. The existing\nsequence is not modified.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atgc&#39;) ...</pre>\n"],["<<","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-3C-3C","(seq)","<p>Adds a sequence without key. The key is automatically determined.\n"],["<<","Bio::FlatFileIndex::Indexer::NameSpaces","Bio/FlatFileIndex/Indexer/NameSpaces.html#method-i-3C-3C","(x)",""],["<<","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-3C-3C","(elem)","<p>Same usage as Array#<<\n"],["<<","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-3C-3C","(elem)","<p>Same usage as Array#<<\n"],["<<","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-3C-3C","(*arg)",""],["<=>","Bio::Location","Bio/Location.html#method-i-3C-3D-3E","(other)","<p>Check where a Bio::Location object is located compared to another\nBio::Location object (mainly to facilitate …\n"],["<=>","Bio::Map::Mapping","Bio/Map/Mapping.html#method-i-3C-3D-3E","(other)","<p>Compares the location of this mapping to another mapping.\n<p><strong>Arguments</strong>:\n<p>other_mapping: Bio::Map::Mapping object …\n"],["<=>","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-3C-3D-3E","(other)","<p>Operator aimed to sort based on chain id\n"],["<=>","Bio::PDB::Model","Bio/PDB/Model.html#method-i-3C-3D-3E","(other)","<p>Operator aimed to sort models based on serial number\n"],["<=>","Bio::PDB::Record::ATOM","Bio/PDB/Record/ATOM.html#method-i-3C-3D-3E","(other)","<p>Sorts based on serial numbers\n"],["<=>","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-3C-3D-3E","(other)","<p>Sorts based on resSeq and iCode if need be\n"],["<=>","Bio::Relation","Bio/Relation.html#method-i-3C-3D-3E","(rel)","<p>Used by the each method to compare with another Bio::Relation object. This\nmethod is only usable when …\n"],["==","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-3D-3D","(x)","<p>If <em>x</em> is the same value, returns true. Otherwise, returns false.\n"],["==","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-3D-3D","(other)","<p>If self == other, returns true. Otherwise, returns false.\n"],["==","Bio::FlatFileIndex::Flat_1::Record","Bio/FlatFileIndex/Flat_1/Record.html#method-i-3D-3D","(x)",""],["==","Bio::GFF::GFF2::MetaData","Bio/GFF/GFF2/MetaData.html#method-i-3D-3D","(other)","<p>Returns true if self == other. Otherwise, returns false.\n"],["==","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-3D-3D","(other)","<p>Returns true if self == other. Otherwise, returns false.\n"],["==","Bio::GFF::GFF2::Record::Value","Bio/GFF/GFF2/Record/Value.html#method-i-3D-3D","(other)","<p>Returns true if other == self. Otherwise, returns false.\n"],["==","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-i-3D-3D","(other)","<p>If self == other, returns true. otherwise, returns false.\n"],["==","Bio::GFF::GFF3::Record::Target","Bio/GFF/GFF3/Record/Target.html#method-i-3D-3D","(other)","<p>Returns true if self == other. Otherwise, returns false.\n"],["==","Bio::GFF::GFF3::SequenceRegion","Bio/GFF/GFF3/SequenceRegion.html#method-i-3D-3D","(other)","<p>Returns true if self == other. Otherwise, returns false.\n"],["==","Bio::Location","Bio/Location.html#method-i-3D-3D","(other)","<p>If <em>other</em> is equal with the self, returns true. Otherwise, returns\nfalse.\n<p><strong>Arguments</strong>:\n<p>(required) <em>other</em>: any …\n"],["==","Bio::Locations","Bio/Locations.html#method-i-3D-3D","(other)","<p>If <em>other</em> is equal with the self, returns true. Otherwise, returns\nfalse.\n<p><strong>Arguments</strong>:\n<p>(required) <em>other</em>: any …\n"],["==","Bio::Reference","Bio/Reference.html#method-i-3D-3D","(other)","<p>If <em>other</em> is equal with the self, returns true. Otherwise, returns\nfalse.\n<p><strong>Arguments</strong>:\n<p>(required) <em>other</em>: any …\n"],["==","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-3D-3D","(other)","<p>Same usage as Array#==\n"],["==","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-3D-3D","(other)","<p>Same usage as Array#==\n"],["===","Bio::Relation","Bio/Relation.html#method-i-3D-3D-3D","(rel)","<p>Compare with another Bio::Relation object whether havind same edges and\nsame nodes.  The == method compares …\n"],["Pdb_LString","Bio::PDB::DataType::ConstLikeMethod","Bio/PDB/DataType/ConstLikeMethod.html#method-i-Pdb_LString","(nn)",""],["Pdb_Real","Bio::PDB::DataType::ConstLikeMethod","Bio/PDB/DataType/ConstLikeMethod.html#method-i-Pdb_Real","(fmt)",""],["Pdb_String","Bio::PDB::DataType::ConstLikeMethod","Bio/PDB/DataType/ConstLikeMethod.html#method-i-Pdb_String","(nn)",""],["[]","Bio::AAindex2","Bio/AAindex2.html#method-i-5B-5D","(aa1 = nil, aa2 = nil)","<p>Returns the value of amino acids substitution (aa1 -&gt; aa2).\n"],["[]","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-5B-5D","(*arg)","<p>Gets a sequence. (Like Hash#[])\n"],["[]","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-5B-5D","(x)",""],["[]","Bio::CodonTable","Bio/CodonTable.html#method-c-5B-5D","(i)","<p>Select a codon table by number.  This method will return one of the hard\ncoded codon tables in this class …\n"],["[]","Bio::CodonTable","Bio/CodonTable.html#method-i-5B-5D","(codon)","<p>Translate a codon into a relevant amino acid.  This method is used for\ntranslating a DNA sequence into …\n"],["[]","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-5B-5D","(*arg)",""],["[]","Bio::FANTOM::MaXML::Sequences","Bio/FANTOM/MaXML/Sequences.html#method-i-5B-5D","(*arg)",""],["[]","Bio::FastaNumericFormat","Bio/FastaNumericFormat.html#method-i-5B-5D","(n)","<p>Returns the n-th element. If out of range, returns nil.\n<p><strong>Arguments</strong>:\n<p>(required) <em>n</em>: (Integer) position\n"],["[]","Bio::Feature","Bio/Feature.html#method-i-5B-5D","(key)","<p>Short cut for the Bio::Feature#to_hash\n"],["[]","Bio::Features","Bio/Features.html#method-i-5B-5D","(*arg)","<p>Short cut for the Features#features\n"],["[]","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-c-5B-5D","(*arg)","<p>make a new autodetect object\n"],["[]","Bio::FlatFile::AutoDetect::RuleTemplate","Bio/FlatFile/AutoDetect/RuleTemplate.html#method-c-5B-5D","(*arg)","<p>Creates a new element.\n"],["[]","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-i-5B-5D","(arg)",""],["[]","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-5B-5D","(n)",""],["[]","Bio::Locations","Bio/Locations.html#method-i-5B-5D","(n)","<p>Returns nth Bio::Location object.\n"],["[]","Bio::NucleicAcid::Data","Bio/NucleicAcid/Data.html#method-i-5B-5D","(x)",""],["[]","Bio::PDB","Bio/PDB.html#method-i-5B-5D","(key)","<p>Provides keyed access to the models based on serial number returns nil if\nit&#39;s not there\n"],["[]","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-5B-5D","(key)","<p>get the residue by id.\n<p>Compatibility Note: Now, you cannot find HETATMS in this method. To add\n“LIGAND” …\n"],["[]","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-c-5B-5D","(x,y,z)","<p>same as Vector.\n"],["[]","Bio::PDB::DataType::Pdb_LString","Bio/PDB/DataType/Pdb_LString.html#method-c-5B-5D","(nn)",""],["[]","Bio::PDB::DataType::Pdb_LString","Bio/PDB/DataType/Pdb_LString.html#method-c-5B-5D","(nn)",""],["[]","Bio::PDB::DataType::Pdb_Real","Bio/PDB/DataType/Pdb_Real.html#method-c-5B-5D","(fmt)",""],["[]","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-5B-5D","(nn)","<p>Creates a new module with a string left justified to the length given in nn\n"],["[]","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-5B-5D","(nn)","<p>Creates a new module with a string left justified to the length given in nn\n"],["[]","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-5B-5D","(nn)","<p>Creates a new module with a string left justified to the length given in nn\n"],["[]","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-5B-5D","(nn)","<p>Creates a new module with a string left justified to the length given in nn\n"],["[]","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-5B-5D","(nn)","<p>Creates a new module with a string left justified to the length given in nn\n"],["[]","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-5B-5D","(nn)","<p>Creates a new module with a string left justified to the length given in nn\n"],["[]","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-5B-5D","(nn)","<p>Creates a new module with a string left justified to the length given in nn\n"],["[]","Bio::PDB::Model","Bio/PDB/Model.html#method-i-5B-5D","(key)","<p>Keyed access to chains\n"],["[]","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-5B-5D","(key)","<p>Keyed access to atoms based on atom name e.g. [“CA”]\n"],["[]","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-c-5B-5D","(*args)","<p>Same usage as Array.[]\n"],["[]","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-5B-5D","(*arg)","<p>Same usage as Array#[]\n"],["[]","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-c-5B-5D","(*args)","<p>Same usage as Array.[]\n"],["[]","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-5B-5D","(*arg)","<p>Same usage as Array#[]\n"],["[]=","Bio::CodonTable","Bio/CodonTable.html#method-i-5B-5D-3D","(codon, aa)","<p>Modify the codon table.  Use with caution as it may break hard coded\ntables.  If you want to modify existing …\n"],["[]=","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-i-5B-5D-3D","(key, val)",""],["[]=","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-5B-5D-3D","(n, data)",""],["[]=","Bio::Registry::DB","Bio/Registry/DB.html#method-i-5B-5D-3D","(tag, value)",""],["[]=","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-5B-5D-3D","(*arg)","<p>Not implemented\n"],["[]=","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-5B-5D-3D","(*arg)","<p>Not implemented\n"],["__output_phylip_common","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-__output_phylip_common","(options = {})","<p>common routine for interleaved/non-interleaved phylip format\n"],["__store__","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-__store__","(key, seq)","<p>stores a sequences with the name\n<p>key &mdash; name of the sequence\n<p>seq &mdash; sequence\n"],["aa","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-aa","()",""],["aa","Bio::Sequence","Bio/Sequence.html#method-i-aa","()","<p>Transform the sequence wrapped in the current Bio::Sequence object into a\nBio::Sequence::NA object.  …\n"],["aalen","Bio::FastaFormat","Bio/FastaFormat.html#method-i-aalen","()","<p>Returens the length of Bio::Sequence::AA.\n"],["aalen","Bio::GenPept","Bio/GenPept.html#method-i-aalen","()",""],["aalen","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-aalen","()","<p>Returns length of the amino acid sequence described in the AASEQ lines.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["aalen","Bio::NBRF","Bio/NBRF.html#method-i-aalen","()","<p>Returens the length of protein (amino acids) sequence. If you call aaseq\nfor nucleic acids sequence, …\n"],["aalen","Bio::UniProtKB","Bio/UniProtKB.html#method-i-aalen","()",""],["aaseq","Bio::FastaFormat","Bio/FastaFormat.html#method-i-aaseq","()","<p>Returens the Bio::Sequence::AA.\n"],["aaseq","Bio::GCG::Seq","Bio/GCG/Seq.html#method-i-aaseq","()","<p>If you know the sequence is AA, use this method. Returns a\nBio::Sequence::AA object.\n<p>If you call naseq …\n"],["aaseq","Bio::GenPept","Bio/GenPept.html#method-i-aaseq","()",""],["aaseq","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-aaseq","()","<p>Returns amino acid sequence described in the AASEQ lines.\n<p><strong>Returns</strong> &mdash; Bio::Sequence::AA object\n\n"],["aaseq","Bio::NBRF","Bio/NBRF.html#method-i-aaseq","()","<p>Returens the protein (amino acids) sequence. If you call aaseq for nucleic\nacids sequence, RuntimeError …\n"],["aaseq","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-aaseq","()","<p>gets an amino acid sequence of this chain from ATOM records\n"],["aaseq","Bio::UniProtKB","Bio/UniProtKB.html#method-i-aaseq","()",""],["ab","Bio::MEDLINE","Bio/MEDLINE.html#method-i-ab","()","<p>AB   - Abstract\n\n<pre>Abstract.</pre>\n"],["absolute","Bio::Locations","Bio/Locations.html#method-i-absolute","(n, type = nil)","<p>Converts relative position in the locus to position in the whole of the DNA\nsequence.\n<p>This method can …\n"],["abstract","Bio::MEDLINE","Bio/MEDLINE.html#method-i-abstract","()",""],["ac","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-ac","()","<p>returns a Array of accession numbers in the AC lines.\n<p>AC Line\n\n<pre>&quot;AC   A12345; B23456;&quot;\nAC [AC1;]+</pre>\n"],["ac","Bio::PROSITE","Bio/PROSITE.html#method-i-ac","()","<p>AC  Accession number                   (1 per entry)\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">AC</span>   <span class=\"ruby-constant\">PSnnnnn</span>;\n</pre>\n<p>Returns\n"],["ac","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-ac","()","<p>AC  Accession number                   (1 per entry)\n\n<pre>AC  T00001   in the case of FACTOR\nAC  M00001   in ...</pre>\n"],["acc2hit","Bio::Hinv","Bio/Hinv.html#method-c-acc2hit","(acc)","<p>Bio::Hinv.acc2hit(“BC053657”)  # =&gt; “HIT000053961”\n"],["acc_version","Bio::FastaDefline","Bio/FastaDefline.html#method-i-acc_version","()","<p>Shows accession with version number. If the entry has more than two of such\nIDs, only the first ID are …\n"],["acc_version","Bio::FastaFormat","Bio/FastaFormat.html#method-i-acc_version","()","<p>Returns accession number with version.\n"],["acc_version","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-acc_version","()","<p>Returns the first part of the VERSION record as “ACCESSION.VERSION” String.\n"],["acceptor_score","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-i-acceptor_score","()","<p>Bio::Genescan::Report::Exon#acceptor_score\n<p>“I/Ac” field.\n"],["accession","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-accession","()","<p>returns the first accession number in the AC lines\n"],["accession","Bio::FastaDefline","Bio/FastaDefline.html#method-i-accession","()","<p>Shows an accession number.\n"],["accession","Bio::FastaFormat","Bio/FastaFormat.html#method-i-accession","()","<p>Returns an accession number.\n"],["accession","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-accession","()","<p>the database members entry for this match.\n"],["accession","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-accession","()","<p>Returns the ACCESSION part of the acc_version.\n"],["accession","Bio::PDB","Bio/PDB.html#method-i-accession","()","<p>Same as <code>Bio::PDB#entry_id</code>.\n"],["accessions","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-accessions","()",""],["accessions","Bio::FastaDefline","Bio/FastaDefline.html#method-i-accessions","()","<p>Shows accession numbers. Returns an array of strings.\n"],["accessions","Bio::FastaFormat","Bio/FastaFormat.html#method-i-accessions","()","<p>Parsing FASTA Defline (using #identifiers method), and shows accession\nnumbers. It returns an array of …\n"],["accessions","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-accessions","()","<p>ACCESSION – Returns contents of the ACCESSION record as an Array.\n"],["accessions","Bio::Sequence","Bio/Sequence.html#method-i-accessions","()","<p>accession numbers of the sequence\n<p><strong>Returns</strong> &mdash; Array of String\n\n"],["acos","Bio::PDB::Utils","Bio/PDB/Utils.html#method-c-acos","(x)","<p>acos\n"],["activity","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-activity","()","<p>Biological or chemical activity described in the ACTIVITY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["ad","Bio::MEDLINE","Bio/MEDLINE.html#method-i-ad","()","<p>AD   - Affiliation\n\n<pre>Institutional affiliation and address of the first author, and grant\nnumbers.</pre>\n"],["adapter","Bio::Sequence","Bio/Sequence.html#method-c-adapter","(source_data, adapter_module)","<p>Normally, users should not call this method directly. Use\nBio::*#to_biosequence (e.g. Bio::GenBank#to_biosequence …\n"],["add","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-add","(elem)","<p>Adds a new element. Returns <em>elem</em>.\n"],["add","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-add","(key, val)","<p>methods for writing\n"],["add","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-add","(*arg)",""],["add","Bio::FlatFileIndex::Indexer::NameSpaces","Bio/FlatFileIndex/Indexer/NameSpaces.html#method-i-add","(x)",""],["addAtom","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-addAtom","(atom)","<p>Adds an atom to this residue\n"],["addChain","Bio::PDB::Model","Bio/PDB/Model.html#method-i-addChain","(chain)","<p>Adds a chain to this model\n"],["addLigand","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-addLigand","(ligand)","<p>Add a heterogen (ligand) to this chain\n"],["addModel","Bio::PDB","Bio/PDB.html#method-i-addModel","(model)","<p>Adds a <code>Bio::Model</code> object to the current strucutre. Adds a\nmodel to the current structure. Returns self. …\n"],["addResidue","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-addResidue","(residue)","<p>Add a residue to this chain\n"],["addSolvent","Bio::PDB::Model","Bio/PDB/Model.html#method-i-addSolvent","(solvent)","<p>(OBSOLETE) Adds a solvent molecule to this model\n"],["add_attribute","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-add_attribute","(tag, value)","<p>Adds a new tag-value pair.\n<p><strong>Arguments</strong>:\n<p>(required) <em>tag</em>: String\n"],["add_continuation","Bio::PDB::Record","Bio/PDB/Record.html#method-i-add_continuation","(str)","<p>Internal use only.\n<p>Adds continuation data to the record from str if str is really the\ncontinuation of …\n"],["add_cut_range","Bio::RestrictionEnzyme::Range::SequenceRange","Bio/RestrictionEnzyme/Range/SequenceRange.html#method-i-add_cut_range","( p_cut_left=nil, p_cut_right=nil, c_cut_left=nil, c_cut_right=nil )","<p>If the first object is HorizontalCutRange or VerticalCutRange, that is\nadded to the SequenceRange.   …\n"],["add_cut_ranges","Bio::RestrictionEnzyme::Range::SequenceRange","Bio/RestrictionEnzyme/Range/SequenceRange.html#method-i-add_cut_ranges","(*cut_ranges)","<p>Add a series of CutRange objects (HorizontalCutRange or VerticalCutRange).\n<p><strong>Arguments</strong>\n<p><code>cut_ranges</code>: A series …\n"],["add_cuts_from_cut_ranges","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-add_cuts_from_cut_ranges","(cut_ranges)","<p>Accepts an <code>Array</code> of CutRange type objects and applies them to \n@vc_complement, @vc_primary, and @hc_between_strands. …\n"],["add_defline","Bio::FastaDefline","Bio/FastaDefline.html#method-i-add_defline","(str)","<p>Parses given string and adds parsed data.\n"],["add_edge","Bio::Tree","Bio/Tree.html#method-i-add_edge","(source, target, edge = Edge.new)","<p>Adds a new edge to the tree. Returns the newly added edge. If the edge\nalready exists, it is overwritten …\n"],["add_exclusive","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-add_exclusive","(key, val)",""],["add_header_line","Bio::Blat::Report","Bio/Blat/Report.html#method-i-add_header_line","(line)","<p>Adds a header line if the header data is not yet given and the given line\nis suitable for header. Returns …\n"],["add_header_line","Bio::Fastq","Bio/Fastq.html#method-i-add_header_line","(line)","<p>Adds a header line if the header data is not yet given and the given line\nis suitable for header. Returns …\n"],["add_horizontal_cut_range","Bio::RestrictionEnzyme::Range::SequenceRange","Bio/RestrictionEnzyme/Range/SequenceRange.html#method-i-add_horizontal_cut_range","( left, right=left )","<p>Builds a HorizontalCutRange object and adds it to the SequenceRange.\n<p><strong>Arguments</strong>\n<p><code>left</code>: Left-most cut\n"],["add_line","Bio::Blat::Report","Bio/Blat/Report.html#method-i-add_line","(line)","<p>Adds a line to the entry if the given line is regarded as a part of the\ncurrent entry. If the current …\n"],["add_line","Bio::Fastq","Bio/Fastq.html#method-i-add_line","(line)","<p>Adds a line to the entry if the given line is regarded as a part of the\ncurrent entry.\n"],["add_mapping_as_map","Bio::Map::ActsLikeMap","Bio/Map/ActsLikeMap.html#method-i-add_mapping_as_map","(marker, location = nil)","<p>Description\n<p>Adds a Bio::Map::Mappings object to its array of mappings.\n<p>Usage\n"],["add_mapping_as_marker","Bio::Map::ActsLikeMarker","Bio/Map/ActsLikeMarker.html#method-i-add_mapping_as_marker","(map, location = nil)","<p>Description\n<p>Adds a Bio::Map::Mappings object to its array of mappings.\n<p>Usage\n"],["add_node","Bio::Tree","Bio/Tree.html#method-i-add_node","(node)","<p>Adds a node to the tree. Returns self. If the node already exists, it does\nnothing.\n"],["add_nr","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-add_nr","(key, val)",""],["add_options","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-add_options","(options)","<p>Adds options from given array. Note that existing options will also be\nnormalized.\n<p><strong>Arguments</strong>:\n<p><em>options</em>: …\n"],["add_overwrite","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-add_overwrite","(key, val)",""],["add_record","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-add_record","(str)",""],["add_secondary_namespaces","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-i-add_secondary_namespaces","(*names)",""],["add_seq","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-add_seq","(seq, key = nil)","<p>Adds a sequence to the alignment. Returns key if succeeded. Returns nil\n(and not added to the alignment) …\n"],["add_sequences","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-add_sequences","(seqs)","<p>Adds sequences to the alignment.  <em>seqs</em> may be one of follows: an\narray of sequences (or strings), an …\n"],["add_spacing","Bio::RestrictionEnzyme::StringFormatting","Bio/RestrictionEnzyme/StringFormatting.html#method-i-add_spacing","( seq, cs = cut_symbol )","<p>Return the sequence with spacing for alignment.  Does not add whitespace\naround cut symbols.\n<p>Example: …\n"],["add_taxon","Bio::Nexus::DataBlock","Bio/Nexus/DataBlock.html#method-i-add_taxon","( taxon )","<p>Adds a taxon name to this block.\n<p><strong>Arguments</strong>:\n<p>(required) <em>taxon</em>: String\n"],["add_taxon","Bio::Nexus::TaxaBlock","Bio/Nexus/TaxaBlock.html#method-i-add_taxon","( taxon )","<p>Adds a taxon name to this block.\n<p><strong>Arguments</strong>:\n<p>(required) <em>taxon</em>: String\n"],["add_token","Bio::Nexus::GenericBlock","Bio/Nexus/GenericBlock.html#method-i-add_token","( token )","<p>Adds a token to this.\n<p><strong>Arguments</strong>:\n<p>(required) <em>token</em>: String\n"],["add_tree","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-add_tree","( tree_as_string )","<p>Adds a tree to this block.\n<p><strong>Arguments</strong>:\n<p>(required) <em>tree_as_string</em>: String\n"],["add_tree_name","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-add_tree_name","( tree_name )","<p>Adds a tree name to this block.\n<p><strong>Arguments</strong>:\n<p>(required) <em>tree_name</em>: String\n"],["addindex_bdb","Bio::FlatFileIndex::Indexer","Bio/FlatFileIndex/Indexer.html#method-c-addindex_bdb","(db, flag, need_update, parser, options)",""],["addindex_flat","Bio::FlatFileIndex::Indexer","Bio/FlatFileIndex/Indexer.html#method-c-addindex_flat","(db, mode, need_update, parser, options)",""],["adjacency_matrix","Bio::Tree","Bio/Tree.html#method-i-adjacency_matrix","(nodes = nil, default_value = nil, diagonal_value = nil)","<p>Shows the adjacency matrix representation of the tree. It shows matrix only\nfor given nodes. If <em>nodes</em> …\n"],["adjacent_nodes","Bio::Tree","Bio/Tree.html#method-i-adjacent_nodes","(node)","<p>Returns an array of adjacent nodes of the given node.\n"],["affiliations","Bio::MEDLINE","Bio/MEDLINE.html#method-i-affiliations","()",""],["alias_list","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-alias_list","(db_name)","<p>deprecated\n"],["aliases","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-aliases","(db_abbrev)","<p>Returns an Array containing all alias names for the database. (e.g.\n&#39;hsa&#39; -&gt; [“H.sapiens”, …\n"],["align","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-align","()","<p>This will be deprecated. Instead, please use alignment.\n<p>Gets an multiple alignment. Returns a Bio::Alignment …\n"],["align","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-align","()","<p>This will be deprecated. Instead, please use alignment.\n<p>Gets an multiple alignment. Returns a Bio::Alignment …\n"],["align","Bio::MAFFT::Report","Bio/MAFFT/Report.html#method-i-align","()","<p>This method will be deprecated. Instead, please use alignment.\n<p>Gets an multiple alignment. Returns a  …\n"],["align","Bio::RestrictionEnzyme::DoubleStranded::AlignedStrands","Bio/RestrictionEnzyme/DoubleStranded/AlignedStrands.html#method-c-align","(a, b)","<p>Pad and align two String objects without cut symbols.\n<p>This will look for the sub-sequence without left …\n"],["align","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-align","()","<p>Returns alignments. Returns an Array of arrays. Each array contains\nsequence of seq1, midline, sequence …\n"],["align","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-align","()","<p>Returns alignments. Returns an Array of arrays. This would be a Bio::Spidey\nspecific method.\n"],["align_len","Bio::Blat::Report::SegmentPair","Bio/Blat/Report/SegmentPair.html#method-i-align_len","()","<p>Returns alignment length of the segment pair. Returns nil if no alignment\ndata are available.\n"],["align_len","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-i-align_len","()","<p>Returns alignment length of the segment pair. Returns nil if no alignment\ndata are available.\n"],["align_with_cuts","Bio::RestrictionEnzyme::DoubleStranded::AlignedStrands","Bio/RestrictionEnzyme/DoubleStranded/AlignedStrands.html#method-c-align_with_cuts","(a,b,a_cuts,b_cuts)","<p>Pad and align two String objects with cut symbols.\n<p>Example:\n\n<pre>AlignedStrands.with_cuts(&#39;nngattacannnnn&#39;, ...</pre>\n"],["aligned_strands","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-aligned_strands","()","<p>See AlignedStrands.align\n"],["aligned_strands_with_cuts","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-aligned_strands_with_cuts","()","<p>See AlignedStrands.align_with_cuts\n"],["alignment","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-i-alignment","(method = nil)","<p>Gets an multiple alignment. Returns a Bio::Alignment object.\n<code>method</code> should be one of :naseq, :aaseq, …\n"],["alignment","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-i-alignment","(method = nil)","<p>Gets an multiple alignment. Returns a Bio::Alignment object.\n<code>method</code> should be one of :naseq, :aaseq, …\n"],["alignment","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-i-alignment","(method = nil)","<p>Gets an multiple alignment. Returns a Bio::Alignment object.\n<code>method</code> should be one of :naseq, :aaseq, …\n"],["alignment","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-alignment","()","<p>Gets an multiple alignment. Returns a Bio::Alignment object.\n"],["alignment","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-alignment","()","<p>Gets an multiple alignment. Returns a Bio::Alignment object.\n"],["alignment","Bio::GCG::Msf","Bio/GCG/Msf.html#method-i-alignment","()","<p>returns Bio::Alignment object.\n"],["alignment","Bio::MAFFT::Report","Bio/MAFFT/Report.html#method-i-alignment","(method = nil)","<p>Gets an multiple alignment. Returns a Bio::Alignment object.\n"],["alignment","Bio::Phylip::PhylipFormat","Bio/Phylip/PhylipFormat.html#method-i-alignment","()","<p>Gets the alignment. Returns a Bio::Alignment object.\n"],["alignment_collect","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_collect","()","<p>Iterates over each sequence and results running blocks are collected and\nreturns a new alignment as a …\n"],["alignment_collect","Bio::Alignment::HashExtension","Bio/Alignment/HashExtension.html#method-i-alignment_collect","()","<p>Iterates over each sequence and each results running block are collected\nand returns a new alignment …\n"],["alignment_collect","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-alignment_collect","()","<p>Iterates over each sequence and each results running block are collected\nand returns a new alignment. …\n"],["alignment_concat","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_concat","(align)","<p>Concatenates the given alignment. <em>align</em> must have\n<code>each_seq</code> or <code>each</code> method.\n<p>Returns self.\n<p>Note that it is …\n"],["alignment_concat","Bio::Alignment::HashExtension","Bio/Alignment/HashExtension.html#method-i-alignment_concat","(align)","<p>Concatenates the given alignment. If <em>align</em> is a Hash (or\nSequenceHash), sequences of same keys are concatenated. …\n"],["alignment_length","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_length","()","<p>Returns the alignment length. Returns the longest length of the sequence in\nthe alignment.\n"],["alignment_lstrip!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_lstrip-21","()","<p>Removes excess gaps in the head of the sequences. If removes nothing,\nreturns nil. Otherwise, returns …\n"],["alignment_normalize!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_normalize-21","()","<p>Fills gaps to the tail of each sequence if the length of the sequence is\nshorter than the alignment length. …\n"],["alignment_rstrip!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_rstrip-21","()","<p>Removes excess gaps in the tail of the sequences. If removes nothing,\nreturns nil. Otherwise, returns …\n"],["alignment_site","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_site","(position)","<p>Gets a site of the position. Returns a Bio::Alignment::Site object.\n<p>If the position is out of range, it …\n"],["alignment_slice","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_slice","(*arg)","<p>Returns the specified range of the alignment. For each sequence, the\n&#39;slice&#39; method (it may be …\n"],["alignment_strip!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_strip-21","()","<p>Removes excess gaps in the sequences. If removes nothing, returns nil.\nOtherwise, returns self.\n<p>Note that …\n"],["alignment_subseq","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_subseq","(*arg)","<p>For each sequence, the &#39;subseq&#39; method\n(Bio::Seqeunce::Common#subseq is expected) is executed, …\n"],["alignment_window","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-alignment_window","(*arg)","<p>Returns specified range of the alignment. For each sequence, the\n&#39;[]&#39; method (it may be String#[] …\n"],["all_reac","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-all_reac","()","<p>ALL_REAC &#39;;&#39;\n"],["alpha","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-alpha","()","<p>Return codeml alpha of model, when available\n"],["altid","Bio::FANTOM::MaXML::Sequence","Bio/FANTOM/MaXML/Sequence.html#method-i-altid","(t = nil)",""],["always_check=","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-always_check-3D","(bool)","<p>high level methods\n"],["always_check_consistency","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-always_check_consistency","(bool)","<p>If true, consistency checks will be performed every time accessing\nflatfiles. If nil/false, no checks …\n"],["always_check_consistency=","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-always_check_consistency-3D","(bool)","<p>If true is given, consistency checks will be performed every time accessing\nflatfiles. If nil/false, …\n"],["ancestors","Bio::Tree","Bio/Tree.html#method-i-ancestors","(node, root = nil)","<p>Gets all ancestral nodes of the <em>node</em>. If <em>root</em> isn&#39;t\nspecified or <em>root</em> is <code>nil</code>, @root is used. Returns …\n"],["annotations","Bio::FANTOM::MaXML::Sequence","Bio/FANTOM/MaXML/Sequence.html#method-i-annotations","()",""],["append","Bio::Feature","Bio/Feature.html#method-i-append","(a)","<p>Appends a Qualifier object to the Feature.\n<p><strong>Arguments</strong>:\n<p>(required) <em>qualifier</em>: Bio::Feature::Qualifier object …\n"],["append","Bio::Features","Bio/Features.html#method-i-append","(a)","<p>Appends a Feature object to Features.\n<p><strong>Arguments</strong>:\n<p>(required) <em>feature</em>: Bio::Feature object\n"],["append","Bio::Pathway","Bio/Pathway.html#method-i-append","(rel, add_rel = true)","<p>Add an Bio::Relation object &#39;rel&#39; to the @graph and @relations. If\nthe second argument is false, …\n"],["append","Bio::References","Bio/References.html#method-i-append","(reference)","<p>Add a Bio::Reference object to the container.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">refs</span>.<span class=\"ruby-identifier\">append</span>(<span class=\"ruby-identifier\">reference</span>)\n</pre>\n<p><strong>Arguments</strong>:\n"],["append_hsp","Bio::HMMER::Report::Hit","Bio/HMMER/Report/Hit.html#method-i-append_hsp","(hsp)","<p>Appends a Bio::HMMER::Report::Hsp object.\n"],["array_to_string","Bio::Nexus::Util","Bio/Nexus/Util.html#method-c-array_to_string","( ary )","<p>Returns string as array separated by “ ”.\n<p><strong>Arguments</strong>:\n<p>(required) <em>ary</em>: Array\n"],["assoc","Bio::Feature","Bio/Feature.html#method-i-assoc","()","<p>Returns a Hash constructed from qualifier objects.\n"],["at_content","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-at_content","()","<p>Calculate the ratio of AT / ATGC bases. U is regarded as T.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atggcgtga&#39;)\nputs ...</pre>\n"],["at_skew","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-at_skew","()","<p>Calculate the ratio of (A - T) / (A + T) bases. U is regarded as T.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atgttgttgttc&#39;) ...</pre>\n"],["atom_seq","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-atom_seq","()","<p>for backward compatibility\n"],["atoms","Bio::PDB::AtomFinder","Bio/PDB/AtomFinder.html#method-i-atoms","()","<p>returns all atoms\n"],["attribute","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-attribute","(tag)",""],["attributes_to_hash","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-attributes_to_hash","()","<p>Returns hash representation of attributes.\n<p>Note: If two or more tag-value pairs with same tag names exist, …\n"],["au","Bio::MEDLINE","Bio/MEDLINE.html#method-i-au","()","<p>AU   - Author Name\n\n<pre>Authors&#39; names.</pre>\n"],["author","Bio::AAindex","Bio/AAindex.html#method-i-author","()","<p>Returns authors in the A line.\n"],["author","Bio::LITDB","Bio/LITDB.html#method-i-author","()","<p>AUTHOR\n"],["authors","Bio::MEDLINE","Bio/MEDLINE.html#method-i-authors","()",""],["authors","Bio::PDB","Bio/PDB.html#method-i-authors","()","<p>Get authors in “AUTHOR”.\n"],["auto","Bio::AAindex","Bio/AAindex.html#method-c-auto","(str)","<p>Auto detecter for two AAindex formats. returns a Bio::AAindex1 object or a\nBio::AAindex2 object.\n"],["auto","Bio::FlatFile","Bio/FlatFile.html#method-c-auto","(*arg, &block)","<p>Same as Bio::FlatFile.open(nil, filename_or_stream, mode, perm, options).\n<p>Example 1\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FlatFile</span>.<span class=\"ruby-identifier\">auto</span>(<span class=\"ruby-constant\">ARGF</span>)\n</pre>\n"],["auto","Bio::Sequence","Bio/Sequence.html#method-i-auto","()","<p>Guess the type of sequence, Amino Acid or Nucleic Acid, and create a  new\nsequence object (Bio::Sequence::AA …\n"],["auto","Bio::Sequence","Bio/Sequence.html#method-c-auto","(str)","<p>Given a sequence String, guess its type, Amino Acid or Nucleic Acid, and\nreturn a new Bio::Sequence object …\n"],["autodetect","Bio::FlatFile","Bio/FlatFile.html#method-i-autodetect","(lines = 31, ad = AutoDetect.default)","<p>Performs determination of database class (file format). Pre-reads\n<code>lines</code> lines for format determination …\n"],["autodetect","Bio::FlatFile","Bio/FlatFile.html#method-c-autodetect","(text)","<p>Detects database class (== file format) of given string. If fails to\ndetermine, returns false or nil. …\n"],["autodetect","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-autodetect","(text, meta = {})","<p>Autodetect from the text. Returns a database class if succeeded. Returns\nnil if failed.\n"],["autodetect_file","Bio::FlatFile","Bio/FlatFile.html#method-c-autodetect_file","(filename)","<p>Detects database class (== file format) of given file. If fails to\ndetermine, returns nil.\n"],["autodetect_flatfile","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-autodetect_flatfile","(ff, lines = 31)","<p>autodetect from the FlatFile object. Returns a database class if succeeded.\nReturns nil if failed.\n"],["autodetect_io","Bio::FlatFile","Bio/FlatFile.html#method-c-autodetect_io","(io)","<p>Detects database class (== file format) of given input stream. If fails to\ndetermine, returns nil. Caution: …\n"],["autodetect_stream","Bio::FlatFile","Bio/FlatFile.html#method-c-autodetect_stream","(io)","<p>This is OBSOLETED. Please use autodetect_io(io) instead.\n"],["ba","Bio::TRANSFAC::MATRIX","Bio/TRANSFAC/MATRIX.html#method-i-ba","()","<p>BA      Statistical basis\n"],["basecount","Bio::GenBank","Bio/GenBank.html#method-i-basecount","(base = nil)","<p>BASE COUNT (this field is obsoleted after GenBank release 138.0) – Returns\nthe BASE COUNT as a Hash …\n"],["bc","Bio::TRANSFAC::GENE","Bio/TRANSFAC/GENE.html#method-i-bc","()","<p>BC      Bucher promoter\n"],["bdb_open","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-bdb_open","(*bdbarg)",""],["bellman_ford","Bio::Pathway","Bio/Pathway.html#method-i-bellman_ford","(root)","<p>Bellman-Ford method for solving the single-source shortest-paths problem in\nthe graph in which edge weights …\n"],["bf","Bio::TRANSFAC::CLASS","Bio/TRANSFAC/CLASS.html#method-i-bf","()","<p>BF      Factors belonging to this class\n"],["bf","Bio::TRANSFAC::MATRIX","Bio/TRANSFAC/MATRIX.html#method-i-bf","()","<p>BF      List of linked factor entries\n"],["bf","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-bf","()",""],["bfs","Bio::Pathway","Bio/Pathway.html#method-i-bfs","(root)","<p>Alias for the breadth_first_search method.\n"],["bfs_shortest_path","Bio::Pathway","Bio/Pathway.html#method-i-bfs_shortest_path","(node1, node2)","<p>Calculates the shortest path between two nodes by using\nbreadth_first_search method and returns steps …\n"],["bgcolor","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-bgcolor","()","<p>Deprecated. Same as self.graphics.bgcolor (additional nil checks may be\nneeded).\n<p>background color (String …\n"],["bgcolor=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-bgcolor-3D","(val)","<p>Deprecated. Same as self.graphics.bgcolor= (additional nil checks may be\nneeded).\n"],["bibitem","Bio::Reference","Bio/Reference.html#method-i-bibitem","(item = nil)","<p>Returns reference formatted in the bibitem style\n\n<pre># ref is a Bio::Reference object\nputs ref.bibitem\n\n  ...</pre>\n"],["bibtex","Bio::Reference","Bio/Reference.html#method-i-bibtex","(section = nil, label = nil, keywords = {})","<p>Returns reference formatted in the BiBTeX style.\n\n<pre># ref is a Bio::Reference object\nputs ref.bibtex\n\n  @article{PMID:12345678, ...</pre>\n"],["bit_score","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-bit_score","()","<p>Returns first hsp&#39;s bit score. (shown in hit list of BLAST result)\n"],["bit_score","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-bit_score","()",""],["bit_score","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-bit_score","()","<p>Bit score\n"],["blast","Bio::FastaFormat","Bio/FastaFormat.html#method-i-blast","(factory)",""],["block_count","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-block_count","()","<p>Number of blocks(exons, segment pairs).\n"],["block_it","Bio::SiRNA::ShRNA","Bio/SiRNA/ShRNA.html#method-i-block_it","(method = 'piGENE')","<p>same as design(&#39;BLOCK-iT&#39;). method can be one of &#39;piGENE&#39;\n(default) and &#39;BLOCK-iT&#39;. …\n"],["block_sizes","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-block_sizes","()","<p>Sizes of all blocks(exons, segment pairs). Returns an array of numbers.\n"],["blocks","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-blocks","()","<p>Returns blocks(exons, segment pairs) of the hit. Returns an array of\nBio::Blat::Report::SegmentPair objects. …\n"],["blunt?","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-blunt-3F","()","<p>Returns <code>true</code> if the cut pattern creates blunt fragments.\n(opposite of sticky)\n"],["bootstrap=","Bio::Tree::Node","Bio/Tree/Node.html#method-i-bootstrap-3D","(num)","<p>sets a bootstrap value\n"],["bootstrap_string=","Bio::Tree::Node","Bio/Tree/Node.html#method-i-bootstrap_string-3D","(str)","<p>sets a bootstrap value from a string\n"],["both_intron","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-c-both_intron","(prev_e, e, aln)","<p>Parses part of sim4 result text and creates a new SegmentPair object for\nregions which can not be aligned …\n"],["breadth_first_search","Bio::Pathway","Bio/Pathway.html#method-i-breadth_first_search","(root)","<p>Breadth first search solves steps and path to the each node and forms a\ntree contains all reachable vertices …\n"],["bs","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-bs","()","<p>BS      Bound sites (site accession no.; site ID; quality: N; biological BS\nspecies)\n"],["bs","Bio::TRANSFAC::GENE","Bio/TRANSFAC/GENE.html#method-i-bs","()","<p>BS      TRANSFAC SITE positions and accession numbers\n"],["cache_all","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-cache_all","()",""],["calc_checksum","Bio::GCG::Seq","Bio/GCG/Seq.html#method-c-calc_checksum","(str)","<p>Calculates checksum from given string.\n"],["calculatePlane","Bio::PDB::Utils","Bio/PDB/Utils.html#method-c-calculatePlane","(coord1, coord2, coord3)","<p>calculates plane\n"],["call","Bio::Command::Tmpdir::Remover","Bio/Command/Tmpdir/Remover.html#method-i-call","(*args)","<p>Internal use only. Users should not call this method.\n"],["call_command","Bio::Command","Bio/Command.html#method-i-call_command","(cmd, options = {})","<p>Executes the program. Automatically select popen for Ruby 1.9 or Windows\nenvironment and fork for the …\n"],["call_command_fork","Bio::Command","Bio/Command.html#method-i-call_command_fork","(cmd, options = {})","<p>This method is internally called from the call_command method. In normal\ncase, use call_command, and …\n"],["call_command_open3","Bio::Command","Bio/Command.html#method-i-call_command_open3","(cmd)","<p>Executes the program via Open3.popen3 A block must be given. IO objects are\npassed to the block.\n<p>You would …\n"],["call_command_popen","Bio::Command","Bio/Command.html#method-i-call_command_popen","(cmd, options = {}, &block)","<p>This method is internally called from the call_command method. In normal\ncase, use call_command, and …\n"],["cc","Bio::EMBL","Bio/EMBL.html#method-i-cc","()","<p>returns comment text in the comments (CC) line.\n<p>CC Line; comments of notes (&gt;=0)\n"],["cc","Bio::PROSITE","Bio/PROSITE.html#method-i-cc","()","<p>CC  Comments                           (&gt;=0 per entry)\n\n<pre>CC   /QUALIFIER=data; /QUALIFIER=data; .......</pre>\n"],["cc","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-cc","()",""],["cc","Bio::UniProtKB","Bio/UniProtKB.html#method-i-cc","(topic = nil)","<p>returns contents in the CC lines.\n<p>Bio::UniProtKB#cc -&gt; Hash\n\n<p>returns an object of contents in the TOPIC …\n"],["cd","Bio::TRANSFAC::CELL","Bio/TRANSFAC/CELL.html#method-i-cd","()","<p>CD   Cell description\n"],["cdna_rep_h_invitational","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-cdna_rep_h_invitational","()",""],["cdna_splicing_isoform_curation","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-cdna_splicing_isoform_curation","()",""],["cds_start","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-cds_start","()",""],["cds_stop","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-cds_stop","()",""],["cell","Bio::Reference","Bio/Reference.html#method-i-cell","()","<p>Returns reference formatted in the  CELL Press style.\n\n<pre># ref is a Bio::Reference object\nputs ref.cell\n ...</pre>\n"],["centreOfGravity","Bio::PDB::Utils","Bio/PDB/Utils.html#method-i-centreOfGravity","()","<p>calculates centre of gravitiy\n"],["chains","Bio::PDB::ChainFinder","Bio/PDB/ChainFinder.html#method-i-chains","()","<p>returns all chains\n"],["check","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-check","()",""],["check","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-check","()",""],["check_all","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-check_all","()",""],["check_consistency","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-check_consistency","()","<p>Check consistency between the databank(index) and original flat files.\n<p>If the original flat files are …\n"],["check_consistency","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-check_consistency","()",""],["check_options","Bio::Meme::Mast","Bio/Meme/Mast.html#method-i-check_options","()","<p>Checks if input/database files exist and options are valid\n<p><strong>Raises</strong> &mdash; ArgumentError if the motifs file does …\n"],["chi_square","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-chi_square","()","<p>Report the chi square of the entire table\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["chi_square_element","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-chi_square_element","(i, j)","<p>Report the chi-square relation of two elements in the table\n<p><strong>Arguments</strong>\n<p><code>i</code>: row\n"],["child_nodes","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-child_nodes","(node = 'genes')",""],["children","Bio::Tree","Bio/Tree.html#method-i-children","(node, root = nil)","<p>Gets the adjacent children nodes of the <em>node</em>. If <em>root</em>\nisn&#39;t specified or <em>root</em> is <code>nil</code>, @root is used. …\n"],["chose_sort_proc","Bio::FlatFileIndex::Indexer","Bio/FlatFileIndex/Indexer.html#method-c-chose_sort_proc","(prog, mode = :new, env = nil, env_args = nil)",""],["chromosome","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-chromosome","()","<p>Chromosome described in the POSITION line.\n<p><strong>Returns</strong> &mdash; String or nil\n\n"],["chromosomes","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-chromosomes","()","<p>CHROMOSOME – Returns contents of the CHROMOSOME records as an Array of\nHash.\n"],["circular","Bio::GenBank","Bio/GenBank.html#method-i-circular","()",""],["circular","Bio::GenPept","Bio/GenPept.html#method-i-circular","()",""],["cl","Bio::TRANSFAC::CLASS","Bio/TRANSFAC/CLASS.html#method-i-cl","()","<p>CL      Class\n"],["cl","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-cl","()","<p>CL      Classification (class accession no.; class identifier; decimal  CL \nclassification number.) …\n"],["classes","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-classes","()","<p>CLASS\n"],["classes","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-classes","()","<p>Return classes when available. For M3 it parses\n<p>dN/dS (w) for site classes (K=3) p:   0.56413  0.35613 …\n"],["classification","Bio::GenBank","Bio/GenBank.html#method-i-classification","()","<p>Taxonomy classfication. Returns an array of strings.\n"],["classification","Bio::PDB","Bio/PDB.html#method-i-classification","()","<p>Classification in “HEADER”.\n"],["clean_all","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-clean_all","()","<p>remove nil values, remove duplicate values, and  sort @vc_primary,\n@vc_complement, and @hc_between_strands …\n"],["clear","Bio::Tree","Bio/Tree.html#method-i-clear","()","<p>Clears all nodes and edges. Returns self. Note that options and root are\nalso cleared.\n"],["clear_node","Bio::Tree","Bio/Tree.html#method-i-clear_node","(node)","<p>Removes all edges connected with the node. Returns self. If the node does\nnot exist, raises IndexError …\n"],["clear_relations!","Bio::Pathway","Bio/Pathway.html#method-i-clear_relations-21","()","<p>Clear @relations array to reduce the memory usage.\n"],["clique","Bio::Pathway","Bio/Pathway.html#method-i-clique","()","<p>Not implemented yet.\n"],["cliquishness","Bio::Pathway","Bio/Pathway.html#method-i-cliquishness","(node)","<p>Returns completeness of the edge density among the surrounded nodes.\n<p>Calculates the value of cliquishness …\n"],["cloneids","Bio::FANTOM::MaXML::Sequences","Bio/FANTOM/MaXML/Sequences.html#method-i-cloneids","()",""],["close","Bio::FlatFile","Bio/FlatFile.html#method-i-close","()","<p>Closes input stream. (similar to IO#close)\n"],["close","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-close","()","<p>Closes the IO object if possible\n"],["close","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-close","()","<p>Closes the databank. Returns nil.\n"],["close","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-close","()",""],["close","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-i-close","()",""],["close","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-close","()",""],["close","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-close","()",""],["close","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-close","()",""],["close","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-close","()",""],["close","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-close","()",""],["close","Bio::FlatFileIndex::Template::NameSpace","Bio/FlatFileIndex/Template/NameSpace.html#method-i-close","()",""],["close!","Bio::Command::Tmpdir","Bio/Command/Tmpdir.html#method-i-close-21","()","<p>Removes the temporary directory.\n<p><strong>Returns</strong> &mdash; nil\n\n"],["close_all","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-close_all","()",""],["close_all","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-close_all","()",""],["close_flatfile","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-i-close_flatfile","()",""],["closed?","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-closed-3F","()","<p>Returns true if already closed. Otherwise, returns false.\n"],["cn","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-cn","()","<p>CN      Cell specificity (negative)\n"],["co","Bio::TRANSFAC::GENE","Bio/TRANSFAC/GENE.html#method-i-co","()","<p>CO      COMPEL accession number\n"],["codes","Bio::Sequence::AA","Bio/Sequence/AA.html#method-i-codes","()","<p>Generate the list of the names of each residue along with the sequence (3\nletters code).  Codes used …\n"],["codon_usage","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-codon_usage","(codon = nil)","<p>Codon usage data described in the CODON_USAGE lines. (Deprecated: no more\nexists)\n<p><strong>Returns</strong> &mdash; Hash\n\n"],["codon_usage","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-codon_usage","()","<p>Returns counts of each codon in the sequence in a hash.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atggcgtga&#39;)\nputs s.codon_usage ...</pre>\n"],["cofactors","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-cofactors","()","<p>COFACTOR\n"],["collect!","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-collect-21","()","<p>Iterates over each sequence, replacing the sequence with the value returned\nby the block.\n"],["collect_align","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-collect_align","()",""],["collect_each_site","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-collect_each_site","()","<p>Iterates over each site of the alignment and results running the block are\ncollected and returns an array. …\n"],["collect_edge!","Bio::Tree","Bio/Tree.html#method-i-collect_edge-21","()","<p>Replaces each edge by each block&#39;s return value. Returns self.\n"],["collect_node!","Bio::Tree","Bio/Tree.html#method-i-collect_node-21","()","<p>Replaces each node by each block&#39;s return value. Returns self.\n"],["cols","Bio::AAindex2","Bio/AAindex2.html#method-i-cols","()","<p>Returns col labels.\n"],["column_sum","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-column_sum","(j)","<p>Report the sum of all values in a given column\n<p><strong>Arguments</strong>\n<p><code>j</code>: Column to sum\n"],["column_sum_all","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-column_sum_all","()","<p>Report the sum of all values in all columns.\n<p>This is the same thing as asking for the sum of all values …\n\n"],["comment","Bio::AAindex","Bio/AAindex.html#method-i-comment","()","<p>Returns comment (if any).\n"],["comment","Bio::EMBL","Bio/EMBL.html#method-i-comment","()",""],["comment","Bio::FastaFormat","Bio/FastaFormat.html#method-i-comment","()","<p>Returns comments.\n"],["comment","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-comment","()","<p>COMMENT\n"],["comment","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-comment","()","<p>COMMENT lines.\n<p><strong>Returns</strong> &mdash; String\n\n"],["comment","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-comment","()","<p>COMMENT\n"],["comment","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-comment","()","<p>COMMENT – Returns contents of the COMMENT record as a String.\n"],["comment","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-comment","()","<p>COMMENT\n"],["comment","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-comment","()","<p>COMMENT – Returns contents of the COMMENT record as a String.\n"],["comment","Bio::PROSITE","Bio/PROSITE.html#method-i-comment","()",""],["comment","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-comment","()",""],["comment_only?","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-comment_only-3F","()","<p>Returns true if the entry is empty except for comment. Otherwise, returns\nfalse.\n"],["comments","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-comments","()","<p>“comments” is deprecated. Instead, use “comment”.\n"],["comments","Bio::GFF::Record","Bio/GFF/Record.html#method-i-comments","()","<p>“comments” is deprecated. Instead, use “comment”.\n"],["comments=","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-comments-3D","(str)","<p>“comments=” is deprecated. Instead, use “comment=”.\n"],["comments=","Bio::GFF::Record","Bio/GFF/Record.html#method-i-comments-3D","(str)","<p>“comments=” is deprecated. Instead, use “comment=”.\n"],["common_name","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-common_name","()",""],["common_subgraph","Bio::Pathway","Bio/Pathway.html#method-i-common_subgraph","(graph)","<p>Not implemented yet.\n"],["compact","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-compact","()","<p>Removes empty sequences or nil and returns new alignment. (Like\nArray#compact)\n"],["compact!","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-compact-21","()","<p>Removes empty sequences or nil in the alignment. (Like Array#compact!)\n"],["compcheck","Bio::GCG::Msf","Bio/GCG/Msf.html#method-i-compcheck","()","<p>CompCheck field\n"],["complement","Bio::Location","Bio/Location.html#method-i-complement","()","<p>Complements the sequence location (i.e. alternates the strand). Note that\nit is destructive method (i.e. …\n"],["complement","Bio::RestrictionEnzyme::DoubleStranded::CutLocations","Bio/RestrictionEnzyme/DoubleStranded/CutLocations.html#method-i-complement","()","<p>Returns an <code>Array</code> of locations of cuts on the complementary\nstrand\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["complement","Bio::RestrictionEnzyme::Fragments","Bio/RestrictionEnzyme/Fragments.html#method-i-complement","()",""],["complement","Bio::SangerChromatogram","Bio/SangerChromatogram.html#method-i-complement","()","<p>Returns a new chromatogram object of the appropriate subclass (scf or abi)\nwhere the  sequence, traces …\n"],["complement","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-complement","()","<p>Alias for Bio::Sequence::NA#reverse_complement\n"],["complement!","Bio::SangerChromatogram","Bio/SangerChromatogram.html#method-i-complement-21","()","<p>Reverses and complements the current chromatogram object including its\nsequence, traces and qualities …\n"],["complement!","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-complement-21","()","<p>Alias for Bio::Sequence::NA#reverse_complement!\n"],["complement?","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-complement-3F","()","<p>Returns true if the hit reports &#39;-&#39;(complemental) strand search\nresult. Otherwise, return false …\n"],["complement?","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-complement-3F","()","<p>Returns true if the result reports &#39;Reverse complement&#39;. Otherwise,\nreturn false or nil. This …\n"],["complement_to_array_index","Bio::RestrictionEnzyme::DoubleStranded::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/DoubleStranded/CutLocationsInEnzymeNotation.html#method-i-complement_to_array_index","()","<p>Returns <code>Array</code> of locations of cuts on the complementary \nstrand in 0-based array index notation.\n<p><strong>Arguments</strong> …\n"],["composition","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-composition","()","<p>COMPOSITION\n"],["composition","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-composition","()","<p>Returns a hash of the occurrence counts for each residue or base.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atgc&#39;)\nputs ...</pre>\n"],["compounds","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-compounds","()","<p>COMPOUND\n"],["compounds","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-compounds","()",""],["compounds","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-compounds","()",""],["compounds_as_hash","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-compounds_as_hash","()","<p>Compounds described in the COMPOUND lines.\n<p><strong>Returns</strong> &mdash; Hash of compound ID and its definition\n\n"],["compounds_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-compounds_as_hash","()","<p>Compounds described in the COMPOUND lines.\n<p><strong>Returns</strong> &mdash; Hash of compound ID and its definition\n\n"],["compounds_as_strings","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-compounds_as_strings","()","<p>Compounds described in the COMPOUND lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["compounds_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-compounds_as_strings","()","<p>Compounds described in the COMPOUND lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["concat","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-concat","(aln)","<p>Concatenates a string or an alignment. Returns self.\n<p>Note that the method will be obsoleted. Please use …\n"],["concat","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-concat","(ary)","<p>Same usage as Array#concat\n"],["concat","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-concat","(ary)","<p>Same usage as Array#concat\n"],["concat","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-concat","(*arg)","<p>Add new data to the end of the current sequence. The original sequence is\nmodified.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atgc&#39;) ...</pre>\n"],["concat","Bio::Tree","Bio/Tree.html#method-i-concat","(other)","<p>Concatenates the other tree. If the same edge exists, the edge in\n<em>other</em> is used. Returns self. The result …\n"],["conect","Bio::PDB::ChemicalComponent","Bio/PDB/ChemicalComponent.html#method-i-conect","()","<p>Returns an hash of bindings of atoms. Note that each white spaces are\nstripped for atom symbols.\n"],["config","Bio::Meme::Mast","Bio/Meme/Mast.html#method-i-config","(options)","<p>Builds the command line string any options passed in will be merged with\nDEFAULT_OPTIONS Mast usage: …\n"],["consensus_each_site","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-consensus_each_site","(opt = {})","<p>Helper method for calculating consensus sequence. It iterates over each\nsite of the alignment. In each …\n"],["consensus_iupac","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-consensus_iupac","(opt = {})","<p>Returns the IUPAC consensus string of the alignment of nucleic-acid\nsequences.\n<p>It resembles the BioPerl&#39;s …\n"],["consensus_iupac","Bio::Alignment::SiteMethods","Bio/Alignment/SiteMethods.html#method-i-consensus_iupac","()","<p>Returns an IUPAC consensus base for the site. If consensus is found, eturns\na single-letter string.  …\n"],["consensus_string","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-consensus_string","(threshold = 1.0, opt = {})","<p>Returns the consensus string of the alignment. 0.0 &lt;= threshold &lt;=\n1.0 is expected.\n<p>It resembles …\n"],["consensus_string","Bio::Alignment::SiteMethods","Bio/Alignment/SiteMethods.html#method-i-consensus_string","(threshold = 1.0)","<p>Returns consensus character of the site. If consensus is found, eturns a\nsingle-letter string. If not, …\n"],["contains_marker?","Bio::Map::ActsLikeMap","Bio/Map/ActsLikeMap.html#method-i-contains_marker-3F","(marker)","<p>Checks whether a Bio::Map::Marker is mapped to this Bio::Map::SimpleMap.\n<p><strong>Arguments</strong>:\n<p><em>marker</em>: a Bio::Map::Marker …\n"],["contingency_coefficient","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-contingency_coefficient","()","<p>Report the contingency coefficient of the table\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["continue?","Bio::PDB::Record","Bio/PDB/Record.html#method-c-continue-3F","()","<p>Returns true if this record has a field type which allows  continuations.\n"],["continue?","Bio::PDB::Record","Bio/PDB/Record.html#method-i-continue-3F","()","<p>Returns true if this record has a field type which allows  continuations.\n"],["control_avg","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-control_avg","()",""],["control_sd","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-control_sd","()",""],["control_var","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-control_var","()",""],["converged?","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-converged-3F","()","<p>(PSI-BLAST) Same as <code>iterations.last.converged?</code>. Returns true\nif the last iteration is converged, otherwise, …\n"],["converged?","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-converged-3F","()","<p>(PSI-BLAST) Returns true if the iteration is converged. Otherwise, returns\nfalse.\n"],["convert","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-i-convert","(data, inputformat, format)","<p>Data format conversion.\n<p>Example:\n\n<pre>t = Bio::TogoWS::REST.new\nblast_string = File.read(&#39;test.blastn&#39;)\nt.convert(blast_string, ...</pre>\n"],["convert","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-c-convert","(*arg)","<p>The same as Bio::TogoWS::REST#convert.\n"],["convert_match","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-convert_match","(match_char = '.')","<p>This is the BioPerl&#39;s AlignI::match like method.\n<p>Changes second to last sequences&#39; sites to match_char …\n"],["convert_nothing","Bio::Sequence::QualityScore::Converter","Bio/Sequence/QualityScore/Converter.html#method-i-convert_nothing","(scores)","<p>Does nothing and simply returns the given argument.\n<p><strong>Arguments</strong>:\n<p>(required) <em>scores</em>: (Array containing Integer …\n"],["convert_scores_from_phred_to_solexa","Bio::Sequence::QualityScore::Converter","Bio/Sequence/QualityScore/Converter.html#method-i-convert_scores_from_phred_to_solexa","(scores)","<p>Converts PHRED scores to Solexa scores.\n<p>The values may be truncated or incorrect if overflows/underflows …\n"],["convert_scores_from_solexa_to_phred","Bio::Sequence::QualityScore::Converter","Bio/Sequence/QualityScore/Converter.html#method-i-convert_scores_from_solexa_to_phred","(scores)","<p>Converts Solexa scores to PHRED scores.\n<p>The values may be truncated if overflows/underflows occurred during …\n"],["convert_to_xyz","Bio::PDB::Utils","Bio/PDB/Utils.html#method-c-convert_to_xyz","(obj)","<p>Implicit conversion into Vector or Bio::PDB::Coordinate\n"],["convert_unmatch","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-convert_unmatch","(match_char = '.')","<p>This is the BioPerl&#39;s AlignI::unmatch like method.\n<p>Changes second to last sequences&#39; sites match_char …\n"],["copy","Bio::CodonTable","Bio/CodonTable.html#method-c-copy","(i)","<p>Similar to Bio::CodonTable but returns a copied codon table. You can modify\nthe codon table without influencing …\n"],["correlation_coefficient","Bio::AAindex1","Bio/AAindex1.html#method-i-correlation_coefficient","()","<p>Returns correlation_coefficient (Hash) in the C line.\n<p>cf.) {&#39;ABCD12010203&#39; =&gt; 0.999, &#39;CDEF123456&#39; …\n"],["count","Bio::NCBI::REST::ESearch::Methods","Bio/NCBI/REST/ESearch/Methods.html#method-i-count","(db, term, hash = {})","<p>count(“nucleotide”, “tardigrada”) count(“pubmed”, “tardigrada”) …\n"],["cp","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-cp","()","<p>CP      Cell specificity (positive)\n"],["crc64","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-crc64","()","<p>CRC64 checksum of query sequence.\n"],["create","Bio::FlatFileIndex::Flat_1::Record","Bio/FlatFileIndex/Flat_1/Record.html#method-c-create","(size, key, val)",""],["create_action_at","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-create_action_at","( offset )","<p>Takes a RestrictionEnzyme object and a numerical offset to the sequence and\nreturns an EnzymeAction …\n"],["create_bins","Bio::RestrictionEnzyme::Range::SequenceRange","Bio/RestrictionEnzyme/Range/SequenceRange.html#method-i-create_bins","(cc)","<p>Example:\n\n<pre>cc = Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts.new(@size)\ncc.add_cuts_from_cut_ranges(@cut_ranges) ...</pre>\n"],["create_config_file","Bio::PAML::Codeml","Bio/PAML/Codeml.html#method-c-create_config_file","(parameters, filename)","<p>OBSOLETE. This method will soon be removed. Instead, use\ncreate_control_file(parameters, filename).\n"],["create_control_file","Bio::PAML::Codeml","Bio/PAML/Codeml.html#method-c-create_control_file","(parameters, filename)","<p>Obsolete. This method will be removed in the future. Helper method for\ncreating a codeml control file. …\n"],["create_cut_locations","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-create_cut_locations","(raw_cl)",""],["create_definition_hash","Bio::PDB::Record","Bio/PDB/Record.html#method-c-create_definition_hash","()","<p>creates definition hash from current classes constants\n"],["create_enzyme_actions","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-i-create_enzyme_actions","( sequence, *args )","<p>Creates an array of EnzymeActions based on the DNA sequence and supplied\nenzymes.\n<p><strong>Arguments</strong>\n<p><code>sequence</code>:  …\n"],["create_primary_and_complement","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-create_primary_and_complement","(primary_seq, p_cuts, c_cuts)",""],["cu_list","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-cu_list","()","<p>Codon usage data described in the CODON_USAGE lines as an array.\n<p><strong>Returns</strong> &mdash; Array\n\n"],["current","Bio::Reference","Bio/Reference.html#method-i-current","()","<p>Returns reference formatted in the Current Biology  (current-biology.com)\nstyle. (Same as the Genome …\n"],["custom_raise","Bio::SOFT","Bio/SOFT.html#method-i-custom_raise","( line_number_with_0_based_indexing, msg )",""],["cut","Bio::RestrictionEnzyme","Bio/RestrictionEnzyme.html#method-c-cut","( sequence, enzymes )","<p>See Bio::RestrictionEnzyme::Analysis.cut\n"],["cut","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-c-cut","( sequence, *args )","<p>See cut instance method\n"],["cut","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-i-cut","( sequence, *args )","<p>See main documentation for Bio::RestrictionEnzyme\n<p><code>cut</code> takes into account permutations of cut variations …\n"],["cut_and_return_by_permutations","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-i-cut_and_return_by_permutations","( sequence, *args )","<p>See cut instance method\n<p><strong>Arguments</strong>\n<p><code>sequence</code>: <code>String</code> kind of object that will be used\nas a nucleic acid sequence. …\n"],["cut_symbol","Bio::RestrictionEnzyme::CutSymbol","Bio/RestrictionEnzyme/CutSymbol.html#method-i-cut_symbol","()","<p>Get the token that&#39;s used as the cut symbol in a restriction enzyme\nsequece\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["cut_symbol","Bio::RestrictionEnzyme::CutSymbol::CutSymbol__","Bio/RestrictionEnzyme/CutSymbol/CutSymbol__.html#method-c-cut_symbol","()",""],["cut_symbol=","Bio::RestrictionEnzyme::CutSymbol::CutSymbol__","Bio/RestrictionEnzyme/CutSymbol/CutSymbol__.html#method-c-cut_symbol-3D","(glyph)",""],["cut_with_enzyme","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-cut_with_enzyme","(*args)","<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">seq</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Sequence</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">NA</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;gaattc&#39;</span>)\n<span class=\"ruby-identifier\">cuts</span> = <span class=\"ruby-identifier\">seq</span>.<span class=\"ruby-identifier\">cut_with_enzyme</span>(<span class=\"ruby-string\">&#39;EcoRI&#39;</span>)\n</pre>\n<p><em>or</em>\n"],["cut_with_enzymes","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-cut_with_enzymes","(*args)",""],["cut_without_permutations","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-c-cut_without_permutations","( sequence, *args )","<p>See cut_without_permutations instance method\n"],["cut_without_permutations","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-i-cut_without_permutations","( sequence, *args )","<p>See main documentation for Bio::RestrictionEnzyme\n<p>Bio::RestrictionEnzyme.cut is preferred over this!\n<p>USE …\n"],["dN_dS","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-dN_dS","()",""],["dN_dS","Bio::PAML::Codeml::PositiveSite","Bio/PAML/Codeml/PositiveSite.html#method-i-dN_dS","()","<p>Return dN/dS (or omega) for this codon\n"],["data","Bio::Abif","Bio/Abif.html#method-i-data","(name, tag_number = 1)","<p>Returns the data for the name. If not found, returns nil.\n<p><strong>Arguments</strong>:\n<p>(required) <em>name</em>: (String) name of …\n"],["data","Bio::FastaNumericFormat","Bio/FastaNumericFormat.html#method-i-data","()","<p>Returns the list of the numerical data (typically the quality score of its\ncorresponding sequence) as …\n"],["data_class","Bio::EMBL","Bio/EMBL.html#method-i-data_class","()",""],["data_source","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-data_source","()",""],["data_source","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-data_source","()","<p>DATA_SOURCE – Returns contents of the DATA_SOURCE record as a String.\n"],["data_source_coverage","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-data_source_coverage","()",""],["data_source_db_reference_protein_motif_id","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-data_source_db_reference_protein_motif_id","()",""],["data_source_definition","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-data_source_definition","()",""],["data_source_homologous_species","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-data_source_homologous_species","()",""],["data_source_identity","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-data_source_identity","()",""],["data_source_similarity_category","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-data_source_similarity_category","()",""],["database","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-database","(db_abbrev = nil)","<p>Returns a hash containing DB definition section of the keggtab file. If\ndatabase name is given as an …\n"],["database_description","Bio::Blast::Remote::Information","Bio/Blast/Remote/Information.html#method-i-database_description","(program, db)","<p>Returns a short description of given database.\n<p>Note: see the note of databases method.\n<p><strong>Arguments</strong>:\n"],["databases","Bio::Blast::Remote::Information","Bio/Blast/Remote/Information.html#method-i-databases","(program)","<p>Returns a list of available databases for given program.\n<p>Note: It parses remote sites to obtain database …\n"],["databases","Bio::Fetch","Bio/Fetch.html#method-i-databases","()","<p>Using this method, the user can ask a dbfetch server what databases it\nsupports. This would normally …\n"],["datasrc","Bio::FANTOM::MaXML::Annotation","Bio/FANTOM/MaXML/Annotation.html#method-i-datasrc","()",""],["date","Bio::GenBank","Bio/GenBank.html#method-i-date","()",""],["date","Bio::GenPept","Bio/GenPept.html#method-i-date","()",""],["date","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-date","()","<p>Date for computation.\n"],["date","Bio::MEDLINE","Bio/MEDLINE.html#method-i-date","()",""],["date","Bio::PROSITE","Bio/PROSITE.html#method-i-date","()",""],["date","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-date","()",""],["date_created","Bio::EMBL","Bio/EMBL.html#method-i-date_created","()","<p>created date. Returns Date object, String or nil.\n"],["date_modified","Bio::EMBL","Bio/EMBL.html#method-i-date_modified","()","<p>modified date. Returns Date object, String or nil.\n"],["date_modified","Bio::GenBank","Bio/GenBank.html#method-i-date_modified","()","<p>modified date. Returns Date object, String or nil.\n"],["db","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-db","()","<p>Returns the name (filename or title) of the database.\n"],["db","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-db","()","<p>Returns the name (filename or title) of the database.\n"],["db","Bio::Registry","Bio/Registry.html#method-i-db","(dbname)",""],["db_by_abbrev","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-db_by_abbrev","(db_abbrev)","<p>deprecated\n"],["db_ids","Bio::GO::External2go","Bio/GO/External2go.html#method-i-db_ids","()","<p>Returns ary of database IDs.\n"],["db_len","Bio::Blast::Report","Bio/Blast/Report.html#method-i-db_len","()","<p>Length of BLAST db\n"],["db_num","Bio::Blast::Report","Bio/Blast/Report.html#method-i-db_num","()","<p>Number of sequences in BLAST db\n"],["db_path","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-db_path","(db_name)","<p>deprecated\n"],["db_path_by_abbrev","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-db_path_by_abbrev","(db_abbrev)","<p>deprecated\n"],["dbclass=","Bio::FlatFile","Bio/FlatFile.html#method-i-dbclass-3D","(klass)","<p>Sets database class. Plese use only if autodetect fails.\n"],["dbclasses","Bio::FlatFile::AutoDetect::RuleProc","Bio/FlatFile/AutoDetect/RuleProc.html#method-i-dbclasses","()","<p>database classes (lazy evaluation)\n"],["dbclasses","Bio::FlatFile::AutoDetect::RuleRegexp","Bio/FlatFile/AutoDetect/RuleRegexp.html#method-i-dbclasses","()","<p>returns database classes\n"],["dblinks","Bio::AAindex","Bio/AAindex.html#method-i-dblinks","()","<p>Returns database links in the R line. cf.) [&#39;LIT:123456&#39;,\n&#39;PMID:12345678&#39;]\n"],["dblinks","Bio::EMBL","Bio/EMBL.html#method-i-dblinks","()","<p>database references (DR). Returns an array of Bio::Sequence::DBLink\nobjects.\n"],["dblinks","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-dblinks","()",""],["dblinks","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-dblinks","()",""],["dblinks","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-dblinks","()",""],["dblinks","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-dblinks","()",""],["dblinks","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-dblinks","()",""],["dblinks","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-dblinks","()",""],["dblinks","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-dblinks","()",""],["dblinks_as_hash","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_hash","Bio::KEGG::Common::DblinksAsHash","Bio/KEGG/Common/DblinksAsHash.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_hash","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_hash","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_hash","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_hash","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_hash","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-dblinks_as_hash","()","<p>Returns a Hash of the DB name and an Array of entry IDs in DBLINKS field.\n"],["dblinks_as_strings","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-dblinks_as_strings","()","<p>DBLINKS\n"],["dblinks_as_strings","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-dblinks_as_strings","()","<p>List of database names and IDs, described in the DBLINKS lines.\n<p><strong>Returns</strong> &mdash; Array containing String objects …\n\n"],["dblinks_as_strings","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-dblinks_as_strings","()","<p>DBLINKS\n"],["dblinks_as_strings","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-dblinks_as_strings","()","<p>Links to other databases described in the DBLINKS lines.\n<p><strong>Returns</strong> &mdash; Array containing String objects\n\n"],["dblinks_as_strings","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-dblinks_as_strings","()","<p>DBLINKS\n"],["dblinks_as_strings","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-dblinks_as_strings","()","<p>Returns an Array of a database name and entry IDs in DBLINKS field.\n"],["dblinks_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-dblinks_as_strings","()","<p>Returns an Array of a database name and entry IDs in DBLINKS field.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["dbref","Bio::PDB","Bio/PDB.html#method-i-dbref","(chainID = nil)","<p>Gets DBREF records. Returns an array of Bio::PDB::Record::DBREF objects.\n<p>If <em>chainID</em> is given, it returns …\n"],["dbs","Bio::GO::External2go","Bio/GO/External2go.html#method-i-dbs","()","<p>Returns ary of databases.\n"],["dbsource","Bio::GenPept","Bio/GenPept.html#method-i-dbsource","()","<p>DBSOURCE\n"],["de","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-de","()","<p>returns a String int the DE line.\n<p>DE Line\n"],["de","Bio::PROSITE","Bio/PROSITE.html#method-i-de","()","<p>DE  Short description                  (1 per entry)\n\n<pre>DE   Description.</pre>\n<p>Returns\n"],["de","Bio::TRANSFAC::GENE","Bio/TRANSFAC/GENE.html#method-i-de","()","<p>DE\n"],["de","Bio::TRANSFAC::MATRIX","Bio/TRANSFAC/MATRIX.html#method-i-de","()","<p>DE      Short factor description\n"],["de","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-de","()",""],["def_rec","Bio::PDB::Record","Bio/PDB/Record.html#method-c-def_rec","(*ary)","<p>Creates new class by given field definition The difference from\nnew_direct() is the class created by …\n"],["default","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-c-default","()","<p>returns the default autodetect object\n"],["default=","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-c-default-3D","(ad)","<p>sets the default autodetect object.\n"],["default_email","Bio::NCBI","Bio/NCBI.html#method-c-default_email","()","<p>Gets default email address for Entrez (eUtils).\n<p><strong>Returns</strong> &mdash; String or nil\n\n"],["default_email=","Bio::NCBI","Bio/NCBI.html#method-c-default_email-3D","(str)","<p>Sets default email address used for Entrez (eUtils). It may also be used\nfor other NCBI services.\n<p>In  …\n"],["default_namespaces","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-default_namespaces","()","<p>Returns default namespaces. Returns an array of strings or nil. nil means\nall namespaces.\n"],["default_namespaces=","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-default_namespaces-3D","(names)","<p>Set default namespaces. <code>default_namespaces = nil</code> means all\nnamespaces in the databank.\n<p><code>default_namespaces=</code> …\n"],["default_parser","Bio::PSORT::PSORT1::Report","Bio/PSORT/PSORT1/Report.html#method-c-default_parser","(output_report)","<p>Returns aBio::PSORT::PSORT1::Report.\n"],["default_parser","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-c-default_parser","(ent, entry_id = nil)","<p>Parser for the default report format. “psort report&#39;&#39; output.\n"],["default_tool","Bio::NCBI","Bio/NCBI.html#method-c-default_tool","()","<p>Gets default tool name for Entrez (eUtils).\n<p><strong>Returns</strong> &mdash; String or nil\n\n"],["default_tool=","Bio::NCBI","Bio/NCBI.html#method-c-default_tool-3D","(str)","<p>Sets default tool name for Entrez (eUtils). It may also be used for other\nNCBI services.\n<p>In www.ncbi.nlm.nih.gov/books/NBK25497 …\n"],["definition","Bio::AAindex","Bio/AAindex.html#method-i-definition","()","<p>Returns definition in the D line.\n"],["definition","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-definition","()","<p>Returns definition of the hit.\n"],["definition","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-definition","()",""],["definition","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-definition","()",""],["definition","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-definition","()","<p>Definition of the entry, described in the DEFINITION line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["definition","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-definition","()","<p>DEFINITION – Returns contents of the DEFINITION record as a String.\n"],["definition","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-definition","()","<p>Definition of the module, described in the DEFINITION line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["definition","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-definition","()","<p>Returns DEFINITION field of the entry.\n"],["definition","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-definition","()",""],["definition","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-definition","()","<p>Definition of the reaction, described in the DEFINITION line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["definition","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-definition","()","<p>DEFINITION – Returns contents of the DEFINITION record as a String.\n"],["definition","Bio::PDB","Bio/PDB.html#method-i-definition","()","<p>Title of this entry in “TITLE”.\n"],["definition","Bio::PROSITE","Bio/PROSITE.html#method-i-definition","()",""],["definition","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-definition","()",""],["definition","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-definition","()",""],["delete","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-delete","(key)","<p>Removes the sequence whose key is <em>key</em>. Returns the removed\nsequence. If not found, returns nil.\n"],["delete","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-delete","(key)","<p>Delete the given option.\n<p><strong>Arguments</strong>:\n<p><em>key</em>: option name as a string, e.g. &#39;m&#39;, &#39;p&#39;, or\n&#39;-m&#39;, …\n"],["delete","Bio::Pathway","Bio/Pathway.html#method-i-delete","(rel)","<p>Remove an edge indicated by the Bio::Relation object &#39;rel&#39; from the\n@graph and the @relations. …\n"],["delete","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-delete","(elem)","<p>Same usage as Array#delete\n"],["delete","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-delete","(elem)","<p>Same usage as Array#delete\n"],["delete_attribute","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-delete_attribute","(tag, value)","<p>Removes a specific tag-value pair.\n<p>Note that if two or more tag-value pairs found, only the first tag-value …\n"],["delete_attributes","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-delete_attributes","(tag)","<p>Removes all attributes with the specified tag.\n<p><strong>Arguments</strong>:\n<p>(required) <em>tag</em>: String\n"],["depth_first_search","Bio::Pathway","Bio/Pathway.html#method-i-depth_first_search","()","<p>Depth first search yields much information about the structure of the graph\nespecially on the classification …\n"],["descendents","Bio::Tree","Bio/Tree.html#method-i-descendents","(node, root = nil)","<p>Gets all descendent nodes of the <em>node</em>. If <em>root</em> isn&#39;t\nspecified or <em>root</em> is <code>nil</code>, @root is used. Returns …\n"],["descr","Bio::PAML::Codeml::Report","Bio/PAML/Codeml/Report.html#method-i-descr","()","<p>Give a short description of the models, for example &#39;M0-3&#39;\n"],["description","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-description","()",""],["description","Bio::FastaDefline","Bio/FastaDefline.html#method-i-description","()","<p>Shows description.\n"],["description","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-description","()","<p>the database mambers description for this match.\n"],["description","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-description","()","<p>Description of the pathway, described in the DESCRIPTION line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["descriptions","Bio::FastaDefline","Bio/FastaDefline.html#method-i-descriptions","()","<p>Returns descriptions.\n"],["design","Bio::SiRNA","Bio/SiRNA.html#method-i-design","(rule = 'uitei')","<p>rule can be one of &#39;uitei&#39; (default) and &#39;reynolds&#39;.\n"],["design","Bio::SiRNA::ShRNA","Bio/SiRNA/ShRNA.html#method-i-design","(method = 'BLOCK-iT')","<p>only the &#39;BLOCK-iT&#39; rule is implemented for now.\n"],["dfs","Bio::Pathway","Bio/Pathway.html#method-i-dfs","()","<p>Alias for the depth_first_search method.\n"],["dfs_topological_sort","Bio::Pathway","Bio/Pathway.html#method-i-dfs_topological_sort","()","<p>Topological sort of the directed acyclic graphs (“dags”) by using\ndepth_first_search.\n"],["dihedral_angle","Bio::PDB::Utils","Bio/PDB/Utils.html#method-c-dihedral_angle","(coord1, coord2, coord3, coord4)","<p>Calculates dihedral angle.\n"],["dijkstra","Bio::Pathway","Bio/Pathway.html#method-i-dijkstra","(root)","<p>Dijkstra method to solve the shortest path problem in the weighted graph.\n"],["directed","Bio::Pathway","Bio/Pathway.html#method-i-directed","()","<p>Changes the internal state of the graph from &#39;undirected&#39; to\n&#39;directed&#39; and re-generate …\n"],["directed?","Bio::Pathway","Bio/Pathway.html#method-i-directed-3F","()","<p>Returns true or false respond to the internal state of the graph.\n"],["direction","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-direction","()",""],["disease","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-disease","()","<p>DISEASE – Returns contents of the COMMENT record as a String.\n"],["diseases","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-diseases","()","<p>DISEASE\n"],["diseases","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-diseases","()",""],["diseases","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-diseases","()",""],["diseases_as_hash","Bio::KEGG::Common::DiseasesAsHash","Bio/KEGG/Common/DiseasesAsHash.html#method-i-diseases_as_hash","()","<p>Returns a Hash of the disease ID and its definition\n"],["diseases_as_hash","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-diseases_as_hash","()","<p>Returns a Hash of the disease ID and its definition\n"],["diseases_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-diseases_as_hash","()","<p>Returns a Hash of the disease ID and its definition\n"],["diseases_as_strings","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-diseases_as_strings","()","<p>Diseases described in the DISEASE lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["diseases_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-diseases_as_strings","()","<p>Disease described in the DISEASE lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["distance","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-distance","(object2)","<p>distance between <em>object2</em>.\n"],["distance","Bio::PDB::Utils","Bio/PDB/Utils.html#method-c-distance","(coord1, coord2)","<p>Calculates distance between <em>coord1</em> and <em>coord2</em>.\n"],["distance","Bio::Tree","Bio/Tree.html#method-i-distance","(node1, node2)","<p>Returns distance between node1 and node2. It would raise error if the edges\ndidn&#39;t contain distance …\n"],["distance=","Bio::Tree::Edge","Bio/Tree/Edge.html#method-i-distance-3D","(num)","<p>set evolutionary distance value\n"],["distance_matrix","Bio::Tree","Bio/Tree.html#method-i-distance_matrix","(nodes = nil)","<p>Calculates distance matrix of given nodes. If <em>nodes</em> is nil, or is\nommited, it acts the same as tree.distance_matrix …\n"],["distance_string=","Bio::Tree::Edge","Bio/Tree/Edge.html#method-i-distance_string-3D","(str)","<p>set evolutionary distance value from a string\n"],["divent","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-c-divent","(entry)","<p>Divides entry body\n"],["division","Bio::EMBL","Bio/EMBL.html#method-i-division","()","<p>returns DIVISION in the ID line.\n<p>Bio::EMBL#division -&gt; String\n\n"],["division","Bio::GenBank","Bio/GenBank.html#method-i-division","()",""],["division","Bio::GenPept","Bio/GenPept.html#method-i-division","()",""],["division","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-division","()","<p>Division of the entry, described in the ENTRY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["division","Bio::PROSITE","Bio/PROSITE.html#method-i-division","()","<p>Returns\n"],["dna","Bio::DAS","Bio/DAS.html#method-i-dna","(dsn, entry_point, start, stop)",""],["dna","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-dna","()","<p>Returns a new sequence object with any &#39;u&#39; bases changed to\n&#39;t&#39;. The original sequence …\n"],["dna!","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-dna-21","()","<p>Changes any &#39;u&#39; bases in the original sequence to &#39;t&#39;. The\noriginal sequence is modified. …\n"],["do_align","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-do_align","(factory)","<p>Performs multiple alignment by using external program.\n"],["do_parse","Bio::PDB::Record","Bio/PDB/Record.html#method-i-do_parse","()","<p>In order to speeding up processing of PDB file format, fields have not been\nparsed before calling this …\n"],["do_parse","Bio::PDB::Record::ATOM","Bio/PDB/Record/ATOM.html#method-i-do_parse","()",""],["doi","Bio::MEDLINE","Bio/MEDLINE.html#method-i-doi","()","<p>AID  - Article Identifier\n\n<pre>Article ID values may include the pii (controlled publisher identifier)\nor doi ...</pre>\n"],["donor_score","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-i-donor_score","()","<p>Bio::Genescan::Report::Exon#donor_score\n<p>“Do/T” field.\n"],["down_regulated","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-down_regulated","(num=20, threshold=nil)",""],["dp","Bio::MEDLINE","Bio/MEDLINE.html#method-i-dp","()","<p>DP   - Publication Date\n\n<pre>The date the article was published.</pre>\n"],["dr","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-dr","()","<p>returns contents in the DR line.\n<p>Bio::EMBLDB::Common#dr  -&gt; [ &lt;Database cross-reference Hash&gt;* …\n\n"],["dr","Bio::PROSITE","Bio/PROSITE.html#method-i-dr","()","<p>DR  Cross-references to SWISS-PROT     (&gt;=0 per entry)\n\n<pre>DR   AC_NB, ENTRY_NAME, C; AC_NB, ENTRY_NAME, ...</pre>\n"],["dr","Bio::TRANSFAC::CLASS","Bio/TRANSFAC/CLASS.html#method-i-dr","()","<p>DR      PROSITE accession numbers\n"],["dr","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-dr","()","<p>DR  Cross-references to other databases     (&gt;=0 per entry)\n"],["dr","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-dr","()","<p>DR  Cross-references to other databases     (&gt;=0 per entry)\n"],["dr","Bio::UniProtKB","Bio/UniProtKB.html#method-i-dr","(key = nil)","<p>Bio::UniProtKB#dr\n"],["drug_targets_as_strings","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-drug_targets_as_strings","()","<p>Drug targets described in the DRUG_TARGET lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["dt","Bio::EMBL","Bio/EMBL.html#method-i-dt","(key=nil)","<p>returns contents in the date (DT) line.\n<p>Bio::EMBL#dt  -&gt; &lt;DT Hash&gt;\n\n<p>where &lt;DT Hash&gt; is:\n"],["dt","Bio::PROSITE","Bio/PROSITE.html#method-i-dt","()","<p>DT  Date                               (1 per entry)\n\n<pre>DT   MMM-YYYY (CREATED); MMM-YYYY (DATA UPDATE); ...</pre>\n"],["dt","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-dt","()","<p>DT  Date                               (1 per entry)\n\n<pre>DT  DD.MM.YYYY (created); ewi.\nDT  DD.MM.YYYY (updated); ...</pre>\n"],["dt","Bio::UniProtKB","Bio/UniProtKB.html#method-i-dt","(key = nil)","<p>returns a Hash of information in the DT lines.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> <span class=\"ruby-value\">keys:</span> \n  [<span class=\"ruby-string\">&#39;created&#39;</span>, <span class=\"ruby-string\">&#39;sequence&#39;</span>, <span class=\"ruby-string\">&#39;annotation&#39;</span>]\n</pre>\n<p>Since …\n"],["dump_list","Bio::Pathway","Bio/Pathway.html#method-i-dump_list","()","<p>Pretty printer of the adjacency list.\n<p>Useful when you want to check the internal state of the adjacency …\n"],["dump_matrix","Bio::Pathway","Bio/Pathway.html#method-i-dump_matrix","(*arg)","<p>Pretty printer of the adjacency matrix.\n<p>The dump_matrix method accepts the same arguments as to_matrix. …\n"],["dump_parameters","Bio::PAML::Common","Bio/PAML/Common.html#method-i-dump_parameters","()","<p>Shows parameters (content of control file) as a string. The string can be\nused for control file.\n<p><strong>Returns</strong> … &mdash; "],["dup","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-dup","()","<p>Duplicates the alignment\n"],["each","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-each","()","<p>Iterates over each sequence. (Like Array#each)\n"],["each","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-each","()",""],["each","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-each","()","<p>Iterates over each hsp(high-scoring segment pair) of the hit. Yields a\nBio::Blast::Default::Report::HSP …\n"],["each","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-each","()","<p>Iterates over each hit of the iteration. Yields a\nBio::Blast::Default::Report::Hit object.\n"],["each","Bio::Blast::Fastacmd","Bio/Blast/Fastacmd.html#method-i-each","()",""],["each","Bio::Blast::Report","Bio/Blast/Report.html#method-i-each","()",""],["each","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-each","()","<p>Iterates on each Hsp object.\n"],["each","Bio::Blast::Report::Iteration","Bio/Blast/Report/Iteration.html#method-i-each","()","<p>Iterates on each Bio::Blast::Report::Hit object.\n"],["each","Bio::Blat::Report","Bio/Blat/Report.html#method-i-each","()",""],["each","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-each","()","<p>Iterates over each block(exon, segment pair) of the hit.\n\n<pre>Yields a Bio::Blat::Report::SegmentPair object.</pre>\n"],["each","Bio::CodonTable","Bio/CodonTable.html#method-i-each","(&block)","<p>Iterates on codon table hash.\n\n<pre>table = Bio::CodonTable[1]\ntable.each do |codon, aa|\n  puts &quot;#{codon} -- ...</pre>\n"],["each","Bio::DAS::ENTRY_POINT","Bio/DAS/ENTRY_POINT.html#method-i-each","()",""],["each","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-each","()",""],["each","Bio::FANTOM::MaXML::Sequences","Bio/FANTOM/MaXML/Sequences.html#method-i-each","()",""],["each","Bio::Fasta::Report","Bio/Fasta/Report.html#method-i-each","()","<p>Iterates on each Bio::Fasta::Report::Hit object.\n"],["each","Bio::FastaNumericFormat","Bio/FastaNumericFormat.html#method-i-each","()","<p>Yields on each elements of the numerical data.\n<p><strong>Yields</strong> &mdash; (Integer) a numerical data element\n<p><strong>Returns</strong> &mdash; (undefined) …\n"],["each","Bio::Feature","Bio/Feature.html#method-i-each","(arg = nil)","<p>Iterates on each qualifier object.\n<p><strong>Arguments</strong>:\n<p>(optional) <em>key</em>: if specified, only iterates over qualifiers …\n"],["each","Bio::Features","Bio/Features.html#method-i-each","(arg = nil)","<p>Iterates on each feature object.\n<p><strong>Arguments</strong>:\n<p>(optional) <em>key</em>: if specified, only iterates over features with …\n"],["each","Bio::FlatFile","Bio/FlatFile.html#method-i-each","()",""],["each","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-each","()",""],["each","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-each","()","<p>export/import/edit data\n"],["each","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-i-each","()",""],["each","Bio::FlatFileIndex::Results","Bio/FlatFileIndex/Results.html#method-i-each","()","<p>Iterates over each result (string). Same as to_a.each.\n"],["each","Bio::HMMER::Report","Bio/HMMER/Report.html#method-i-each","()","<p>Iterates each hit (Bio::HMMER::Report::Hit).\n"],["each","Bio::HMMER::Report::Hit","Bio/HMMER/Report/Hit.html#method-i-each","()","<p>Iterates on each Hsp object (Bio::HMMER::Report::Hsp).\n"],["each","Bio::Locations","Bio/Locations.html#method-i-each","()","<p>Iterates on each Bio::Location object.\n"],["each","Bio::Meme::Mast::Report","Bio/Meme/Mast/Report.html#method-i-each","()","<p>Iterates each motif (Bio::Meme::Motif)\n"],["each","Bio::PDB","Bio/PDB.html#method-i-each","()","<p>Iterates over each model. Iterates over each of the models in the\nstructure. Returns <code>self</code>.\n"],["each","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-each","()","<p>Iterates over each residue\n"],["each","Bio::PDB::Model","Bio/PDB/Model.html#method-i-each","()","<p>Iterates over each chain\n"],["each","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-each","()","<p>Iterator over the atoms\n"],["each","Bio::REBASE","Bio/REBASE.html#method-i-each","()","<p>Calls <em>block</em> once for each element in <code>@data</code> hash,\npassing that element as a parameter.\n<p><strong>Arguments</strong>\n<p>Accepts …\n"],["each","Bio::References","Bio/References.html#method-i-each","()","<p>Iterate through Bio::Reference objects.\n\n<pre>refs.each do |reference|\n  ...\nend</pre>\n<p><strong>Block</strong> &mdash; yields each Bio::Reference …\n"],["each","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-each","()","<p>Same usage as Array#each\n"],["each","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-each","(&block)","<p>Same usage as Array#each\n"],["each","Bio::Sim4::Report","Bio/Sim4/Report.html#method-i-each","()",""],["each","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-each","()","<p>Iterates over each exon of the hit. Yields a Bio::Sim4::Report::SegmentPair\nobject.\n"],["each","Bio::Spidey::Report","Bio/Spidey/Report.html#method-i-each","()",""],["each","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-each","()","<p>Iterates over each exon of the hit. Yields Bio::Spidey::Report::SegmentPair\nobject.\n"],["each_atom","Bio::PDB::AtomFinder","Bio/PDB/AtomFinder.html#method-i-each_atom","()","<p>iterates over each atom\n"],["each_atom","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-each_atom","()","<p>Alias to override AtomFinder#each_atom\n"],["each_cds","Bio::EMBL","Bio/EMBL.html#method-i-each_cds","()","<p>iterates on CDS features in the FT lines.\n"],["each_cds","Bio::GenBank","Bio/GenBank.html#method-i-each_cds","()","<p>FEATURES – Iterate only for the &#39;CDS&#39; portion of the Bio::Features.\n"],["each_chain","Bio::PDB::ChainFinder","Bio/PDB/ChainFinder.html#method-i-each_chain","()","<p>iterates over each chain\n"],["each_chain","Bio::PDB::Model","Bio/PDB/Model.html#method-i-each_chain","()","<p>Alias to override ChainFinder#each_chain\n"],["each_edge","Bio::Tree","Bio/Tree.html#method-i-each_edge","()","<p>Iterates over each edges of this tree.\n"],["each_edge_in_path","Bio::Tree","Bio/Tree.html#method-i-each_edge_in_path","(node1, node2)","<p>Iterates over each edge from node1 to node2. The result is unspecified for\ncyclic trees.\n"],["each_entry","Bio::Blast::Fastacmd","Bio/Blast/Fastacmd.html#method-i-each_entry","()","<p>Iterates over <em>all</em> sequences in the database.\n\n<pre>fastacmd.each_entry do |fasta|\n  p [ fasta.definition[0..30], ...</pre>\n"],["each_entry","Bio::FlatFile","Bio/FlatFile.html#method-i-each_entry","()","<p>Iterates over each entry in the flatfile.\n<p>Example\n\n<pre>include Bio\nff = FlatFile.open(GenBank, &quot;genbank/gbhtg14.seq&quot;) ...</pre>\n"],["each_files","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-each_files","()",""],["each_gene","Bio::EMBL","Bio/EMBL.html#method-i-each_gene","()","<p>iterates on gene features in the FT lines.\n"],["each_gene","Bio::GenBank","Bio/GenBank.html#method-i-each_gene","()","<p>FEATURES – Iterate only for the &#39;gene&#39; portion of the\nBio::Features.\n"],["each_hetatm","Bio::PDB::HetatmFinder","Bio/PDB/HetatmFinder.html#method-i-each_hetatm","()","<p>iterates over each HETATM\n"],["each_heterogen","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-each_heterogen","()","<p>Iterates over each hetero-compound\n"],["each_heterogen","Bio::PDB::HeterogenFinder","Bio/PDB/HeterogenFinder.html#method-i-each_heterogen","()","<p>iterates over each heterogens\n"],["each_hit","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-each_hit","()","<p>Iterates over each hit of the last iteration. Same as\n<code>iterations.last.each_hit</code>. Yields a\nBio::Blast::Default::Report::Hit …\n"],["each_hit","Bio::Blast::Report","Bio/Blast/Report.html#method-i-each_hit","()","<p>Iterates on each Bio::Blast::Report::Hit object of the the last Iteration.\nShortcut for the last iteration&#39;s …\n"],["each_hit","Bio::Blat::Report","Bio/Blat/Report.html#method-i-each_hit","()","<p>Iterates over each Bio::Blat::Report::Hit object. Same as hits.each.\n"],["each_hit","Bio::HMMER::Report","Bio/HMMER/Report.html#method-i-each_hit","()",""],["each_hit","Bio::Sim4::Report","Bio/Sim4/Report.html#method-i-each_hit","()","<p>Iterates over each hits of the sim4 result. Same as hits.each. Yields a\nBio::Sim4::Report::Hit object. …\n"],["each_hit","Bio::Spidey::Report","Bio/Spidey/Report.html#method-i-each_hit","()","<p>Iterates over each hits. Same as hits.each. Yields a\nBio::Spidey::Report::Hit object.\n"],["each_hsp","Bio::HMMER::Report::Hit","Bio/HMMER/Report/Hit.html#method-i-each_hsp","()",""],["each_iteration","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-each_iteration","()","<p>(PSI-BLAST) Iterates over each iteration. Same as\n<code>iterations.each</code>. Yields a\nBio::Blast::Default::Report::Iteration …\n"],["each_iteration","Bio::Blast::Report","Bio/Blast/Report.html#method-i-each_iteration","()","<p>Iterates on each Bio::Blast::Report::Iteration object. (for blastpgp)\n"],["each_model","Bio::PDB","Bio/PDB.html#method-i-each_model","()","<p>Alias needed for Bio::PDB::ModelFinder\n"],["each_motif","Bio::Meme::Mast::Report","Bio/Meme/Mast/Report.html#method-i-each_motif","()",""],["each_names","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-each_names","()",""],["each_node","Bio::Tree","Bio/Tree.html#method-i-each_node","()","<p>Iterates over each node of this tree.\n"],["each_out_edge","Bio::Tree","Bio/Tree.html#method-i-each_out_edge","(source)","<p>Iterates over each connected edges of the given node. Returns self.\n<p>The reason why the method name is …\n"],["each_pair","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-each_pair","()","<p>Iterates over each key and sequence. (Like Hash#each_pair)\n"],["each_residue","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-each_residue","()","<p>Alias to override ResidueFinder#each_residue\n"],["each_residue","Bio::PDB::ResidueFinder","Bio/PDB/ResidueFinder.html#method-i-each_residue","()","<p>iterates over each residue\n"],["each_rule","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-each_rule","()","<p>Iterates over each element.\n"],["each_seq","Bio::Alignment::ArrayExtension","Bio/Alignment/ArrayExtension.html#method-i-each_seq","()","<p>Iterates over each sequences. Yields a sequence.\n<p>It works the same as Array#each.\n"],["each_seq","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-each_seq","()","<p>Iterates over each sequences. Yields a sequence. It acts the same as\nEnumerable#each.\n<p>You would redefine …\n"],["each_seq","Bio::Alignment::HashExtension","Bio/Alignment/HashExtension.html#method-i-each_seq","()","<p>Iterates over each sequences. Yields a sequence.\n<p>It works the same as Hash#each_value.\n"],["each_seq","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-each_seq","()",""],["each_site","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-each_site","()","<p>Iterates over each site of the alignment. It yields a Bio::Alignment::Site\nobject (which inherits Array …\n"],["each_site_step","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-each_site_step","(start, stop, step = 1)","<p>Iterates over each site of the alignment, with specifying start, stop\npositions and step. It yields  …\n"],["each_symbol","Bio::PDB::Record","Bio/PDB/Record.html#method-i-each_symbol","()","<p>yields the symbol(k), type(x) and array of ranges of each symbol.\n"],["each_window","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-each_window","(window_size, step_size = 1)","<p>Iterates over each sliding window of the alignment. window_size is the size\nof sliding window. step is …\n"],["each_with_index","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-each_with_index","()",""],["eclinks","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-eclinks","()","<p>Enzyme&#39;s EC numbers shown in the DEFINITION line.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["edge","Bio::KEGG::KGML::Relation","Bio/KEGG/KGML/Relation.html#method-i-edge","()","<p>(Deprecated?)\n"],["edges","Bio::Pathway","Bio/Pathway.html#method-i-edges","()","<p>Returns the number of the edges in the graph.\n"],["edges","Bio::Tree","Bio/Tree.html#method-i-edges","()","<p>Returns all edges an array of [ node0, node1, edge ]\n"],["efetch","Bio::NCBI::REST","Bio/NCBI/REST.html#method-i-efetch","(ids, hash = {}, step = 100)","<p>Retrieve database entries by given IDs and using E-Utils (efetch) service.\n<p>For information on the possible …\n"],["efetch","Bio::NCBI::REST","Bio/NCBI/REST.html#method-c-efetch","(*args)",""],["efetch","Bio::PubMed","Bio/PubMed.html#method-i-efetch","(ids, hash = {})","<p>Retrieve PubMed entry by PMID and returns MEDLINE formatted string using\nentrez efetch. Multiple PubMed …\n"],["efetch","Bio::PubMed","Bio/PubMed.html#method-c-efetch","(*args)","<p>The same as Bio::PubMed.new.efetch(*args).\n"],["eff_space","Bio::Blast::Report","Bio/Blast/Report.html#method-i-eff_space","()","<p>Effective search space\n"],["einfo","Bio::NCBI::REST","Bio/NCBI/REST.html#method-i-einfo","()","<p>List the NCBI database names E-Utils (einfo) service\n<p>eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi …\n\n"],["einfo","Bio::NCBI::REST","Bio/NCBI/REST.html#method-c-einfo","()",""],["el","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-el","()",""],["elements","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-elements","()","<p>Returns current elements as an array whose order fulfills all elements&#39;\npriorities.\n"],["elements","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-c-elements","(array, *a)","<p>same as Vector.elements\n"],["embl","Bio::Reference","Bio/Reference.html#method-i-embl","()","<p>Returns reference formatted in the EMBL style.\n\n<pre># ref is a Bio::Reference object\nputs ref.embl\n\n  RP   ...</pre>\n"],["embl_dr","Bio::UniProtKB","Bio/UniProtKB.html#method-i-embl_dr","(key = nil)","<p>Backup Bio::EMBLDB#dr as embl_dr\n"],["end","Bio::Hinv::KeywordSearch","Bio/Hinv/KeywordSearch.html#method-i-end","()",""],["endnote","Bio::Reference","Bio/Reference.html#method-i-endnote","()","<p>Returns reference formatted in the Endnote style.\n\n<pre># ref is a Bio::Reference object\nputs ref.endnote\n\n ...</pre>\n"],["entret","Bio::EMBOSS","Bio/EMBOSS.html#method-c-entret","(arg)","<p>Combines the initialization and execution for the emboss\n<code>entret</code> command.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">EMBOSS</span>.<span class=\"ruby-identifier\">entret</span>(<span class=\"ruby-string\">&#39;embl:xlrhodop&#39;</span>)\n</pre>\n"],["entrez_query","Bio::Blast::Report","Bio/Blast/Report.html#method-i-entrez_query","()","<p>Limit of request to Entrez : shortcuts for @parameters\n"],["entries","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-i-entries","()","<p>Gets an array of the fasta formatted sequence objects. Returns an array of\nBio::FastaFormat objects. …\n"],["entries","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-i-entries","()","<p>Gets an array of the fasta formatted sequence objects. Returns an array of\nBio::FastaFormat objects. …\n"],["entries","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-i-entries","()","<p>Gets an array of the fasta formatted sequence objects. Returns an array of\nBio::FastaFormat objects. …\n"],["entropy","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-entropy","()","<p>Same as <code>iterations.last.entropy</code>.\n"],["entropy","Bio::Blast::Report","Bio/Blast/Report.html#method-i-entropy","()","<p>Karlin-Altschul parameter H\n"],["entry","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-entry","()","<p>current raw entry as a String\n"],["entry","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-entry","()","<p>current raw entry as a String\n"],["entry","Bio::EMBL","Bio/EMBL.html#method-i-entry","()","<p>returns ENTRY_NAME in the ID line.\n<p>Bio::EMBL#entry -&gt; String\n\n"],["entry","Bio::FastaFormat","Bio/FastaFormat.html#method-i-entry","()","<p>Returns the stored one entry as a FASTA format. (same as to_s)\n"],["entry","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-entry","()","<p>ENTRY\n"],["entry","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-entry","()","<p>Returns the “ENTRY” line content as a Hash. For example,\n\n<pre>{&quot;organism&quot;=&gt;&quot;E.coli&quot;, &quot;division&quot;=&gt;&quot;CDS&quot;, ...</pre>\n"],["entry","Bio::NBRF","Bio/NBRF.html#method-i-entry","()","<p>Returns the stored one entry as a NBRF/PIR format. (same as to_s)\n"],["entry","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-i-entry","(database, ids, format = nil, field = nil)","<p>Retrieves entries corresponding to the specified IDs.\n<p>Example:\n\n<pre>t = Bio::TogoWS::REST.new\nkuma = t.entry(&#39;ncbi-nucleotide&#39;, ...</pre>\n"],["entry","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-c-entry","(*arg)","<p>The same as Bio::TogoWS::REST#entry.\n"],["entry","Bio::UniProtKB","Bio/UniProtKB.html#method-i-entry","()",""],["entry_database_list","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-i-entry_database_list","()","<p>Returns list of available databases in the entry service.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["entry_database_list","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-c-entry_database_list","(*arg)","<p>The same as Bio::TogoWS::REST#entry_database_list\n"],["entry_ended_pos","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-entry_ended_pos","()","<p>(end position of the entry) + 1\n"],["entry_ended_pos","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-entry_ended_pos","()","<p>(end position of the entry) + 1\n"],["entry_ended_pos","Bio::FlatFile","Bio/FlatFile.html#method-i-entry_ended_pos","()","<p>(end position of the last entry) + 1\n"],["entry_id","Bio::AAindex","Bio/AAindex.html#method-i-entry_id","()","<p>Returns entry_id in the H line.\n"],["entry_id","Bio::DB","Bio/DB.html#method-i-entry_id","()","<p>Returns an entry identifier as a String.  This method must be implemented\nin every database classes by …\n"],["entry_id","Bio::EMBL","Bio/EMBL.html#method-i-entry_id","()",""],["entry_id","Bio::FANTOM::MaXML","Bio/FANTOM/MaXML.html#method-i-entry_id","()",""],["entry_id","Bio::FANTOM::MaXML::Annotation","Bio/FANTOM/MaXML/Annotation.html#method-i-entry_id","()",""],["entry_id","Bio::Fasta::Report::Hit::Query","Bio/Fasta/Report/Hit/Query.html#method-i-entry_id","()","<p>Returns the first word in the definition as a String. You can get this\nvalue by Report::Hit#query_id …\n"],["entry_id","Bio::FastaFormat","Bio/FastaFormat.html#method-i-entry_id","()","<p>Parsing FASTA Defline (using #identifiers method), and shows a possibly\nunique identifier. It returns …\n"],["entry_id","Bio::Fastq","Bio/Fastq.html#method-i-entry_id","()","<p>Identifier of the entry. Normally, the first word of the ID line.\n"],["entry_id","Bio::GenBank","Bio/GenBank.html#method-i-entry_id","()",""],["entry_id","Bio::GenPept","Bio/GenPept.html#method-i-entry_id","()",""],["entry_id","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-entry_id","()","<p>ENTRY\n"],["entry_id","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-entry_id","()","<p>ID of the entry, described in the ENTRY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["entry_id","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-entry_id","()",""],["entry_id","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-entry_id","()","<p>ID of the entry, described in the ENTRY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["entry_id","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-entry_id","()","<p>ENTRY – Returns contents of the ENTRY record as a String.\n"],["entry_id","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-entry_id","()","<p>ENTRY\n"],["entry_id","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-entry_id","()","<p>Return the ID, described in the ENTRY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["entry_id","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-entry_id","()","<p>Returns ID of the entry.\n"],["entry_id","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-entry_id","()","<p>Return the ID of the pathway, described in the ENTRY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["entry_id","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-entry_id","()","<p>ID of the entry, described in the ENTRY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["entry_id","Bio::LITDB","Bio/LITDB.html#method-i-entry_id","()","<p>CODE\n"],["entry_id","Bio::Lasergene","Bio/Lasergene.html#method-i-entry_id","()","<p>Name of sequence\n<p>Parsed from standard Lasergene header\n\n"],["entry_id","Bio::MEDLINE","Bio/MEDLINE.html#method-i-entry_id","()",""],["entry_id","Bio::PDB","Bio/PDB.html#method-i-entry_id","()","<p>PDB identifier written in “HEADER”. (e.g. 1A00)\n"],["entry_id","Bio::PDB::ChemicalComponent","Bio/PDB/ChemicalComponent.html#method-i-entry_id","()","<p>Identifier written in the first line “RESIDUE” record. (e.g. CMP)\n"],["entry_id","Bio::PROSITE","Bio/PROSITE.html#method-i-entry_id","()",""],["entry_id","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-entry_id","()",""],["entry_id","Bio::TargetP::Report","Bio/TargetP/Report.html#method-i-entry_id","()",""],["entry_id","Bio::UniProtKB","Bio/UniProtKB.html#method-i-entry_id","()","<p>returns a ENTRY_NAME in the ID line.\n"],["entry_name","Bio::EMBL","Bio/EMBL.html#method-i-entry_name","()",""],["entry_name","Bio::UniProtKB","Bio/UniProtKB.html#method-i-entry_name","()",""],["entry_pos_flag","Bio::FlatFile","Bio/FlatFile.html#method-i-entry_pos_flag","()","<p>a flag to write down entry start and end positions\n"],["entry_pos_flag=","Bio::FlatFile","Bio/FlatFile.html#method-i-entry_pos_flag-3D","(x)","<p>Sets flag to write down entry start and end positions\n"],["entry_raw","Bio::FlatFile","Bio/FlatFile.html#method-i-entry_raw","()","<p>Returns the last raw entry as a string.\n"],["entry_start_pos","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-entry_start_pos","()","<p>start position of the entry\n"],["entry_start_pos","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-entry_start_pos","()","<p>start position of the entry\n"],["entry_start_pos","Bio::FlatFile","Bio/FlatFile.html#method-i-entry_start_pos","()","<p>start position of the last entry\n"],["entry_version","Bio::EMBL","Bio/EMBL.html#method-i-entry_version","()","<p>entry version number numbered by EMBL\n"],["enzyme_name?","Bio::REBASE","Bio/REBASE.html#method-i-enzyme_name-3F","(name)","<p>Check if supplied name is the name of an available enzyme\n<p><strong>Arguments</strong>\n<p><code>name</code>: Enzyme name\n"],["enzyme_name?","Bio::RestrictionEnzyme","Bio/RestrictionEnzyme.html#method-c-enzyme_name-3F","( name )","<p>Check if supplied name is the name of an available enzyme\n<p>See Bio::REBASE.enzyme_name?\n<p><strong>Arguments</strong>\n"],["enzymes","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-enzymes","()","<p>ENZYME\n"],["enzymes","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-enzymes","()","<p>ENZYME\n"],["enzymes","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-enzymes","()",""],["enzymes","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-enzymes","()","<p>Enzymes described in the ENZYME line.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["enzymes","Bio::REBASE","Bio/REBASE.html#method-i-enzymes","()","<p>List the enzymes available\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["enzymes_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-enzymes_as_strings","()","<p>Enzymes described in the ENZYME lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["eof?","Bio::FlatFile","Bio/FlatFile.html#method-i-eof-3F","()","<p>Returns true if input stream is end-of-file. Otherwise, returns false.\n(Similar to IO#eof?, but may not …\n"],["eof?","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-eof-3F","()","<p>Returns true if end-of-file. Otherwise, returns false.\n<p>Note that it returns false if internal buffer is …\n"],["eql?","Bio::Relation","Bio/Relation.html#method-i-eql-3F","(rel)","<p>Method eql? is an alias of the === method and is used with hash method to\nmake uniq arry of the Bio::Relation …\n"],["equals?","Bio::Locations","Bio/Locations.html#method-i-equals-3F","(other)","<p>Evaluate equality of Bio::Locations object.\n"],["equation","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-equation","()","<p>Chemical equation, described in the EQUATION line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["error_msg","Bio::SOFT","Bio/SOFT.html#method-i-error_msg","( i, extra_info=nil )",""],["error_probabilities","Bio::Fastq","Bio/Fastq.html#method-i-error_probabilities","()","<p>Estimated probability of error for each base.\n<p><strong>Returns</strong> &mdash; (Array containing Float) error probability values …\n\n"],["errorlog","Bio::ClustalW","Bio/ClustalW.html#method-i-errorlog","()","<p>+ #errorlog is deprecated (no replacement) and returns empty string.\n"],["escape_shell","Bio::Command","Bio/Command.html#method-i-escape_shell","(str)","<p>Escape special characters in command line string.\n<p><strong>Arguments</strong>:\n<p>(required) <em>str</em>: String\n"],["escape_shell_unix","Bio::Command","Bio/Command.html#method-i-escape_shell_unix","(str)","<p>Escape special characters in command line string for UNIX shells.\n<p><strong>Arguments</strong>:\n<p>(required) <em>str</em>: String\n"],["escape_shell_windows","Bio::Command","Bio/Command.html#method-i-escape_shell_windows","(str)","<p>Escape special characters in command line string for cmd.exe on Windows.\n<p><strong>Arguments</strong>:\n<p>(required) <em>str</em>: String …\n"],["escaped_cut_symbol","Bio::RestrictionEnzyme::CutSymbol","Bio/RestrictionEnzyme/CutSymbol.html#method-i-escaped_cut_symbol","()","<p>Get the token that&#39;s used as the cut symbol in a restriction enzyme\nsequece with a back-slash preceding …\n"],["escaped_cut_symbol","Bio::RestrictionEnzyme::CutSymbol::CutSymbol__","Bio/RestrictionEnzyme/CutSymbol/CutSymbol__.html#method-c-escaped_cut_symbol","()",""],["esearch","Bio::NCBI::REST","Bio/NCBI/REST.html#method-i-esearch","(str, hash = {}, limit = nil, step = 10000)","<p>Search the NCBI database by given keywords using E-Utils (esearch) service\nand returns an array of entry …\n"],["esearch","Bio::NCBI::REST","Bio/NCBI/REST.html#method-c-esearch","(*args)",""],["esearch","Bio::PubMed","Bio/PubMed.html#method-i-esearch","(str, hash = {})","<p>Search the PubMed database by given keywords using E-Utils and returns  an\narray of PubMed IDs.\n<p>For information …\n"],["esearch","Bio::PubMed","Bio/PubMed.html#method-c-esearch","(*args)","<p>The same as Bio::PubMed.new.esearch(*args).\n"],["esearch_count","Bio::NCBI::REST","Bio/NCBI/REST.html#method-i-esearch_count","(str, hash = {})","<p><strong>Arguments</strong> &mdash; same as esearch method\n<p><strong>Returns</strong> &mdash; array of entry IDs or a number of results\n\n"],["esearch_count","Bio::NCBI::REST","Bio/NCBI/REST.html#method-c-esearch_count","(*args)",""],["est","Bio::NCBI::REST::ESearch::Methods","Bio/NCBI/REST/ESearch/Methods.html#method-i-est","(*args)","<p>alias for “nucest”\n"],["evalue","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-evalue","()","<p>Returns first hsp&#39;s e-value. (shown in hit list of BLAST result)\n"],["evalue","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-evalue","()","<p>Shortcut methods for the best Hsp, some are also compatible with\nBio::Fasta::Report::Hit class.\n"],["evalue","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-evalue","()","<p>E-value score\n"],["evalue","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-evalue","()","<p>E-value of the match\n"],["events","Bio::Tree::Node","Bio/Tree/Node.html#method-i-events","()","<p>Phylogenetic events. Returns an Array of one (or more?) of the following\nsymbols\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:gene_duplication</span>\n<span class=\"ruby-value\">:speciation</span>\n</pre>\n"],["evidence","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-evidence","()",""],["exec","Bio::EMBOSS","Bio/EMBOSS.html#method-i-exec","()","<p>A Bio::EMBOSS object has to be executed before it can return any result.\n\n<pre>obj_A = Bio::EMBOSS.new(&#39;transeq ...</pre>\n"],["exec","Bio::PSORT::CGIDriver","Bio/PSORT/CGIDriver.html#method-i-exec","(query)","<p>Executes a CGI “query&#39;&#39; and returns aReport\n"],["exec","Bio::PSORT::PSORT1","Bio/PSORT/PSORT1.html#method-i-exec","(faa, parsing = true)","<p>Executes the query (faa) and returns an Bio::PSORT::PSORT1::Report.\n<p>The “faa&#39;&#39; argument is acceptable …\n"],["exec","Bio::PSORT::PSORT2","Bio/PSORT/PSORT2.html#method-i-exec","(faa, parsing = true)","<p>Executes PSORT II prediction and returns Report object \n(Bio::PSORT::PSORT2::Report) if parsing = true. …\n"],["exec","Bio::PTS1","Bio/PTS1.html#method-i-exec","(query)","<p>Executes the query request and returns result output in Bio::PTS1::Report.\nThe query argument is available …\n"],["exec","Bio::Sim4","Bio/Sim4.html#method-i-exec","(filename1, filename2 = nil)",""],["exec_local","Bio::Sim4","Bio/Sim4.html#method-i-exec_local","(filename1, filename2 = nil)","<p>Executes the sim4 program. Perform mRNA-genome alignment between sequences\nin given files. <code>filename1</code> …\n"],["exists?","Bio::DB","Bio/DB.html#method-i-exists-3F","(tag)","<p>Returns true or false - wether the entry contains the field of the given\ntag name.\n"],["exit_code","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-exit_code","()","<p>(WU-BLAST) Returns exit code for the execution. Returns an Integer or nil.\n"],["exit_code_message","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-exit_code_message","()","<p>(WU-BLAST) Returns the message bundled with the exit code output. The\nmessage will be shown when WU-BLAST …\n"],["exon_type_long","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-i-exon_type_long","()","<p>Bio::Genescan::Report::Exon#exon_type_long\n<p>Returns a human-readable “Type” of exon.\n"],["exons","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-exons","()",""],["exons","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-exons","()","<p>Returns exons of the hit. Each exon is a Bio::Sim4::Report::SegmentPair\nobject.\n"],["exons","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-exons","()","<p>Returns exons of the hit. Returns an array of\nBio::Spidey::Report::SegmentPair object.\n"],["expect","Bio::Blast::Report","Bio/Blast/Report.html#method-i-expect","()","<p>Expectation threshold (-e) : shortcuts for @parameters\n"],["expect","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-expect","()","<p>Returns e-value threshold specified when BLAST was executed.\n"],["expected","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-expected","(i, j)","<p>Calculate <em>e</em>, the <em>expected</em> value.\n<p><strong>Arguments</strong>\n<p><code>i</code>: row\n"],["export_tsv","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-export_tsv","(stream)",""],["external_merge_proc","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-c-external_merge_proc","(sort_program = [ '/usr/bin/env', 'LC_ALL=C', '/usr/bin/sort' ])",""],["external_merge_sort_proc","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-c-external_merge_sort_proc","(sort_program = [ '/usr/bin/env', 'LC_ALL=C', '/usr/bin/sort' ])",""],["external_sort_proc","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-c-external_sort_proc","(sort_program = [ '/usr/bin/env', 'LC_ALL=C', '/usr/bin/sort' ])",""],["extract_key","Bio::Alignment::OriginalPrivate","Bio/Alignment/OriginalPrivate.html#method-c-extract_key","(obj)","<p>Gets the name or the definition of the sequence from given object.\n"],["extract_seq","Bio::Alignment::OriginalPrivate","Bio/Alignment/OriginalPrivate.html#method-c-extract_seq","(obj)","<p>Gets the sequence from given object.\n"],["fa","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-fa","()","<p>FA      Factor name\n"],["false_neg","Bio::PROSITE","Bio/PROSITE.html#method-i-false_neg","()","<p>Returns\n"],["false_negative_hits","Bio::PROSITE","Bio/PROSITE.html#method-i-false_negative_hits","()",""],["false_pos","Bio::PROSITE","Bio/PROSITE.html#method-i-false_pos","()","<p>Returns\n"],["false_positive_hits","Bio::PROSITE","Bio/PROSITE.html#method-i-false_positive_hits","()","<p>Returns\n"],["false_positive_sequences","Bio::PROSITE","Bio/PROSITE.html#method-i-false_positive_sequences","()","<p>Returns\n"],["fasta","Bio::FastaFormat","Bio/FastaFormat.html#method-i-fasta","(factory)",""],["fatal_errors","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-fatal_errors","()","<p>(WU-BLAST) Returns fatal error information. Returns nil or an array\ncontaining String.\n"],["features","Bio::DAS","Bio/DAS.html#method-i-features","(dsn, entry_point, start, stop)",""],["features","Bio::EMBL","Bio/EMBL.html#method-i-features","()",""],["features","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-features","()","<p>FEATURES – Returns contents of the FEATURES record as an array of\nBio::Feature objects.\n"],["fetch","Bio::Blast::Fastacmd","Bio/Blast/Fastacmd.html#method-i-fetch","(list)","<p>Get the sequence for a <em>list</em> of IDs in the database.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">fastacmd</span>.<span class=\"ruby-identifier\">fetch</span>([<span class=\"ruby-string\">&quot;sp:1433_SPIOL&quot;</span>, <span class=\"ruby-string\">&quot;sp:1432_MAIZE&quot;</span>])\n</pre>\n"],["fetch","Bio::DB","Bio/DB.html#method-i-fetch","(tag, skip = 0)","<p>Similar to the get method, however, fetch returns the content of the field\nwithout its tag and any extra …\n"],["fetch","Bio::Fetch","Bio/Fetch.html#method-i-fetch","(db, id, style = 'raw', format = nil)","<p>Fetch a database entry as specified by database (db), entry id (id),\n&#39;raw&#39; text or &#39;html&#39; …\n"],["ff","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-ff","()","<p>FF      Functional features\n"],["fftns","Bio::MAFFT","Bio/MAFFT.html#method-c-fftns","(n = nil)","<p>Creates a new alignment factory. When <code>n</code> is a number (1,2,3,\n…), performs &#39;fftns n&#39;. When <code>n</code> …\n"],["fftnsi","Bio::MAFFT","Bio/MAFFT.html#method-c-fftnsi","()","<p>Creates a new alignment factory. Performs &#39;fftnsi&#39;.\n"],["fgcolor","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-fgcolor","()","<p>Deprecated. Same as self.graphics.fgcolor (additional nil checks may be\nneeded).\n<p>foreground color (String …\n"],["fgcolor=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-fgcolor-3D","(val)","<p>Deprecated. Same as self.graphics.fgcolor= (additional nil checks may be\nneeded).\n"],["fh","Bio::EMBL","Bio/EMBL.html#method-i-fh","()","<p>returns feature table header (String) in the feature header (FH) line.\n<p>FH Line; feature table header (0 …\n"],["field","Bio::LITDB","Bio/LITDB.html#method-i-field","()","<p>FIELD\n"],["fileids","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-fileids","()",""],["filename","Bio::FlatFileIndex::BDB_1::PrimaryNameSpace","Bio/FlatFileIndex/BDB_1/PrimaryNameSpace.html#method-i-filename","()",""],["filename","Bio::FlatFileIndex::BDB_1::SecondaryNameSpace","Bio/FlatFileIndex/BDB_1/SecondaryNameSpace.html#method-i-filename","()",""],["filename","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-i-filename","()",""],["filename","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-c-filename","(dbname)",""],["filename","Bio::FlatFileIndex::Flat_1::PrimaryNameSpace","Bio/FlatFileIndex/Flat_1/PrimaryNameSpace.html#method-i-filename","()",""],["filename","Bio::FlatFileIndex::Flat_1::SecondaryNameSpace","Bio/FlatFileIndex/Flat_1/SecondaryNameSpace.html#method-i-filename","()",""],["filename","Bio::FlatFileIndex::Template::NameSpace","Bio/FlatFileIndex/Template/NameSpace.html#method-i-filename","()",""],["filenames","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-filenames","()",""],["filter","Bio::Blast::Report","Bio/Blast/Report.html#method-i-filter","()","<p>Filtering options (-F) : shortcuts for @parameters\n"],["find_atom","Bio::PDB::AtomFinder","Bio/PDB/AtomFinder.html#method-i-find_atom","()","<p>returns an array containing all atoms for which given block is not\n<code>false</code> (similar to Enumerable#find_all …\n"],["find_chain","Bio::PDB::ChainFinder","Bio/PDB/ChainFinder.html#method-i-find_chain","()","<p>returns an array containing all chains for which given block is not\n<code>false</code> (similar to Enumerable#find_all …\n"],["find_hetatm","Bio::PDB::HetatmFinder","Bio/PDB/HetatmFinder.html#method-i-find_hetatm","()","<p>returns an array containing all HETATMs for which given block is not\n<code>false</code> (similar to Enumerable#find_all …\n"],["find_heterogen","Bio::PDB::HeterogenFinder","Bio/PDB/HeterogenFinder.html#method-i-find_heterogen","()","<p>returns an array containing all heterogens for which given block is not\n<code>false</code> (similar to Enumerable#find_all …\n"],["find_match_locations","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-i-find_match_locations","( string, re )","<p>Returns an <code>Array</code> of the match indicies of a\n<code>RegExp</code> to a string.\n<p>Example:\n\n<pre>find_match_locations(&#39;abccdefeg&#39;, ...</pre>\n"],["find_model","Bio::PDB::ModelFinder","Bio/PDB/ModelFinder.html#method-i-find_model","()","<p>returns an array containing all chains for which given block is not\n<code>false</code> (similar to Enumerable#find_all …\n"],["find_residue","Bio::PDB::ResidueFinder","Bio/PDB/ResidueFinder.html#method-i-find_residue","()","<p>returns an array containing all residues for which given block is not\n<code>false</code> (similar to Enumerable#find_all …\n"],["finder","Bio::PDB::Utils","Bio/PDB/Utils.html#method-i-finder","(findtype)","<p>Every class in the heirarchy implements finder, this takes  a class which\ndetermines which type of object …\n"],["first","Bio::Features","Bio/Features.html#method-i-first","()","<p>Short cut for the Features#features.first\n"],["first","Bio::Locations","Bio/Locations.html#method-i-first","()","<p>Returns first Bio::Location object.\n"],["first","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-first","()","<p>Same usage as Array#first\n"],["first","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-first","()","<p>Same usage as Array#first\n"],["first_name","Bio::FastaFormat","Bio/FastaFormat.html#method-i-first_name","()","<p>Returns the first name (word) of the definition line - everything before\nthe first whitespace.\n\n<pre>&gt;abc def ...</pre>\n"],["flag_append","Bio::FlatFileIndex::BDBdefault","Bio/FlatFileIndex/BDBdefault.html#method-c-flag_append","()",""],["flag_read","Bio::FlatFileIndex::BDBdefault","Bio/FlatFileIndex/BDBdefault.html#method-c-flag_read","()",""],["flag_write","Bio::FlatFileIndex::BDBdefault","Bio/FlatFileIndex/BDBdefault.html#method-c-flag_write","()",""],["floyd","Bio::Pathway","Bio/Pathway.html#method-i-floyd","()","<p>Alias for the floyd_warshall method.\n"],["floyd_warshall","Bio::Pathway","Bio/Pathway.html#method-i-floyd_warshall","()","<p>Floyd-Wardshall alogrithm for solving the all-pairs shortest-paths problem\non a directed graph G = (V, …\n"],["for_display","Bio::RestrictionEnzyme::Range::SequenceRange::Fragment","Bio/RestrictionEnzyme/Range/SequenceRange/Fragment.html#method-i-for_display","(p_str=nil, c_str=nil)",""],["for_display","Bio::RestrictionEnzyme::Range::SequenceRange::Fragments","Bio/RestrictionEnzyme/Range/SequenceRange/Fragments.html#method-i-for_display","(p_str=nil, c_str=nil)",""],["for_io","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-c-for_io","(io)","<p>Creates a new input stream wrapper from the given IO object.\n"],["foreach","Bio::FlatFile","Bio/FlatFile.html#method-c-foreach","(*arg)","<p>Executes the block for every entry in the stream. Same as\nFlatFile.open(*arg) { |ff| ff.each { |entry| …\n"],["format","Bio::Fastq","Bio/Fastq.html#method-i-format","()","<p>Format name. One of “fastq-sanger”, “fastq-solexa”, “fastq-illumina”, or …\n"],["format","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-format","()",""],["format","Bio::Reference","Bio/Reference.html#method-i-format","(style = nil, *options)","<p>Formats the reference in a given style.\n<p>Styles:\n<p>nil - general\n"],["format=","Bio::Fasta","Bio/Fasta.html#method-i-format-3D","(num)","<p>Accessors for the -m option.\n"],["format=","Bio::Fastq","Bio/Fastq.html#method-i-format-3D","(name)","<p>Specify the format. If the format is not found, raises RuntimeError.\n<p>Available formats are:\n\n<pre>&quot;fastq-sanger&quot; ...</pre>\n"],["format=","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-format-3D","(str)",""],["format_raw","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-i-format_raw","()","<p>def format_txt end\n"],["formats","Bio::Fetch","Bio/Fetch.html#method-i-formats","(database = @database)","<p>Lists the formats that are available for a given database. Like the\nBio::Fetch#databases method, not …\n"],["formatstring2class","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-c-formatstring2class","(format_string)",""],["formul","Bio::PDB::ChemicalComponent","Bio/PDB/ChemicalComponent.html#method-i-formul","()","<p>The chemical formula of the chemical component. Returns a string  (or nil,\nif the entry is something …\n"],["formula","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-formula","()","<p>FORMULA\n"],["formula","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-formula","()","<p>Chemical formula described in the FORMULA line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["forward_complement","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-forward_complement","()","<p>Returns a new complementary sequence object (without reversing). The\noriginal sequence object is not …\n"],["forward_complement!","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-forward_complement-21","()","<p>Converts the current sequence into its complement (without reversing). The\noriginal sequence object is …\n"],["found_again?","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-found_again-3F","()","<p>(PSI-BLAST) Returns true if the hit is found again in the iteration.\nOtherwise, returns false or nil. …\n"],["fragments","Bio::RestrictionEnzyme::Range::SequenceRange","Bio/RestrictionEnzyme/Range/SequenceRange.html#method-i-fragments","()","<p>Calculates the fragments over this sequence range as defined after using\nthe methods add_cut_range,  …\n"],["fragments_for_display","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-i-fragments_for_display","( hsh, view_ranges=false )","<p>Take the fragments from SequenceRange objects generated from add_cut_range\nand return unique results …\n"],["from","Bio::Relation","Bio/Relation.html#method-i-from","()","<p>Returns one node.\n"],["ft","Bio::EMBL","Bio/EMBL.html#method-i-ft","()","<p>returns contents in the feature table (FT) lines.\n<p>Bio::EMBL#ft -&gt; Bio::Features\n<p>Bio::EMBL#ft {} -&gt; …\n"],["ft","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-ft","()","<p>FT      Feature table (1st position     last position    feature)\n"],["ft","Bio::UniProtKB","Bio/UniProtKB.html#method-i-ft","(feature_key = nil)","<p>returns contents in the feature table.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sp</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UniProtKB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">entry</span>)\n<span class=\"ruby-identifier\">ft</span> = <span class=\"ruby-identifier\">sp</span>.<span class=\"ruby-identifier\">ft</span>\n<span class=\"ruby-identifier\">ft</span>.<span class=\"ruby-identifier\">class</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["function","Bio::PTS1","Bio/PTS1.html#method-i-function","(func = nil)","<p>Sets and shows the function parameter.\n<p>Organism specific parameter: function names (Bio::PTS1::FUNTION.keys). …\n"],["gap_char","Bio::Alignment::PropertyMethods","Bio/Alignment/PropertyMethods.html#method-i-gap_char","()","<p>Gap character.\n"],["gap_extend","Bio::Blast::Report","Bio/Blast/Report.html#method-i-gap_extend","()","<p>Gap extension cost (-E) : shortcuts for @parameters\n"],["gap_length_weight","Bio::GCG::Msf","Bio/GCG/Msf.html#method-i-gap_length_weight","()","<p>gap length weight\n"],["gap_open","Bio::Blast::Report","Bio/Blast/Report.html#method-i-gap_open","()","<p>Gap opening cost (-G) : shortcuts for @parameters\n"],["gap_regexp","Bio::Alignment::PropertyMethods","Bio/Alignment/PropertyMethods.html#method-i-gap_regexp","()","<p>Returns regular expression for checking gap.\n"],["gap_weight","Bio::GCG::Msf","Bio/GCG/Msf.html#method-i-gap_weight","()","<p>gap weight\n"],["gapped_entropy","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-gapped_entropy","()","<p>Same as <code>iterations.last.gapped_entropy</code>.\n"],["gapped_kappa","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-gapped_kappa","()","<p>Same as <code>iterations.last.gapped_kappa</code>.\n"],["gapped_lambda","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-gapped_lambda","()","<p>Same as <code>iterations.last.gapped_lambda</code>.\n"],["gapped_pos","Bio::Alignment::GAP","Bio/Alignment/GAP.html#method-c-gapped_pos","(seq, pos, gap_regexp)","\n<pre>position without gaps are translated into the position with gaps.</pre>\n<p><em>seq</em> &mdash; sequence\n<p><em>pos</em> &mdash; position with gaps\n"],["gbposition","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-gbposition","()","<p>The position in the genome described in the POSITION line as GenBank\nfeature table location formatted …\n"],["gc_content","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-gc_content","()","<p>Calculate the ratio of GC / ATGC bases. U is regarded as T.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atggcgtga&#39;)\nputs ...</pre>\n"],["gc_percent","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-gc_percent","()","<p>Calculate the ratio of GC / ATGC bases as a percentage rounded to  the\nnearest whole number. U is regarded …\n"],["gc_skew","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-gc_skew","()","<p>Calculate the ratio of (G - C) / (G + C) bases.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atggcgtga&#39;)\nputs s.gc_skew ...</pre>\n"],["gen_ambiguity_map","Bio::CodonTable","Bio/CodonTable.html#method-i-gen_ambiguity_map","(hash)","<p>Compute possible ambiguity nucleotide code to amino acid conversion the\ncodon is defined when all decomposed …\n"],["gene","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-gene","()","<p>The method will be deprecated. Use <code>entry.names.first</code> instead.\n<p>Returns the first gene name described in …\n"],["gene_name","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-gene_name","()",""],["gene_name","Bio::UniProtKB","Bio/UniProtKB.html#method-i-gene_name","()","<p>returns a String of the first gene name in the GN line.\n"],["gene_names","Bio::UniProtKB","Bio/UniProtKB.html#method-i-gene_names","()","<p>returns a Array of gene names in the GN line.\n"],["general","Bio::Reference","Bio/Reference.html#method-i-general","()","<p>Returns reference formatted in a general/generic style.\n\n<pre># ref is a Bio::Reference object\nputs ref.general ...</pre>\n"],["generate","Bio::Phylip::DistanceMatrix","Bio/Phylip/DistanceMatrix.html#method-c-generate","(matrix, otu_names = nil, options = {})","<p>Generates a new phylip distance matrix formatted text as a string.\n"],["genes","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-genes","()",""],["genes","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-genes","()","<p>The method will be deprecated. Use Bio::KEGG::GENES#names.\n<p>Names of the entry as an Array, described in …\n"],["genes","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-genes","()",""],["genes","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-genes","()",""],["genes_as_hash","Bio::KEGG::Common::GenesAsHash","Bio/KEGG/Common/GenesAsHash.html#method-i-genes_as_hash","()","<p>Returns a Hash of the organism ID and an Array of entry IDs in GENES field.\n"],["genes_as_hash","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-genes_as_hash","()","<p>Returns a Hash of the organism ID and an Array of entry IDs in GENES field.\n"],["genes_as_hash","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-genes_as_hash","()","<p>Returns a Hash of the organism ID and an Array of entry IDs in GENES field.\n"],["genes_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-genes_as_hash","()","<p>Genes described in the GENE lines.\n<p><strong>Returns</strong> &mdash; Hash of gene ID and its definition\n\n"],["genes_as_strings","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-genes_as_strings","()","<p>GENES\n"],["genes_as_strings","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-genes_as_strings","()","<p>Returns an Array of the organism ID and entry IDs in GENES field.\n"],["genes_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-genes_as_strings","()","<p>Genes described in the GENE lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["genome_biol","Bio::Reference","Bio/Reference.html#method-i-genome_biol","()","<p>Returns reference formatted in the Genome Biology  (genomebiology.com)\nstyle.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># ref is a Bio::Reference ...</span>\n</pre>\n"],["genome_res","Bio::Reference","Bio/Reference.html#method-i-genome_res","()","<p>Returns reference formatted in the Genome Research  (genome.org) style.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># ref is a Bio::Reference object ...</span>\n</pre>\n"],["genomenet","Bio::Blast::Remote","Bio/Blast/Remote.html#method-c-genomenet","(program, db, options = [])","<p>creates a remote BLAST factory using GenomeNet\n"],["genomic","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-genomic","()","<p>Returns sequence informations of the &#39;Genomic&#39;. Returns a\nBio::Spidey::Report::SeqDesc object. …\n"],["geometricCentre","Bio::PDB::Utils","Bio/PDB/Utils.html#method-i-geometricCentre","(method = :each_atom)","<p>Returns the coordinates of the geometric centre (average co-ord) of any\nAtomFinder (or .atoms) implementing …\n"],["get","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-get","(key)","<p>Return the option.\n<p><strong>Arguments</strong>:\n<p><em>key</em>: option name as a string, e.g. &#39;m&#39;, &#39;p&#39;, or\n&#39;-m&#39;, …\n"],["get","Bio::DB","Bio/DB.html#method-i-get","(tag)","<p>Returns an intact field of the tag as a String.\n"],["get","Bio::FANTOM::MaXML::Sequences","Bio/FANTOM/MaXML/Sequences.html#method-i-get","(idstr)",""],["get","Bio::FastaDefline","Bio/FastaDefline.html#method-i-get","(dbname)","<p>Returns identifires by a database name.\n"],["get","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-get","(pos, length)",""],["get_all_by_qualifier","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-get_all_by_qualifier","(qstr)",""],["get_all_by_type","Bio::FastaDefline","Bio/FastaDefline.html#method-i-get_all_by_type","(*type_strarg)","<p>Returns identifiers by given type.\n"],["get_all_property","Bio::Alignment::PropertyMethods","Bio/Alignment/PropertyMethods.html#method-i-get_all_property","()","<p>Returns properties defined in the object as an hash.\n"],["get_attribute","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-get_attribute","(tag)","<p>Gets the attribute value for the given tag.\n<p>Note that if two or more tag-value pairs with the same name …\n"],["get_attributes","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-get_attributes","(tag)","<p>Gets the attribute values for the given tag. This method always returns an\narray.\n<p><strong>Arguments</strong>:\n<p>(required) …\n"],["get_blocks","Bio::Nexus","Bio/Nexus.html#method-i-get_blocks","()","<p>Returns an Array of all blocks found in the String &#39;nexus_str&#39; set\nvia Bio::Nexus.new( nexus_str …\n"],["get_blocks_by_name","Bio::Nexus","Bio/Nexus.html#method-i-get_blocks_by_name","( name )","<p>A convenience methods which returns an array of all nexus blocks for which\nthe name equals &#39;name&#39; …\n"],["get_by_id","Bio::Blast::Fastacmd","Bio/Blast/Fastacmd.html#method-i-get_by_id","(entry_id)","<p>Get the sequence of a specific entry in the BLASTable database. For\nexample:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">entry</span> = <span class=\"ruby-identifier\">fastacmd</span>.<span class=\"ruby-identifier\">get_by_id</span>(<span class=\"ruby-string\">&quot;sp:128U_DROME&quot;</span>)\n</pre>\n"],["get_by_id","Bio::FANTOM","Bio/FANTOM.html#method-c-get_by_id","(idstr, http_proxy = nil)",""],["get_by_id","Bio::Fetch","Bio/Fetch.html#method-i-get_by_id","(id)","<p>Get raw database entry by id. This method lets the Bio::Registry class use\nBio::Fetch objects.\n"],["get_by_id","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-get_by_id","(key)","<p>common interface defined in registry.rb Searching databank and returns\nentry (or entries) as a string. …\n"],["get_by_qualifier","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-get_by_qualifier","(qstr)",""],["get_by_type","Bio::FastaDefline","Bio/FastaDefline.html#method-i-get_by_type","(type_str)","<p>Returns an identifier by given type.\n"],["get_characters_blocks","Bio::Nexus","Bio/Nexus.html#method-i-get_characters_blocks","()","<p>A convenience methods which returns an array of all characters blocks.\n<p><strong>Returns</strong> &mdash; Array of CharactersBlocks …\n\n"],["get_characters_string","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_characters_string","( row )","<p>Returns character data as String for matrix row &#39;row&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>row</em>: Integer\n"],["get_characters_strings_by_name","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_characters_strings_by_name","( name )","<p>Returns character data as String Array for matrix rows named\n&#39;name&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>name</em> …\n"],["get_data_blocks","Bio::Nexus","Bio/Nexus.html#method-i-get_data_blocks","()","<p>A convenience methods which returns an array of all data blocks.\n<p><strong>Returns</strong> &mdash; Array of DataBlocks\n\n"],["get_database","Bio::Registry","Bio/Registry.html#method-i-get_database","(dbname)","<p>Returns a dababase handle (Bio::SQL, Bio::Fetch etc.) or nil if not found\n(case insensitive). The handles …\n"],["get_datatype","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_datatype","()","<p>Gets the “datatype” property.\n<p><strong>Returns</strong> &mdash; String\n\n"],["get_distances_blocks","Bio::Nexus","Bio/Nexus.html#method-i-get_distances_blocks","()","<p>A convenience methods which returns an array of all distances blocks.\n<p><strong>Returns</strong> &mdash; Array of DistancesBlock …\n\n"],["get_dna","Bio::DAS","Bio/DAS.html#method-i-get_dna","(dsn, segments)","<p>Returns an Array of Bio::DAS::DNA. The &#39;dsn&#39; can be a String or a\nBio::DAS::DSN object. The &#39;segments&#39; …\n"],["get_dsn","Bio::DAS","Bio/DAS.html#method-i-get_dsn","()","<p>Returns an Array of Bio::DAS::DSN\n"],["get_edge","Bio::Tree","Bio/Tree.html#method-i-get_edge","(source, target)","<p>Returns an edge from source to target. If source and target are not\nadjacent nodes, returns nil.\n"],["get_edge_distance","Bio::Tree","Bio/Tree.html#method-i-get_edge_distance","(edge)","<p>Gets distance value from the given edge. Returns float or any other numeric\nvalue or nil.\n"],["get_edge_distance_string","Bio::Tree","Bio/Tree.html#method-i-get_edge_distance_string","(edge)","<p>Gets distance string from the given edge. Returns a string or nil.\n"],["get_edge_merged","Bio::Tree","Bio/Tree.html#method-i-get_edge_merged","(edge1, edge2)","<p>Returns edge1 + edge2\n"],["get_entry","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-i-get_entry","()","<p>gets an entry\n"],["get_entry","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-i-get_entry","()","<p>gets an entry\n"],["get_entry","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-get_entry","()","<p>get an entry and return the entry as a string\n"],["get_entry","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-get_entry","()","<p>get an entry and return the entry as a string\n"],["get_entry","Bio::Fasta::Report::FastaFormat10Splitter","Bio/Fasta/Report/FastaFormat10Splitter.html#method-i-get_entry","()","<p>gets an entry\n"],["get_entry","Bio::Fasta::Report::FastaFormat10Splitter","Bio/Fasta/Report/FastaFormat10Splitter.html#method-i-get_entry","()","<p>gets an entry\n"],["get_entry","Bio::FlatFile::Splitter::Default","Bio/FlatFile/Splitter/Default.html#method-i-get_entry","()","<p>gets a entry\n"],["get_entry","Bio::FlatFile::Splitter::LineOriented","Bio/FlatFile/Splitter/LineOriented.html#method-i-get_entry","()","<p>get an entry and return the entry as a string\n"],["get_entry","Bio::FlatFile::Splitter::Template","Bio/FlatFile/Splitter/Template.html#method-i-get_entry","()","<p>Gets entry as a string. (String)\n"],["get_entry_points","Bio::DAS","Bio/DAS.html#method-i-get_entry_points","(dsn)","<p>Returns Bio::DAS::ENTRY_POINT. The &#39;dsn&#39; can be a String or a\nBio::DAS::DSN object.\n"],["get_features","Bio::DAS","Bio/DAS.html#method-i-get_features","(dsn, segments = [], categorize = false, feature_ids = [], group_ids = [])","<p>Returns a Bio::DAS::GFF object. The &#39;dsn&#39; can be a String or a\nBio::DAS::DSN object. The &#39;segments&#39; …\n"],["get_flatfile_data","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-get_flatfile_data","(f, pos, length)",""],["get_gap_character","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_gap_character","()","<p>Gets the “gap character” property.\n<p><strong>Returns</strong> &mdash; String\n\n"],["get_heterogen_by_id","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-get_heterogen_by_id","(key)","<p>get the heterogen (ligand) by id\n"],["get_match_character","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_match_character","()","<p>Gets the “match character” property.\n<p><strong>Returns</strong> &mdash; String\n\n"],["get_matrix","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_matrix","()","<p>Gets the matrix.\n<p><strong>Returns</strong> &mdash; Bio::Nexus::NexusMatrix\n\n"],["get_matrix","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-get_matrix","()","<p>Gets the matrix.\n<p><strong>Returns</strong> &mdash; Bio::Nexus::NexusMatrix\n\n"],["get_max_col","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-get_max_col","()","<p>Returns the maximal columns number.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["get_max_row","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-get_max_row","()","<p>Returns the maximal row number.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["get_missing","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_missing","()","<p>Gets the “missing” property.\n<p><strong>Returns</strong> &mdash; String\n\n"],["get_name","Bio::Nexus::GenericBlock","Bio/Nexus/GenericBlock.html#method-i-get_name","()","<p>Gets the name of this block.\n<p><strong>Returns</strong> &mdash; String\n\n"],["get_name","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-get_name","( row )","<p>Convenience method which return the value of column 0 and row &#39;row&#39;\nwhich is usually the name. …\n"],["get_node_bootstrap","Bio::Tree","Bio/Tree.html#method-i-get_node_bootstrap","(node)",""],["get_node_bootstrap_string","Bio::Tree","Bio/Tree.html#method-i-get_node_bootstrap_string","(node)",""],["get_node_by_name","Bio::Tree","Bio/Tree.html#method-i-get_node_by_name","(str)","<p>Finds a node in the tree by given name and returns the node. If the node\ndoes not found, returns nil. …\n"],["get_node_name","Bio::Tree","Bio/Tree.html#method-i-get_node_name","(node)","<p>Gets node name\n"],["get_number_of_characters","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_number_of_characters","()","<p>Gets the “number of characters” property.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["get_number_of_characters","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-get_number_of_characters","()","<p>Gets the “number of characters” property.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["get_number_of_taxa","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_number_of_taxa","()","<p>Gets the “number of taxa” property.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["get_number_of_taxa","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-get_number_of_taxa","()","<p>Gets the “number of taxa” property.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["get_number_of_taxa","Bio::Nexus::TaxaBlock","Bio/Nexus/TaxaBlock.html#method-i-get_number_of_taxa","()","<p>Gets the “number of taxa” property.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["get_parsed_entry","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-get_parsed_entry","()","<p>get an entry as a Bio::Blast::Report object\n"],["get_parsed_entry","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-get_parsed_entry","()","<p>get an entry as a Bio::Blast::Report object\n"],["get_parsed_entry","Bio::FlatFile::Splitter::LineOriented","Bio/FlatFile/Splitter/LineOriented.html#method-i-get_parsed_entry","()","<p>get an entry and return the entry as a data class object\n"],["get_parsed_entry","Bio::FlatFile::Splitter::Template","Bio/FlatFile/Splitter/Template.html#method-i-get_parsed_entry","()","<p>Gets entry as a data class&#39;s object\n"],["get_record","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-get_record","(i)",""],["get_record_class","Bio::PDB::ChemicalComponent::Record","Bio/PDB/ChemicalComponent/Record.html#method-c-get_record_class","(str)","<p>Look up the class in Definition hash\n"],["get_record_class","Bio::PDB::Record","Bio/PDB/Record.html#method-c-get_record_class","(str)","<p>Basically just look up the class in Definition hash do some munging for\nJRNL and REMARK\n"],["get_residue_by_id","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-get_residue_by_id","(key)","<p>get the residue by id\n"],["get_residue_id_from_atom","Bio::PDB::Residue","Bio/PDB/Residue.html#method-c-get_residue_id_from_atom","(atom)","<p>Creates residue id from an ATOM (or HETATM) object.\n"],["get_row_name","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_row_name","( row )","<p>Returns the String in the matrix at row &#39;row&#39; and column 0, which\nusually is interpreted as a …\n"],["get_row_string","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-get_row_string","( row, spacer = \"\" )","<p>Returns the values of columns 1 to maximal column length in row\n&#39;row&#39; concatenated as string. …\n"],["get_row_strings_by_name","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-get_row_strings_by_name","( name, spacer = \"\" )","<p>Returns all rows as Array of Strings separated by &#39;spacer&#39; for\nwhich column 0 is &#39;name&#39;. …\n"],["get_sequence","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-get_sequence","(row)","<p>Returns the Bio::Sequence in the matrix at row &#39;row&#39; as\nBio::Sequence object. When <em>row</em> is out …\n"],["get_sequence","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-get_sequence","(row)","<p>Returns the Bio::Sequence in the matrix at row &#39;row&#39; as\nBio::Sequence object. When <em>row</em> is out …\n"],["get_sequence","Bio::DAS","Bio/DAS.html#method-i-get_sequence","(dsn, segments)","<p>Returns an Array of Bio::DAS::SEQUENCE. The &#39;dsn&#39; can be a String\nor a Bio::DAS::DSN object. …\n"],["get_sequence","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_sequence","( row )","<p>Returns the characters in the matrix at row &#39;row&#39; as Bio::Sequence\nobject. Column 0 of the matrix …\n"],["get_sequences_by_name","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-get_sequences_by_name","( name )","<p>Returns character data as Bio::Sequence object Array for matrix rows named\n&#39;name&#39;.\n<p><strong>Arguments</strong>: …\n"],["get_taxa","Bio::Nexus::DataBlock","Bio/Nexus/DataBlock.html#method-i-get_taxa","()","<p>Gets the taxa of this block.\n<p><strong>Returns</strong> &mdash; Array\n\n"],["get_taxa","Bio::Nexus::TaxaBlock","Bio/Nexus/TaxaBlock.html#method-i-get_taxa","()","<p>Gets the taxa of this block.\n<p><strong>Returns</strong> &mdash; Array\n\n"],["get_taxa_blocks","Bio::Nexus","Bio/Nexus.html#method-i-get_taxa_blocks","()","<p>A convenience methods which returns an array of all taxa blocks.\n<p><strong>Returns</strong> &mdash; Array of TaxaBlocks\n\n"],["get_tokens","Bio::Nexus::GenericBlock","Bio/Nexus/GenericBlock.html#method-i-get_tokens","()","<p>Returns contents as Array of Strings.\n<p><strong>Returns</strong> &mdash; Array\n\n"],["get_tree","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-get_tree","( i )","<p>Returns tree i (same order as in nexus data) as newick parsed tree object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>i</em>: Integer …\n"],["get_tree_names","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-get_tree_names","()","<p>Returns an array of tree names.\n<p><strong>Returns</strong> &mdash; Array\n\n"],["get_tree_strings","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-get_tree_strings","()","<p>Returns an array of strings describing trees\n<p><strong>Returns</strong> &mdash; Array\n\n"],["get_tree_strings_by_name","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-get_tree_strings_by_name","( name )","<p>Returns an array of strings describing trees for which name matches the\ntree name.\n<p><strong>Arguments</strong>:\n<p>(required) …\n"],["get_trees_blocks","Bio::Nexus","Bio/Nexus.html#method-i-get_trees_blocks","()","<p>A convenience methods which returns an array of all trees blocks.\n<p><strong>Returns</strong> &mdash; Array of TreesBlocks\n\n"],["get_trees_by_name","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-get_trees_by_name","( name )","<p>Returns an array of newick parsed tree objects for which name matches the\ntree name.\n<p><strong>Arguments</strong>:\n<p>(required) …\n"],["get_triangle","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-get_triangle","()","<p>Gets the “triangle” property.\n<p><strong>Returns</strong> &mdash; String\n\n"],["get_types","Bio::DAS","Bio/DAS.html#method-i-get_types","(dsn, segments = [])","<p>Returns a Bio::DAS::TYPES object. The &#39;dsn&#39; can be a String or a\nBio::DAS::DSN object. The &#39;segments&#39; …\n"],["get_value","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-get_value","( row, col )","<p>Returns the value at row &#39;row&#39; and column &#39;col&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>row</em>: Integer\n"],["getc","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-getc","()","<p>Same as IO#getc.\n"],["gets","Bio::FlatFile","Bio/FlatFile.html#method-i-gets","(*arg)","<p>Similar to IO#gets. Internal use only. Users should not call it directly.\n"],["gets","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-gets","(io_rs = $/)","<p>Same as IO#gets.\n<p>Compatibility note: the bahavior of paragraph mode (io_rs = &#39;&#39;) may\ndiffer from …\n"],["gi","Bio::FastaDefline","Bio/FastaDefline.html#method-i-gi","()","<p>Shows GI. If the entry has more than two of such IDs, only the first ID are\nshown. Returns a string or …\n"],["gi","Bio::FastaFormat","Bio/FastaFormat.html#method-i-gi","()","<p>Parsing FASTA Defline (using #identifiers method), and shows\nGI/locus/accession/accession with version …\n"],["gi","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-gi","()","<p>Returns the second part of the VERSION record as a “GI:#######” String.\n"],["glycans","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-glycans","()","<p>GLYCAN\n"],["gn","Bio::UniProtKB","Bio/UniProtKB.html#method-i-gn","()","<p>returns gene names in the GN line.\n<p>New UniProt/SwissProt format:\n<p>Bio::UniProtKB#gn -&gt; [ &lt;gene record&gt;* …\n"],["go_ids","Bio::GO::External2go","Bio/GO/External2go.html#method-i-go_ids","()","<p>Returns ary of GO IDs.\n"],["go_terms","Bio::GO::External2go","Bio/GO/External2go.html#method-i-go_terms","()","<p>Returns ary of GO Terms.\n"],["go_terms","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-go_terms","()","<p>the Gene Ontology description for the InterPro entry, in “Aspect :term\n(ID)” format.\n"],["goid","Bio::GO::GeneAssociation","Bio/GO/GeneAssociation.html#method-i-goid","(org = nil)","<p>Returns GO_ID in /d{7}/ format. Giving not nil arg, returns  /GO:d{7}/\nstyle.\n<p>Bio::GO::GeneAssociation#goid …\n"],["goid2term","Bio::GO::Ontology","Bio/GO/Ontology.html#method-i-goid2term","(goid)","<p>Returns a GO_Term correspondig with the given GO_ID.\n"],["graph","Bio::PAML::Codeml::PositiveSites","Bio/PAML/Codeml/PositiveSites.html#method-i-graph","()","<p>Generate a graph - which is a simple string pointing out the positions\nshowing evidence of positive selection …\n"],["graph_omega","Bio::PAML::Codeml::PositiveSites","Bio/PAML/Codeml/PositiveSites.html#method-i-graph_omega","()","<p>Generate a graph - which is a simple string pointing out the positions\nshowing evidence of positive selection …\n"],["graph_seq","Bio::PAML::Codeml::PositiveSites","Bio/PAML/Codeml/PositiveSites.html#method-i-graph_seq","()","<p>Graph of amino acids of first sequence at locations\n"],["gss","Bio::NCBI::REST::ESearch::Methods","Bio/NCBI/REST/ESearch/Methods.html#method-i-gss","(*args)","<p>alias for “nucgss”\n"],["gsub_entities","Bio::FANTOM::MaXML","Bio/FANTOM/MaXML.html#method-i-gsub_entities","(str)",""],["guess","Bio::FlatFile::AutoDetect::RuleDebug","Bio/FlatFile/AutoDetect/RuleDebug.html#method-i-guess","(text, meta)","<p>prints information to the $stderr.\n"],["guess","Bio::FlatFile::AutoDetect::RuleProc","Bio/FlatFile/AutoDetect/RuleProc.html#method-i-guess","(text, meta)","<p>If given text (and/or meta information) is known, returns the database\nclass. Otherwise, returns nil …\n"],["guess","Bio::FlatFile::AutoDetect::RuleRegexp","Bio/FlatFile/AutoDetect/RuleRegexp.html#method-i-guess","(text, meta)","<p>If given text matches the regexp, returns the database class. Otherwise,\nreturns nil or false. <em>meta</em> is …\n"],["guess","Bio::FlatFile::AutoDetect::RuleRegexp2","Bio/FlatFile/AutoDetect/RuleRegexp2.html#method-i-guess","(text, meta)","<p>If given text matches one of the regexp, returns the database class.\nOtherwise, returns nil or false. …\n"],["guess","Bio::FlatFile::AutoDetect::RuleTemplate","Bio/FlatFile/AutoDetect/RuleTemplate.html#method-i-guess","(text, meta)","<p>If given text (and/or meta information) is known, returns the database\nclass. Otherwise, returns nil …\n"],["guess","Bio::Sequence","Bio/Sequence.html#method-i-guess","(threshold = 0.9, length = 10000, index = 0)","<p>Guess the class of the current sequence.  Returns the class\n(Bio::Sequence::AA or Bio::Sequence::NA) …\n"],["guess","Bio::Sequence","Bio/Sequence.html#method-c-guess","(str, *args)","<p>Guess the class of a given sequence.  Returns the class (Bio::Sequence::AA\nor Bio::Sequence::NA) guessed. …\n"],["has_gap?","Bio::Alignment::SiteMethods","Bio/Alignment/SiteMethods.html#method-i-has_gap-3F","()","<p>If there are gaps, returns true. Otherwise, returns false.\n"],["has_key?","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-has_key-3F","(key)","<p>If the key exists, returns true. Otherwise, returns false. (Like\nHash#has_key?)\n"],["hash","Bio::Relation","Bio/Relation.html#method-i-hash","()","<p>Used by eql? method\n"],["hc_between_strands","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-hc_between_strands","()","<p><code>Array</code> of horizontal cuts between strands in 0-based index\nnotation\n"],["hc_between_strands_as_original_class","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-hc_between_strands_as_original_class","()","<p>Returns the same contents as hc_between_strands, but returns original data\nstructure used in the class. …\n"],["header","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-header","()","<p>Shows first line of the result data, for example, &#39;CLUSTAL W (1.82)\nmultiple sequence alignment&#39;. …\n"],["header","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-header","()","<p>Shows first line of the result data, for example, &#39;CLUSTAL W (1.82)\nmultiple sequence alignment&#39;. …\n"],["height","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-height","()","<p>Deprecated. Same as self.graphics.height (additional nil checks may be\nneeded).\n<p>height (Integer or nil) …\n"],["height=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-height-3D","(val)","<p>Deprecated. Same as self.graphics.height= (additional nil checks may be\nneeded).\n"],["helix","Bio::PDB","Bio/PDB.html#method-i-helix","(helixID = nil)","<p>Gets HELIX records. If no arguments are given, it returns all HELIX\nrecords. (Returns an array of <code>Bio::PDB::Record::HELIX</code> …\n"],["helix","Bio::TMHMM::Report","Bio/TMHMM/Report.html#method-i-helix","()","<p>Returns an Array of Bio::TMHMM::TMH including only “TMhelix”.\n"],["helper_for_to_array_index","Bio::RestrictionEnzyme::DoubleStranded::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/DoubleStranded/CutLocationsInEnzymeNotation.html#method-i-helper_for_to_array_index","(a)",""],["hetatm","Bio::PDB::Heterogen","Bio/PDB/Heterogen.html#method-i-hetatm","()","<p>Always returns true.\n<p>If the residue is HETATM, returns true. Otherwise, returns false.\n"],["hetatm","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-hetatm","()","<p>Always returns false.\n<p>If the residue is HETATM, returns true. Otherwise, returns false.\n"],["hetatms","Bio::PDB::HetatmFinder","Bio/PDB/HetatmFinder.html#method-i-hetatms","()","<p>returns all HETATMs\n"],["heterogens","Bio::PDB::HeterogenFinder","Bio/PDB/HeterogenFinder.html#method-i-heterogens","()","<p>returns all heterogens\n"],["hetnam","Bio::PDB::ChemicalComponent","Bio/PDB/ChemicalComponent.html#method-i-hetnam","()","<p>The name of the chemical component. Returns a string (or nil, if the entry\nis something wrong).\n"],["hetsyn","Bio::PDB::ChemicalComponent","Bio/PDB/ChemicalComponent.html#method-i-hetsyn","()","<p>Synonyms for the comical component. Returns an array of strings.\n"],["hi","Bio::UniProtKB","Bio/UniProtKB.html#method-i-hi","()","<p>The HI line\n<p>Bio::UniProtKB#hi #=&gt; hash\n"],["higher_priority_elements","Bio::FlatFile::AutoDetect::RuleSpecial","Bio/FlatFile/AutoDetect/RuleSpecial.html#method-i-higher_priority_elements","()","<p>always returns void array\n"],["hit2acc","Bio::Hinv","Bio/Hinv.html#method-c-hit2acc","(hit)","<p>Bio::Hinv.hit2acc(“HIT000022181”)  # =&gt; “AK097327”\n"],["hit_cnt","Bio::Hinv","Bio/Hinv.html#method-c-hit_cnt","()","<p>Bio::Hinv.hit_cnt  # =&gt; 187156\n"],["hit_definition","Bio::Hinv","Bio/Hinv.html#method-c-hit_definition","(hit)","<p>Bio::Hinv.hit_definition(“HIT000000001”)  # =&gt; “Rho guanine …”\n"],["hit_from","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-i-hit_from","()","<p>start position of the hit(target) (the first position is 1)\n"],["hit_from","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-hit_from","()","<p>Returns start position of the genomic (target, hit) (the first position is\n1).\n"],["hit_id","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-hit_id","()",""],["hit_id","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-hit_id","()",""],["hit_pubmedid","Bio::Hinv","Bio/Hinv.html#method-c-hit_pubmedid","(hit)","<p>Bio::Hinv.hit_pubmedid(“HIT000053961”)  # =&gt; [7624364, 11279095, … ]\n"],["hit_strand","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-hit_strand","()","<p>Returns strand information of the genomic (target, hit). Returns\n&#39;plus&#39;, &#39;minus&#39;, or …\n"],["hit_to","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-i-hit_to","()","<p>end position of the hit(target) (including its position)\n"],["hit_to","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-hit_to","()","<p>Returns end position (including its position) of the genomic (target, hit).\n"],["hit_xml","Bio::Hinv","Bio/Hinv.html#method-c-hit_xml","(hit)","<p>Bio::Hinv.hit_xml(“HIT000000001”)  # =&gt; “&lt;?xml version=”1.0“ …” …\n"],["hits","Bio::Blast::Bl2seq::Report::Iteration","Bio/Blast/Bl2seq/Report/Iteration.html#method-i-hits","()","<p>Returns the hits of the iteration. It returns an array of\nBio::Blast::Bl2seq::Report::Hit objects.\n"],["hits","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-hits","()","<p>Same as <code>iterations.last.hits</code>. Returns the last iteration&#39;s\nhits. Returns an array of Bio::Blast::Default::Report::Hit …\n"],["hits","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-hits","()","<p>Returns the hits of the iteration. It returns an array of\nBio::Blast::Default::Report::Hit objects.\n"],["hits","Bio::Blast::Report","Bio/Blast/Report.html#method-i-hits","()","<p>Returns a Array of Bio::Blast::Report::Hits of the last iteration. Shortcut\nfor the last iteration&#39;s …\n"],["hits_for_pattern","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-hits_for_pattern","()","<p>(PHI-BLAST) Returns hits for pattern. ????\n"],["hits_found_again","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-hits_found_again","()","<p>(PSI-BLAST) Returns hits which have been found again in the iteration. It\nreturns an array of Bio::Blast::Default::Report::Hit …\n"],["hits_newly_found","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-hits_newly_found","()","<p>(PSI-BLAST) Returns hits which have been newly found in the iteration. It\nreturns an array of Bio::Blast::Default::Report::Hit …\n"],["hix2hit","Bio::Hinv","Bio/Hinv.html#method-c-hix2hit","(hix)","<p>Bio::Hinv.hix2hit(“HIX0000004”)  # =&gt; [“HIT000012846”, … ]\n"],["hix_cnt","Bio::Hinv","Bio/Hinv.html#method-c-hix_cnt","()","<p>Bio::Hinv.hix_cnt  # =&gt; 36073\n"],["hix_represent","Bio::Hinv","Bio/Hinv.html#method-c-hix_represent","(hix)","<p>Bio::Hinv.hix_represent(“HIX0000001”)  # =&gt; “HIT000022181”\n"],["ho","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-ho","()","<p>HO      Homologs (suggested)\n"],["hseq","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-i-hseq","()","<p>hit(target) sequence (with gaps) of the alignment of the segment pair.\n"],["hseq","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-hseq","()","<p>Returns the sequence (with gaps) of the genomic (target, hit).\n"],["hsp_len","Bio::Blast::Report","Bio/Blast/Report.html#method-i-hsp_len","()","<p>Effective HSP length\n"],["hsps","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-hsps","()",""],["hsps","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-hsps","()",""],["hsps","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-hsps","()",""],["http_post","Bio::Command","Bio/Command.html#method-i-http_post","(http, path, data, header = {})","<p>Same as:\n\n<pre>http = Net::HTTP.new(...); http.post(path, data, header)</pre>\n<p>and  it uses proxy if an environment …\n"],["http_post_form","Bio::Command","Bio/Command.html#method-i-http_post_form","(http, path, params = nil, header = {})","<p>Same as:\n\n<pre>http = Net::HTTP.new(...); http.post_form(path, params)</pre>\n<p>and  it uses proxy if an environment variable …\n"],["iCode=","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-iCode-3D","(iCode)","<p>iCode=()\n"],["id","Bio::GFF::GFF3::Record","Bio/GFF/GFF3/Record.html#method-i-id","()","<p>shortcut to the ID attribute\n"],["id=","Bio::GFF::GFF3::Record","Bio/GFF/GFF3/Record.html#method-i-id-3D","(str)","<p>set ID attribute\n"],["id_line","Bio::EMBL","Bio/EMBL.html#method-i-id_line","(key=nil)","<p>returns contents in the ID line.\n<p>Bio::EMBL#id_line -&gt; &lt;ID Hash&gt;\n\n<p>where &lt;ID Hash&gt; is:\n"],["id_line","Bio::UniProtKB","Bio/UniProtKB.html#method-i-id_line","(key = nil)","<p>returns a Hash of the ID line.\n<p>returns a content (Int or String) of the ID line by a given key. Hash keys:\n…\n"],["id_search","Bio::Hinv","Bio/Hinv.html#method-c-id_search","(query)","<p>Bio::Hinv.id_search(“HIT00002218*”)  # =&gt; [“HIT000022181”, … ]\n"],["id_strings","Bio::FANTOM::MaXML::Sequence","Bio/FANTOM/MaXML/Sequence.html#method-i-id_strings","()",""],["id_strings","Bio::FANTOM::MaXML::Sequences","Bio/FANTOM/MaXML/Sequences.html#method-i-id_strings","()",""],["id_strings","Bio::FastaDefline","Bio/FastaDefline.html#method-i-id_strings","()","<p>Shows ID-like strings. Returns an array of strings.\n"],["identifiers","Bio::FastaFormat","Bio/FastaFormat.html#method-i-identifiers","()","<p>Parsing FASTA Defline, and extract IDs. IDs are NSIDs (NCBI standard FASTA\nsequence identifiers) or “:”-separated …\n"],["identity","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-identity","()","<p>Same as hsps.first.identity. Returns nil if there are no hsp in the hit.\n(Compatibility method with  …\n"],["identity","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-identity","()",""],["identity","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-identity","()","<p>percent identity\n"],["illegal_bases","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-illegal_bases","()","<p>Returns an alphabetically sorted array of any non-standard bases  (other\nthan &#39;atgcu&#39;).\n\n<pre>s = Bio::Sequence::NA.new(&#39;atgStgQccR&#39;) ...</pre>\n"],["import_tsv_files","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-import_tsv_files","(flag_primary, mode, sort_proc, *files)",""],["imsut","Bio::PSORT::PSORT1","Bio/PSORT/PSORT1.html#method-c-imsut","()","<p>Returns a PSORT1 CGI Driver object (Bio::PSORT::PSORT1::Remote)\n<p>connecting to the IMSUT server.\n"],["imsut","Bio::PSORT::PSORT2","Bio/PSORT/PSORT2.html#method-c-imsut","()","<p>Returns a PSORT2 CGI Driver object (Bio::PSORT::PSORT2::Remote)\n<p>connecting to the IMSUT server.\n"],["in","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-in","()","<p>IN      Interacting factors (factor accession no.; factor name;  IN     \nbiological species.)\n"],["include?","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-include-3F","(key)","<p>Searching databank. If some entries are found, returns an array of unique\nIDs (primary identifiers). …\n"],["include?","Bio::FlatFileIndex::Template::NameSpace","Bio/FlatFileIndex/Template/NameSpace.html#method-i-include-3F","(key)",""],["include?","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-include-3F","(elem)","<p>Same usage as Array#include?\n"],["include?","Bio::RestrictionEnzyme::Range::CutRanges","Bio/RestrictionEnzyme/Range/CutRanges.html#method-i-include-3F","(i)",""],["include?","Bio::RestrictionEnzyme::Range::HorizontalCutRange","Bio/RestrictionEnzyme/Range/HorizontalCutRange.html#method-i-include-3F","(i)","<p>Check if a location falls within the minimum or maximum values of this\nrange.\n<p><strong>Arguments</strong>\n<p><code>i</code>: Location to …\n"],["include?","Bio::RestrictionEnzyme::Range::VerticalCutRange","Bio/RestrictionEnzyme/Range/VerticalCutRange.html#method-i-include-3F","(i)","<p>Check if a location falls within the minimum or maximum values of this\nrange.\n<p><strong>Arguments</strong>\n<p><code>i</code>: Location to …\n"],["include?","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-include-3F","(elem)","<p>Same usage as Array#include?\n"],["include?","Bio::Tree","Bio/Tree.html#method-i-include-3F","(node)","<p>If the node exists, returns true. Otherwise, returns false.\n"],["include_in_namespaces?","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-include_in_namespaces-3F","(key, *names)","<p>Same as #include?, but serching only specified namespaces.\n"],["include_in_primary?","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-include_in_primary-3F","(key)","<p>Same as #include?, but serching only primary namespace.\n"],["inclusion","Bio::Blast::Report","Bio/Blast/Report.html#method-i-inclusion","()","<p>Inclusion threshold (-h) : shortcuts for @parameters\n"],["index","Bio::AAindex1","Bio/AAindex1.html#method-i-index","(type = :float)","<p>Returns the index (Array) in the I line.\n<p>an argument: :string, :float, :zscore or :integer\n"],["index","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-index","(seq)","<p>Returns the key for a given sequence. If not found, returns nil.\n"],["index_type=","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-index_type-3D","(str)",""],["inhibitors","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-inhibitors","()","<p>INHIBITOR\n"],["init","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-init","(rs)",""],["init_fileids","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-init_fileids","()",""],["init_with_array","Bio::RestrictionEnzyme::DoubleStranded::CutLocationPair","Bio/RestrictionEnzyme/DoubleStranded/CutLocationPair.html#method-i-init_with_array","( ary )",""],["init_with_sorted_tsv_file","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-init_with_sorted_tsv_file","(filename, flag_primary = false)",""],["initialize_copy","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-initialize_copy","(other)","<p>initialize copy\n"],["initialize_copy","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-initialize_copy","(other)","<p>initialize copy\n"],["initialize_from_string","Bio::PDB::Record","Bio/PDB/Record.html#method-i-initialize_from_string","(str)","<p>initialize this record from the given string. <em>str</em> must be a line\n(in PDB format).\n<p>You can add continuation …\n"],["initialize_with_pattern_and_cut_locations","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-initialize_with_pattern_and_cut_locations","( s, raw_cl )",""],["initialize_with_pattern_and_cut_symbols","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-initialize_with_pattern_and_cut_symbols","( s )",""],["initialize_with_rebase","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-initialize_with_rebase","( e )",""],["initiation_score","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-i-initiation_score","()",""],["input","Bio::Sequence","Bio/Sequence.html#method-c-input","(str, format = nil)","<p>Create a new Bio::Sequence object from a formatted string (GenBank, EMBL,\nfasta format, etc.)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Sequence</span>.<span class=\"ruby-identifier\">input</span>(<span class=\"ruby-identifier\">str</span>)\n</pre>\n"],["insert_node","Bio::Tree","Bio/Tree.html#method-i-insert_node","(node1, node2, new_node, new_distance = nil)","<p>Insert a new node between adjacent nodes node1 and node2. The old edge\nbetween node1 and node2 are changed …\n"],["inspect","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-inspect","()","<p>visualizes the object (mainly for debug)\n"],["inspect","Bio::FlatFile::AutoDetect::RulesArray","Bio/FlatFile/AutoDetect/RulesArray.html#method-i-inspect","()","<p>visualize contents\n"],["inspect","Bio::PDB","Bio/PDB.html#method-i-inspect","()","<p>returns a string containing human-readable representation of this object.\n"],["inspect","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-inspect","()","<p>returns a string containing human-readable representation of this object.\n"],["inspect","Bio::PDB::Model","Bio/PDB/Model.html#method-i-inspect","()","<p>returns a string containing human-readable representation of this object.\n"],["inspect","Bio::PDB::Record","Bio/PDB/Record.html#method-i-inspect","()","<p>same as Struct#inspect.\n<p>Note that <code>do_parse</code> is automatically called before\n<code>inspect</code>.\n<p>(Warning: The do_parse …\n"],["inspect","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-inspect","()","<p>returns a string containing human-readable representation of this object.\n"],["inspect","Bio::Tree::Edge","Bio/Tree/Edge.html#method-i-inspect","()","<p>visualization of this object\n"],["inspect","Bio::Tree::Node","Bio/Tree/Node.html#method-i-inspect","()","<p>visualization of this object\n"],["interleaved?","Bio::Phylip::PhylipFormat","Bio/Phylip/PhylipFormat.html#method-i-interleaved-3F","()","<p>If the alignment format is “interleaved”, returns true. If not, returns\nfalse. It would mistake …\n"],["internal_data","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-internal_data","()","<p>gets internal data object\n"],["internal_data=","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-internal_data-3D","(a)","<p>sets internal data object\n"],["internal_data_hash","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-internal_data_hash","()","<p>gets internal hash object\n"],["internal_data_hash=","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-internal_data_hash-3D","(h)","<p>sets internal hash object\n"],["internal_http","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-i-internal_http","()","<p>Debug purpose only. Returns Net::HTTP object used inside the object. The\nmethod will be changed in the …\n"],["internal_sort_proc","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-c-internal_sort_proc","()",""],["introns","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-introns","()","<p>Returns introns of the hit. Some of them would contain untranscribed\nregions. Returns an array of Bio::Sim4::Report::SegmentPair …\n"],["introns","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-introns","()","<p>Returns introns of the hit. Some of them would contain untranscribed\nregions. Returns an array of Bio::Spidey::Report::SegmentPair …\n"],["io","Bio::FlatFile","Bio/FlatFile.html#method-i-io","()","<p>(DEPRECATED) IO object in the flatfile object.\n<p>Compatibility Note: Bio::FlatFile#io is deprecated. Please …\n"],["ip","Bio::MEDLINE","Bio/MEDLINE.html#method-i-ip","()","<p>IP   - Issue\n\n<pre>The number of the issue, part, or supplement of the journal in which\nthe article was published.</pre>\n"],["ipr_id","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-ipr_id","()","<p>the corresponding InterPro entry (if any).\n"],["ipr_odescription","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-ipr_odescription","()","<p>the descriotion of the InterPro entry.\n"],["is_empty?","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-is_empty-3F","()","<p>Returns true of matrix is empty.\n<p><strong>Returns</strong> &mdash; true or false\n\n"],["is_gap?","Bio::Alignment::PropertyMethods","Bio/Alignment/PropertyMethods.html#method-i-is_gap-3F","(s)","<p>If given character is a gap, returns true. Otherwise, return false. Note\nthat <em>s</em> must be a String which …\n"],["is_prior_to","Bio::FlatFile::AutoDetect::RuleTemplate","Bio/FlatFile/AutoDetect/RuleTemplate.html#method-i-is_prior_to","(elem)","<p>self is prior to the <em>elem</em>.\n"],["isolate","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-isolate","(*arg)","<p>Sequences in the alignment are duplicated. If keys are given to the\nargument, sequences of given keys …\n"],["issue","Bio::MEDLINE","Bio/MEDLINE.html#method-i-issue","()",""],["iubmb_reactions","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-iubmb_reactions","()",""],["journal","Bio::AAindex","Bio/AAindex.html#method-i-journal","()","<p>Returns journal name in the J line.\n"],["journal","Bio::LITDB","Bio/LITDB.html#method-i-journal","()","<p>JOURNAL\n"],["journal","Bio::MEDLINE","Bio/MEDLINE.html#method-i-journal","()",""],["journal","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-journal","(ids, format = \"full\", hash = {})","<p>Retrieve journal entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["journal","Bio::NCBI::REST::ESearch::Methods","Bio/NCBI/REST/ESearch/Methods.html#method-i-journal","(*args)","<p>alias for journals\n"],["jrnl","Bio::PDB","Bio/PDB.html#method-i-jrnl","(sub_record = nil)","<p>Gets JRNL records. If no arguments, it returns all JRNL records as a hash.\nIf sub record name is specified, …\n"],["kappa","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-kappa","()","<p>Same as <code>iterations.last.kappa</code>.\n"],["kappa","Bio::Blast::Report","Bio/Blast/Report.html#method-i-kappa","()","<p>Karlin-Altschul parameter K\n"],["kappa","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-kappa","()","<p>Return codeml kappa of model, when available\n"],["kcf","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-kcf","()","<p>ATOM, BOND\n"],["kcf","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-kcf","()","<p>ATOM, BOND lines.\n<p><strong>Returns</strong> &mdash; String\n\n"],["kcf","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-kcf","()","<p>ATOM, BOND\n"],["kegg_reactions","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-kegg_reactions","()",""],["keggclass","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-keggclass","()","<p>Returns CLASS field of the entry.\n"],["keggclass","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-keggclass","()","<p>CLASS\n"],["keggclass","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-keggclass","()","<p>Name of the KEGG class, described in the CLASS line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["keggclass","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-keggclass","()","<p>Returns CLASS field of the entry.\n"],["keggclass","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-keggclass","()","<p>Return the name of the KEGG class, described in the CLASS line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["keggclasses","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-keggclasses","()","<p>Returns an Array of biological classes in CLASS field.\n"],["keggclasses","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-keggclasses","()","<p>Returns an Array of biological classes in CLASS field.\n"],["keggorg2taxo","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-keggorg2taxo","(keggorg)",""],["keggorg2taxonomy","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-keggorg2taxonomy","(keggorg)",""],["keys","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-i-keys","()",""],["keys","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-keys","()",""],["keyword","Bio::LITDB","Bio/LITDB.html#method-i-keyword","()","<p>KEYWORD &#39;;;&#39;\n"],["keyword_search","Bio::Hinv","Bio/Hinv.html#method-c-keyword_search","(query)","<p>Bio::Hinv.keyword_search(“HIT00002218*”)  # =&gt; [“HIT000022181”, … ]\n"],["keywords","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-keywords","()",""],["keywords","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-keywords","()","<p>KEYWORDS – Returns contents of the KEYWORDS record as an Array of Strings.\n"],["keywords","Bio::PDB","Bio/PDB.html#method-i-keywords","()","<p>Keywords in “KEYWDS”. Returns an array of string.\n"],["ko_pathway","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-ko_pathway","()","<p>KO pathway described in the KO_PATHWAY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["korg2taxo","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-korg2taxo","(keggorg)","<p>Returns an array of taxonomy names the organism belongs. (e.g.\n&#39;eco&#39; -&gt;\n[&#39;proteogamma&#39;,&#39;proteobacteria&#39;,&#39;eubacteria&#39;,&#39;genes&#39;])\n…\n"],["korg2taxonomy","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-korg2taxonomy","(keggorg)",""],["kruskal","Bio::Pathway","Bio/Pathway.html#method-i-kruskal","()","<p>Kruskal method for finding minimam spaninng trees\n"],["kw","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-kw","()","<p>returns keywords in the KW line.\n<p>Bio::EMBLDB::Common#kw  -&gt; [ &lt;keyword&gt;* ]\n\n<p>KW Line; keyword (&gt;=1) …\n"],["label","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-label","()","<p>Deprecated. Same as self.graphics.name (additional nil checks may be\nneeded).\n<p>label of the &#39;graphics&#39; …\n"],["label=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-label-3D","(val)","<p>Deprecated. Same as self.graphics.name= (additional nil checks may be\nneeded).\n"],["lambda","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-lambda","()","<p>Same as <code>iterations.last.lambda</code>.\n"],["lambda","Bio::Blast::Report","Bio/Blast/Report.html#method-i-lambda","()","<p>Karlin-Altschul parameter Lamba\n"],["lap_at","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-lap_at","()","<p>Returns an array which contains [ query_start, query_end, target_start,\ntarget_end ]. (Compatibility …\n"],["lap_at","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-lap_at","()",""],["lap_at","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-lap_at","()",""],["lap_over","Bio::Fasta::Report","Bio/Fasta/Report.html#method-i-lap_over","(length_min = 0)","<p>Returns an Array of Bio::Fasta::Report::Hit objects having longer overlap\nlength than &#39;length_min&#39;. …\n"],["larger_than_zero","Bio::Nexus::Util","Bio/Nexus/Util.html#method-c-larger_than_zero","( i )","<p>Returns true if Integer i is not nil and larger than 0.\n<p><strong>Arguments</strong>:\n<p>(required) <em>i</em>: Integer\n"],["last","Bio::Features","Bio/Features.html#method-i-last","()","<p>Short cut for the Features#features.last\n"],["last","Bio::Locations","Bio/Locations.html#method-i-last","()","<p>Returns last Bio::Location object.\n"],["last","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-last","()","<p>Same usage as Array#last\n"],["last","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-last","()","<p>Same usage as Array#last\n"],["leaves","Bio::Tree","Bio/Tree.html#method-i-leaves","(node = nil, root = nil)","<p>If <em>node</em> is nil, returns an array of  all leaves (nodes connected\nwith one edge). Otherwise, gets all …\n"],["left_padding","Bio::RestrictionEnzyme::StringFormatting","Bio/RestrictionEnzyme/StringFormatting.html#method-i-left_padding","( s )","<p>Return the &#39;n&#39; padding on the left side of the strand\n<p><strong>Arguments</strong>\n<p><code>s</code>: sequence with extraneous &#39;n&#39; …\n"],["len","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-len","()","<p>Returns length of the hit.\n"],["len","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-len","()",""],["len","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-len","()",""],["len","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-len","()",""],["length","Bio::Fasta::Report::Hit::Query","Bio/Fasta/Report/Hit/Query.html#method-i-length","()","<p>Returns the sequence length. You can access this value by the\nReport::Hit#query_len method.\n"],["length","Bio::FastaFormat","Bio/FastaFormat.html#method-i-length","()","<p>Returns sequence length.\n"],["length","Bio::FastaNumericFormat","Bio/FastaNumericFormat.html#method-i-length","()","<p>Returns the number of elements in the numerical data, which will be the\nsame of its corresponding sequence …\n"],["length","Bio::GenBank","Bio/GenBank.html#method-i-length","()",""],["length","Bio::GenPept","Bio/GenPept.html#method-i-length","()",""],["length","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-length","()","<p>the length of the sequence in AA.\n"],["length","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-length","()",""],["length","Bio::Locations","Bio/Locations.html#method-i-length","()","<p>Returns a length of the spliced RNA.\n"],["length","Bio::Meme::Motif","Bio/Meme/Motif.html#method-i-length","()","<p>Computes the motif length\n"],["length","Bio::NBRF","Bio/NBRF.html#method-i-length","()","<p>Returns sequence length.\n"],["length","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-length","()",""],["length","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-length","()",""],["length","Bio::TargetP::Report","Bio/TargetP/Report.html#method-i-length","()",""],["library_id","Bio::FANTOM::MaXML::Sequence","Bio/FANTOM/MaXML/Sequence.html#method-i-library_id","()",""],["lineage","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-lineage","()","<p>Returns contents of the TAXONOMY/LINEAGE record as a String.\n"],["list_falsenegative","Bio::PROSITE","Bio/PROSITE.html#method-i-list_falsenegative","(by_name = nil)","<p>Returns\n"],["list_falsepositive","Bio::PROSITE","Bio/PROSITE.html#method-i-list_falsepositive","(by_name = nil)","<p>Returns\n"],["list_output_formats","Bio::Sequence::Format","Bio/Sequence/Format.html#method-i-list_output_formats","()","<p>Returns a list of available output formats for the sequence\n<p><strong>Arguments</strong>:\n<p><strong>Returns</strong> &mdash; Array of Symbols\n"],["list_potentialhit","Bio::PROSITE","Bio/PROSITE.html#method-i-list_potentialhit","(by_name = nil)","<p>Returns\n"],["list_truepositive","Bio::PROSITE","Bio/PROSITE.html#method-i-list_truepositive","(by_name = nil)","<p>Returns\n"],["list_unknown","Bio::PROSITE","Bio/PROSITE.html#method-i-list_unknown","(by_name = nil)","<p>Returns\n"],["list_xref","Bio::PROSITE","Bio/PROSITE.html#method-i-list_xref","(flag, by_name = nil)","<p>Returns\n"],["lnL","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-lnL","()","<p>Return codeml log likelihood of model\n"],["load_parameters","Bio::PAML::Common","Bio/PAML/Common.html#method-i-load_parameters","(str)","<p>Loads parameters from the specified string. Note that all previous\nparameters are erased. Returns the …\n"],["load_yaml","Bio::REBASE","Bio/REBASE.html#method-c-load_yaml","( f_enzyme, f_reference=nil, f_supplier=nil )","<p>Read YAML formatted files\n\n<pre>rebase = Bio::REBASE.load_yaml( &#39;enz.yaml&#39; )\nrebase = Bio::REBASE.load_yaml( ...</pre>\n"],["loc","Bio::TargetP::Report","Bio/TargetP/Report.html#method-i-loc","()","<p>Returns the predicted localization signal:\n<p>S (Signal peptide)\n<p>M (mTP)\n"],["local","Bio::Blast","Bio/Blast.html#method-c-local","(program, db, options = '', blastall = nil)","<p>This is a shortcut for Bio::Blast.new:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Blast</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-identifier\">program</span>, <span class=\"ruby-identifier\">database</span>, <span class=\"ruby-identifier\">options</span>)\n</pre>\n<p>is equivalent to\n"],["local","Bio::Fasta","Bio/Fasta.html#method-c-local","(program, db, option = '')","<p>Returns a FASTA factory object (Bio::Fasta) to run FASTA search on local\ncomputer.\n"],["locations","Bio::Feature","Bio/Feature.html#method-i-locations","()","<p>Returns a Bio::Locations object translated from the position string.\n"],["locations","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-locations","()","<p>The position in the genome described in the POSITION line as Bio::Locations\nobject.\n<p><strong>Returns</strong> &mdash; Bio::Locations …\n\n"],["locus","Bio::FastaDefline","Bio/FastaDefline.html#method-i-locus","()","<p>Shows locus. If the entry has more than two of such IDs, only the first ID\nare shown. Returns a string …\n"],["locus","Bio::FastaFormat","Bio/FastaFormat.html#method-i-locus","()","<p>Returns locus.\n"],["locus","Bio::GenBank","Bio/GenBank.html#method-i-locus","()","<p>Accessor methods for the contents of the LOCUS record.\n"],["locus","Bio::GenPept","Bio/GenPept.html#method-i-locus","()",""],["locus","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-locus","()","<p>LOCUS – Locus class must be defined in child classes.\n"],["log","Bio::ClustalW","Bio/ClustalW.html#method-i-log","()","<p>This method will be deprecated.\n<p>Returns last messages of CLUSTAL W execution.\n"],["log","Bio::MAFFT","Bio/MAFFT.html#method-i-log","()","<p>log is deprecated (no replacement) and returns empty string.\n"],["log","Bio::Sim4","Bio/Sim4.html#method-i-log","()","<p>log is deprecated (no replacement) and returns empty string.\n"],["logy_minus_logx","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-logy_minus_logx","()",""],["longer_than_zero","Bio::Nexus::Util","Bio/Nexus/Util.html#method-c-longer_than_zero","( str )","<p>Returns true if String str is not nil and longer than 0.\n<p><strong>Arguments</strong>:\n<p>(required) <em>str</em>: String\n"],["lower_priority_elements","Bio::FlatFile::AutoDetect::RuleSpecial","Bio/FlatFile/AutoDetect/RuleSpecial.html#method-i-lower_priority_elements","()","<p>always returns void array\n"],["lowest_common_ancestor","Bio::Tree","Bio/Tree.html#method-i-lowest_common_ancestor","(node1, node2, root = nil)","<p>Gets the lowest common ancestor of the two nodes. If <em>root</em>\nisn&#39;t specified or <em>root</em> is <code>nil</code>, @root is …\n"],["lstrip","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-lstrip","()","<p>Not-destructive version of alignment_lstrip!. Returns a new alignment.\n"],["lstrip!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-lstrip-21","()",""],["ma","Bio::PROSITE","Bio/PROSITE.html#method-i-ma","()","<p>MA  Matrix/profile                     (&gt;=0 per entry)\n\n<pre>see - ma2re method</pre>\n<p>Returns\n"],["ma","Bio::TRANSFAC::MATRIX","Bio/TRANSFAC/MATRIX.html#method-i-ma","()",""],["ma2re","Bio::PROSITE","Bio/PROSITE.html#method-i-ma2re","(matrix)","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">prosite</span> <span class=\"ruby-identifier\">profile</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">regular</span> <span class=\"ruby-identifier\">expression</span>\n</pre>\n<p>prosite/profile.txt:\n<p>Returns\n"],["make_cgi_params","Bio::Command","Bio/Command.html#method-i-make_cgi_params","(params)","<p>Builds parameter string for from Hash of parameters for\napplication/x-www-form-urlencoded.\n<p><strong>Arguments</strong>: …\n"],["make_cgi_params_key_value","Bio::Command","Bio/Command.html#method-i-make_cgi_params_key_value","(key, value)","<p>Builds parameter string for from a key string and a value (or values) for\napplication/x-www-form-urlencoded. …\n"],["make_command_line","Bio::Command","Bio/Command.html#method-i-make_command_line","(ary)","<p>Generate command line string with special characters escaped.\n<p><strong>Arguments</strong>:\n<p>(required) <em>ary</em>: Array containing …\n"],["make_command_line_options","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-make_command_line_options","(prior_options = [])","<p>Returns an array for command-line options. prior_options are preferred to\nbe used.\n"],["make_command_line_unix","Bio::Command","Bio/Command.html#method-i-make_command_line_unix","(ary)","<p>Generate command line string with special characters escaped for UNIX\nshells.\n<p><strong>Arguments</strong>:\n<p>(required) <em>ary</em> …\n"],["make_command_line_windows","Bio::Command","Bio/Command.html#method-i-make_command_line_windows","(ary)","<p>Generate command line string with special characters escaped for cmd.exe on\nWindows.\n<p><strong>Arguments</strong>:\n<p>(required) …\n"],["make_default","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-c-make_default","()","<p>make a default of default autodetect object\n"],["makeindex","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-c-makeindex","(is_bdb, dbname, format, options, *files)",""],["makeindexBDB","Bio::FlatFileIndex::Indexer","Bio/FlatFileIndex/Indexer.html#method-c-makeindexBDB","(name, parser, options, *files)",""],["makeindexFlat","Bio::FlatFileIndex::Indexer","Bio/FlatFileIndex/Indexer.html#method-c-makeindexFlat","(name, parser, options, *files)",""],["mapped_to?","Bio::Map::ActsLikeMarker","Bio/Map/ActsLikeMarker.html#method-i-mapped_to-3F","(map)","<p>Check whether this marker is mapped to a given Bio::Map::SimpleMap.\n<p><strong>Arguments</strong>:\n<p><em>map</em>: a Bio::Map::SimpleMap …\n"],["mapping","Bio::FlatFileIndex::BDB_1::PrimaryNameSpace","Bio/FlatFileIndex/BDB_1/PrimaryNameSpace.html#method-i-mapping","(filename)",""],["mapping","Bio::FlatFileIndex::BDB_1::SecondaryNameSpace","Bio/FlatFileIndex/BDB_1/SecondaryNameSpace.html#method-i-mapping","(filename)",""],["mapping","Bio::FlatFileIndex::Flat_1::PrimaryNameSpace","Bio/FlatFileIndex/Flat_1/PrimaryNameSpace.html#method-i-mapping","(filename)",""],["mapping","Bio::FlatFileIndex::Flat_1::SecondaryNameSpace","Bio/FlatFileIndex/Flat_1/SecondaryNameSpace.html#method-i-mapping","(filename)",""],["mapping","Bio::FlatFileIndex::Template::NameSpace","Bio/FlatFileIndex/Template/NameSpace.html#method-i-mapping","(filename)",""],["mappings_on","Bio::Map::ActsLikeMarker","Bio/Map/ActsLikeMarker.html#method-i-mappings_on","(map)","<p>Return all mappings of this marker on a given map.\n<p><strong>Arguments</strong>:\n<p><em>map</em>: an object that mixes in Bio::Map::ActsLikeMap …\n"],["mask","Bio::Fastq","Bio/Fastq.html#method-i-mask","(threshold, mask_char = 'n')","<p>Masks low quality sequence regions. For each sequence position, if the\nquality score is smaller than …\n"],["mask_with_enumerator","Bio::Sequence::SequenceMasker","Bio/Sequence/SequenceMasker.html#method-i-mask_with_enumerator","(enum, mask_char)","<p>Masks the sequence with each value in the <em>enum</em>. The\n<em>enum&lt;em&gt; should be an array or enumerator.</em> …\n"],["mask_with_error_probability","Bio::Sequence::SequenceMasker","Bio/Sequence/SequenceMasker.html#method-i-mask_with_error_probability","(threshold, mask_char)","<p>Masks high error-probability sequence regions. For each sequence position,\nif the error probability is …\n"],["mask_with_quality_score","Bio::Sequence::SequenceMasker","Bio/Sequence/SequenceMasker.html#method-i-mask_with_quality_score","(threshold, mask_char)","<p>Masks low quality sequence regions. For each sequence position, if the\nquality score is smaller than …\n"],["mass","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-mass","()","<p>MASS\n"],["mass","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-mass","()","<p>Molecular weight described in the MASS line.\n<p><strong>Returns</strong> &mdash; Float\n\n"],["mass","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-mass","()","<p>MASS\n"],["match","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-match","()","<p>Match nucleotides.\n"],["match_end","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-match_end","()","<p>the end of the domain match.\n"],["match_line","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-match_line","(opt = {})","<p>Returns the match line stirng of the alignment of nucleic- or amino-acid\nsequences. The type of the sequence …\n"],["match_line","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-match_line","()","<p>Shows “match line” of CLUSTAL&#39;s alignment result, for example, &#39;:*\n:* .*   *       …\n"],["match_line","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-match_line","()","<p>Shows “match line” of CLUSTAL&#39;s alignment result, for example, &#39;:*\n:* .*   *       …\n"],["match_line_amino","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-match_line_amino","(opt = {})","<p>Returns the match line stirng of the alignment of amino-acid sequences.\n<p>It resembles the BioPerl&#39;s …\n"],["match_line_amino","Bio::Alignment::SiteMethods","Bio/Alignment/SiteMethods.html#method-i-match_line_amino","(opt = {})","<p>Returns the match-line character for the site. This is amino-acid version.\n"],["match_line_nuc","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-match_line_nuc","(opt = {})","<p>Returns the match line stirng of the alignment of nucleic-acid sequences.\n<p>It resembles the BioPerl&#39;s …\n"],["match_line_nuc","Bio::Alignment::SiteMethods","Bio/Alignment/SiteMethods.html#method-i-match_line_nuc","(opt = {})","<p>Returns the match-line character for the site. This is nucleic-acid\nversion.\n"],["match_start","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-match_start","()","<p>the start of the domain match.\n"],["matrix","Bio::AAindex2","Bio/AAindex2.html#method-i-matrix","(aa1 = nil, aa2 = nil)","<p>Returns amino acids matrix in Matrix.\n"],["matrix","Bio::Blast::Report","Bio/Blast/Report.html#method-i-matrix","()","<p>Matrix used (-M) : shortcuts for @parameters\n"],["max","Bio::RestrictionEnzyme::Range::CutRanges","Bio/RestrictionEnzyme/Range/CutRanges.html#method-i-max","()",""],["max_repeat","Bio::PROSITE","Bio/PROSITE.html#method-i-max_repeat","()","<p>Returns\n"],["max_vertical","Bio::RestrictionEnzyme::Range::CutRanges","Bio/RestrictionEnzyme/Range/CutRanges.html#method-i-max_vertical","()",""],["maxids","Bio::Fetch","Bio/Fetch.html#method-i-maxids","()","<p>A dbfetch server will only return entries up to a given maximum number.\nThis method retrieves that number …\n"],["merge","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-merge","(*other)","<p>Merges given alignment and returns a new alignment.\n"],["merge!","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-merge-21","(*other)","<p>Merge given alignment. Note that it is destructive method.\n"],["mesh","Bio::MEDLINE","Bio/MEDLINE.html#method-i-mesh","()",""],["message","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-message","()","<p>(PSI-BLAST) Same as <code>iterations.last.message</code>.\n"],["message","Bio::Blast::Report","Bio/Blast/Report.html#method-i-message","()","<p>Returns a String (or nil) containing execution message of the last\niteration (typically “CONVERGED”). …\n"],["method_missing","Bio::FastaDefline","Bio/FastaDefline.html#method-i-method_missing","(name, *args)",""],["method_missing","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-method_missing","(name, arg = nil)",""],["method_missing","Bio::NCBI::REST::ESearch::Methods","Bio/NCBI/REST/ESearch/Methods.html#method-i-method_missing","(*args)","<p>nucleotide(“tardigrada”) nucleotide(“tardigrada”, 0) pubmed(“tardigrada”) …\n"],["method_missing","Bio::Registry::DB","Bio/Registry/DB.html#method-i-method_missing","(meth_id)",""],["method_name","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-method_name","()","<p>the analysis method launched.\n"],["mh","Bio::MEDLINE","Bio/MEDLINE.html#method-i-mh","()","<p>MH   - MeSH Terms\n\n<pre>NLM&#39;s controlled vocabulary.</pre>\n"],["midline","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-midline","()","<p>Same as hsps.first.midline. Returns nil if there are no hsp in the hit.\n(Compatibility method with FASTA …\n"],["midline","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-midline","()",""],["milli_bad","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-milli_bad","()","<p>Calculates the pslCalcMilliBad value defined in the BLAT FAQ\n(genome.ucsc.edu/FAQ/FAQblat#blat4).\n<p>The …\n"],["min","Bio::RestrictionEnzyme::Range::CutRanges","Bio/RestrictionEnzyme/Range/CutRanges.html#method-i-min","()",""],["min_vertical","Bio::RestrictionEnzyme::Range::CutRanges","Bio/RestrictionEnzyme/Range/CutRanges.html#method-i-min_vertical","()",""],["mismatch","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-mismatch","()","<p>Mismatch nucleotides.\n"],["missing_char","Bio::Alignment::PropertyMethods","Bio/Alignment/PropertyMethods.html#method-i-missing_char","()","<p>Character if the site is missing or unknown.\n"],["missing_mrna_ends","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-missing_mrna_ends","()","<p>Returns missing mRNA ends of the hit.\n"],["mktmpdir","Bio::Command","Bio/Command.html#method-i-mktmpdir","(prefix_suffix = nil, tmpdir = nil, &block)","<p>Backport of Dir.mktmpdir in Ruby 1.9.\n<p>Same as Dir.mktmpdir(prefix_suffix) in Ruby 1.9.\n<p><strong>Arguments</strong>:\n"],["mm","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-mm","()",""],["modelnum","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-modelnum","()","<p>Return the model number\n"],["modules","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-modules","()",""],["modules","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-modules","()",""],["modules_as_hash","Bio::KEGG::Common::ModulesAsHash","Bio/KEGG/Common/ModulesAsHash.html#method-i-modules_as_hash","()","<p>Returns MODULE field as a Hash. Each key of the hash is KEGG MODULE ID, and\neach value is the name of …\n"],["modules_as_hash","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-modules_as_hash","()","<p>Returns MODULE field as a Hash. Each key of the hash is KEGG MODULE ID, and\neach value is the name of …\n"],["modules_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-modules_as_hash","()","<p>Returns MODULE field as a Hash. Each key of the hash is KEGG MODULE ID, and\neach value is the name of …\n"],["modules_as_strings","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-modules_as_strings","()","<p>Returns MODULE field of the entry.\n<p><strong>Returns</strong> &mdash; Array containing String objects\n\n"],["modules_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-modules_as_strings","()","<p>Returns MODULE field of the entry.\n<p><strong>Returns</strong> &mdash; Array containing String objects\n\n"],["molecular_weight","Bio::Sequence::AA","Bio/Sequence/AA.html#method-i-molecular_weight","()","<p>Estimate molecular weight based on  Fasman1976\n\n<pre>s = Bio::Sequence::AA.new(&quot;RRLE&quot;)\nputs s.molecular_weight ...</pre>\n"],["molecular_weight","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-molecular_weight","()","<p>Estimate molecular weight (using the values from BioPerl&#39;s  SeqStats.pm\nmodule).\n\n<pre>s = Bio::Sequence::NA.new(&#39;atggcgtga&#39;) ...</pre>\n"],["molecule","Bio::EMBL","Bio/EMBL.html#method-i-molecule","()","<p>returns MOLECULE_TYPE in the ID line.\n<p>Bio::EMBL#molecule -&gt; String\n\n"],["molecule","Bio::UniProtKB","Bio/UniProtKB.html#method-i-molecule","()","<p>returns a MOLECULE_TYPE in the ID line.\n<p>A short-cut for Bio::UniProtKB#id_line(&#39;MOLECULE_TYPE&#39;). …\n"],["molecule_type","Bio::EMBL","Bio/EMBL.html#method-i-molecule_type","()",""],["molecule_type","Bio::UniProtKB","Bio/UniProtKB.html#method-i-molecule_type","()",""],["moltype","Bio::Fasta::Report::Hit::Query","Bio/Fasta/Report/Hit/Query.html#method-i-moltype","()","<p>Returns &#39;p&#39; for protein sequence, &#39;D&#39; for nucleotide\nsequence.\n"],["motif","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-motif","()","<p>The specification of the method will be changed in the future. Please use\nBio::KEGG::GENES#motifs.\n<p>Motif …\n"],["motifs","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-motifs","()","<p>MOTIF\n"],["motifs","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-motifs","()",""],["motifs_as_hash","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-motifs_as_hash","()","<p>Motif information described in the MOTIF lines.\n<p><strong>Returns</strong> &mdash; Hash\n\n"],["motifs_as_strings","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-motifs_as_strings","()","<p>Motif information described in the MOTIF lines.\n<p><strong>Returns</strong> &mdash; Strings\n\n"],["mrna","Bio::Spidey::Report","Bio/Spidey/Report.html#method-i-mrna","()","<p>Returns sequence informationsof the mRNA. Returns a\nBio::Spidey::Report::SeqDesc object. This would be …\n"],["mrna","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-mrna","()","<p>Returns sequence informations of the mRNA. Returns a\nBio::Spidey::Report::SeqDesc object. This would …\n"],["mx","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-mx","()","<p>MX      Matrix (matrix accession no.; matrix identifier)\n"],["n_s","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-n_s","()","<p>“N&#39;s”. Number of &#39;N&#39; bases.\n"],["na","Bio::NucleicAcid::Data","Bio/NucleicAcid/Data.html#method-i-na","()",""],["na","Bio::Sequence","Bio/Sequence.html#method-i-na","()","<p>Transform the sequence wrapped in the current Bio::Sequence object into a\nBio::Sequence::NA object.  …\n"],["na","Bio::TRANSFAC::MATRIX","Bio/TRANSFAC/MATRIX.html#method-i-na","()","<p>NA      Name of the binding factor\n"],["nalen","Bio::FastaFormat","Bio/FastaFormat.html#method-i-nalen","()","<p>Returens the length of Bio::Sequence::NA.\n"],["nalen","Bio::Fastq","Bio/Fastq.html#method-i-nalen","()","<p>length of naseq\n"],["nalen","Bio::GenBank","Bio/GenBank.html#method-i-nalen","()",""],["nalen","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-nalen","()",""],["nalen","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-nalen","()","<p>Returns number of nucleotides from the STATISTICS record as a Fixnum.\n"],["nalen","Bio::NBRF","Bio/NBRF.html#method-i-nalen","()","<p>Returens the length of sequence. If you call nalen for protein sequence,\nRuntimeError will be occurred. …\n"],["name","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-name","(x)",""],["name","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-name","()","<p>The first name recorded in the NAME field.\n"],["name","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-name","()","<p>The first name recorded in the NAME field.\n<p><strong>Returns</strong> &mdash; String\n\n"],["name","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-name","()",""],["name","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-name","()","<p>Returns the NAME line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["name","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-name","()","<p>NAME – Returns contents of the NAME record as a String.\n"],["name","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-name","()","<p>NAME\n"],["name","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-name","(db_abbrev)","<p>Returns a canonical database name for the abbreviation. (e.g. &#39;ec&#39;\n-&gt; &#39;enzyme&#39;,  &#39;hsa&#39; …\n"],["name","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-name","()","<p>Name of the module, described in the NAME line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["name","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-name","()","<p>Returns NAME field of the entry.\n"],["name","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-name","()","<p>Name of the pathway, described in the NAME line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["name","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-name","()","<p>Name of the reaction, described in the NAME line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["name","Bio::NucleicAcid::Data","Bio/NucleicAcid/Data.html#method-i-name","(x)",""],["name","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-name","()","<p>Return the model name, e.g. &#39;M0&#39; or &#39;M7&#39;\n"],["name","Bio::PROSITE","Bio/PROSITE.html#method-i-name","()","<p>ID  Identification                     (Begins each entry; 1 per entry)\n\n<pre>ID   ENTRY_NAME; ENTRY_TYPE.  ...</pre>\n"],["name","Bio::TargetP::Report","Bio/TargetP/Report.html#method-i-name","()","<p>Returns the name of query sequence.\n"],["name2one","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-name2one","(x)",""],["name2three","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-name2three","(x)",""],["name=","Bio::FlatFile::AutoDetect::RuleSpecial","Bio/FlatFile/AutoDetect/RuleSpecial.html#method-i-name-3D","(x)","<p>modification of @name is inhibited.\n"],["name_by_abbrev","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-name_by_abbrev","(db_abbrev)","<p>deprecated\n"],["names","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-names","()","<p>backward compatibility\n"],["names","Bio::FlatFileIndex::Indexer::NameSpaces","Bio/FlatFileIndex/Indexer/NameSpaces.html#method-i-names","()",""],["names","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-names","()",""],["names","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-names","()","<p>NAME\n"],["names","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-names","()","<p>Names described in the NAME line.\n<p><strong>Returns</strong> &mdash; Array containing String objects\n\n"],["names","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-names","()","<p>NAME\n"],["names","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-names","()",""],["names","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-names","()","<p>the “name” attribute may contain multiple names separated with space\ncharacters. This method …\n"],["names","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-names","()","<p>Returns an Array of names in NAME field.\n"],["names","Bio::NucleicAcid::Data","Bio/NucleicAcid/Data.html#method-i-names","()","<p>backward compatibility\n"],["names","Bio::Sequence::AA","Bio/Sequence/AA.html#method-i-names","()","<p>Generate the list of the names of each residue along with the sequence\n(full name).  Names used in bioruby …\n"],["names","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-names","()","<p>Generate the list of the names of each nucleotide along with the sequence\n(full name).  Names used in …\n"],["names_as_array","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-names_as_array","()","<p>Names of the entry as an Array, described in the NAME line.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["namespaces","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-namespaces","()","<p>Returns names of namespaces defined in the databank. (example: [\n&#39;LOCUS&#39;, &#39;ACCESSION&#39;, …\n"],["nar","Bio::Reference","Bio/Reference.html#method-i-nar","()","<p>Returns reference formatted in the Nucleic Acids Reseach \n(nar.oxfordjournals.org) style.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># ref is a Bio::Reference ...</span>\n</pre>\n"],["naseq","Bio::EMBL","Bio/EMBL.html#method-i-naseq","()",""],["naseq","Bio::FastaFormat","Bio/FastaFormat.html#method-i-naseq","()","<p>Returens the Bio::Sequence::NA.\n"],["naseq","Bio::Fastq","Bio/Fastq.html#method-i-naseq","()","<p>returns Bio::Sequence::NA\n"],["naseq","Bio::GCG::Seq","Bio/GCG/Seq.html#method-i-naseq","()","<p>If you know the sequence is NA, use this method. Returens a\nBio::Sequence::NA object.\n<p>If you call naseq …\n"],["naseq","Bio::GenBank","Bio/GenBank.html#method-i-naseq","()",""],["naseq","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-naseq","()",""],["naseq","Bio::NBRF","Bio/NBRF.html#method-i-naseq","()","<p>Returens the nucleic acid sequence. If you call naseq for protein sequence,\nRuntimeError will be occurred. …\n"],["nature","Bio::Reference","Bio/Reference.html#method-i-nature","(short = false)","<p>Formats in the Nature Publishing Group  (www.nature.com) style.\n\n<pre># ref is a Bio::Reference object\nputs ...</pre>\n"],["natype","Bio::GenBank","Bio/GenBank.html#method-i-natype","()",""],["nb_sites","Bio::PAML::Codeml::Report","Bio/PAML/Codeml/Report.html#method-i-nb_sites","()","<p>Return a PositiveSites (naive empirical bayesian) object\n"],["networks_as_strings","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-networks_as_strings","()","<p>Networks described in the NETWORK lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["new","Bio::AAindex","Bio/AAindex.html#method-c-new","(entry)",""],["new","Bio::AAindex1","Bio/AAindex1.html#method-c-new","(entry)",""],["new","Bio::AAindex2","Bio/AAindex2.html#method-c-new","(entry)",""],["new","Bio::Abif","Bio/Abif.html#method-c-new","(string)","<p>see SangerChromatogram class for how to create an Abif object and its usage\n"],["new","Bio::Alignment","Bio/Alignment.html#method-c-new","(*arg)","<p>creates a new Bio::Alignment::OriginalAlignment object. Please refer\ndocument of OriginalAlignment.new …\n"],["new","Bio::Alignment::FactoryTemplate::Simple","Bio/Alignment/FactoryTemplate/Simple.html#method-c-new","(program = self.class::DEFAULT_PROGRAM, options = [])","<p>Creates a new alignment factory\n"],["new","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-c-new","(str)","<p>Creates a new data object. <code>str</code> should be a (multi-)fasta\nformatted string.\n"],["new","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-c-new","(str)","<p>Creates a new data object. <code>str</code> should be a (multi-)fasta\nformatted string.\n"],["new","Bio::Alignment::MultiFastaFormat","Bio/Alignment/MultiFastaFormat.html#method-c-new","(str)","<p>Creates a new data object. <code>str</code> should be a (multi-)fasta\nformatted string.\n"],["new","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-c-new","(seqs = [])","<p>Creates a new alignment object. <em>seqs</em> may be one of follows: an\narray of sequences (or strings), an array …\n"],["new","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-new","(*arg)","<p>Creates new alignment. Internal use only.\n"],["new","Bio::Blast","Bio/Blast.html#method-c-new","(program, db, opt = [], server = 'local')","<p>Creates a Bio::Blast factory object.\n<p>To run any BLAST searches, a factory has to be created that describes …\n"],["new","Bio::Blast::Bl2seq::Report::Iteration","Bio/Blast/Bl2seq/Report/Iteration.html#method-c-new","(data)","<p>Creates a new Iteration object. It is designed to be called only internally\nfrom the Bio::Blast::Default::Report …\n"],["new","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-c-new","(str)","<p>Creates a new Report object from BLAST result text.\n"],["new","Bio::Blast::Default::Report::HSP","Bio/Blast/Default/Report/HSP.html#method-c-new","(data)","<p>Creates new HSP object. It is designed to be called only internally from\nthe Bio::Blast::Default::Report::Hit …\n"],["new","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-c-new","(data)","<p>Creates a new Hit object. It is designed to be called only internally from\nthe Bio::Blast::Default::Report::Iteration …\n"],["new","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-c-new","(data)","<p>Creates a new Iteration object. It is designed to be called only internally\nfrom the Bio::Blast::Default::Report …\n"],["new","Bio::Blast::Fastacmd","Bio/Blast/Fastacmd.html#method-c-new","(blast_database_file_path)","<p>This method provides a handle to a BLASTable database, which you can then\nuse to retrieve sequences. …\n"],["new","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-c-new","(options = [])","<p>creates a new object from an array\n"],["new","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-c-new","(klass, bstream)","<p>creates a new splitter object\n"],["new","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-c-new","(klass, bstream)","<p>creates a new splitter object\n"],["new","Bio::Blast::RPSBlast::Report","Bio/Blast/RPSBlast/Report.html#method-c-new","(str)","<p>Creates a new Report object from a string.\n<p>Using Bio::FlatFile.open (or some other methods) is recommended …\n"],["new","Bio::Blast::RPSBlast::Report::Iteration","Bio/Blast/RPSBlast/Report/Iteration.html#method-c-new","(data, dummystr)","<p>Creates a new Iteration object. It is designed to be called only internally\nfrom the Bio::Blast::RPSBlast::Report …\n"],["new","Bio::Blast::Remote::GenomeNet","Bio/Blast/Remote/GenomeNet.html#method-c-new","(program, db, options = [])","<p>Creates a remote BLAST factory using GenomeNet. Returns Bio::Blast object.\n<p>Note for future improvement: …\n"],["new","Bio::Blast::Remote::GenomeNet","Bio/Blast/Remote/GenomeNet.html#method-c-new","(program, db, options = [])","<p>Creates a remote BLAST factory using GenomeNet. Returns Bio::Blast object.\n<p>Note for future improvement: …\n"],["new","Bio::Blast::Report","Bio/Blast/Report.html#method-c-new","(data, parser = nil)","<p>Passing a BLAST output from &#39;blastall -m 7&#39; or &#39;-m 8&#39; as a\nString. Formats are auto detected. …\n"],["new","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-c-new","(klass, bstream)","<p>creates a new splitter object\n"],["new","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-c-new","(klass, bstream)","<p>creates a new splitter object\n"],["new","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-c-new","()",""],["new","Bio::Blast::Report::Hsp","Bio/Blast/Report/Hsp.html#method-c-new","()",""],["new","Bio::Blast::Report::Iteration","Bio/Blast/Report/Iteration.html#method-c-new","()",""],["new","Bio::Blast::WU::Report::Hit","Bio/Blast/WU/Report/Hit.html#method-c-new","(data)","<p>Creates a new Hit object. It is designed to be called only internally from\nthe Bio::Blast::WU::Report::Iteration …\n"],["new","Bio::Blast::WU::Report::Iteration","Bio/Blast/WU/Report/Iteration.html#method-c-new","(data)","<p>Creates a new Iteration object. It is designed to be called only internally\nfrom the Bio::Blast::WU::Report …\n"],["new","Bio::Blat::Report","Bio/Blat/Report.html#method-c-new","(text = '')","<p>Creates a new Bio::Blat::Report object from BLAT result text (String). You\ncan use Bio::FlatFile to read …\n"],["new","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-c-new","(str)","<p>Creates a new Hit object from a piece of BLAT result text. It is designed\nto be called internally from …\n"],["new","Bio::Blat::Report::SegmentPair","Bio/Blat/Report/SegmentPair.html#method-c-new","(query_len, target_len, strand, blksize, qstart, tstart, qseq, tseq, protein_flag)","<p>Creates a new SegmentPair object. It is designed to be called internally\nfrom Bio::Blat::Report class. …\n"],["new","Bio::Blat::Report::SeqDesc","Bio/Blat/Report/SeqDesc.html#method-c-new","(gap_count, gap_bases, name, size, st, ed, starts, seqs)","<p>Creates a new SeqDesc object. It is designed to be called internally from\nBio::Blat::Report class. Users …\n"],["new","Bio::ClustalW","Bio/ClustalW.html#method-c-new","(program = 'clustalw', opt = [])","<p>Creates a new CLUSTAL W execution wrapper object (alignment factory).\n"],["new","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-c-new","(str, seqclass = nil)","<p>Creates new instance. <code>str</code> should be a CLUSTAL format string.\n<code>seqclass</code> should on of following:\n<p>Class:  …\n"],["new","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-c-new","(str, seqclass = nil)","<p>Creates new instance. <code>str</code> should be a CLUSTAL format string.\n<code>seqclass</code> should on of following:\n<p>Class:  …\n"],["new","Bio::CodonTable","Bio/CodonTable.html#method-c-new","(hash, definition = nil, start = [], stop = [], atable = nil)","<p>Create your own codon table by giving a Hash table of codons and relevant\namino acids.  You can also …\n"],["new","Bio::Command::Tmpdir","Bio/Command/Tmpdir.html#method-c-new","(prefix_suffix = nil, tmpdir = nil)","<p>Creates a new Tmpdir object. The arguments are the same as\nBio::Command.mktmpdir.\n<p><strong>Arguments</strong>:\n<p>(optional) …\n"],["new","Bio::Command::Tmpdir::Remover","Bio/Command/Tmpdir/Remover.html#method-c-new","(data)","<p>Internal use only. Users should not call this method.\n"],["new","Bio::ContingencyTable","Bio/ContingencyTable.html#method-c-new","(characters_in_sequences = nil)","<p>Create a ContingencyTable that has characters_in_sequence.size rows and\ncharacters_in_sequence.size columns …\n"],["new","Bio::DAS","Bio/DAS.html#method-c-new","(url = 'http://www.wormbase.org:80/db/')","<p>Specify DAS server to connect\n"],["new","Bio::DAS::ENTRY_POINT","Bio/DAS/ENTRY_POINT.html#method-c-new","()",""],["new","Bio::DAS::FEATURE","Bio/DAS/FEATURE.html#method-c-new","()",""],["new","Bio::DAS::GFF","Bio/DAS/GFF.html#method-c-new","()",""],["new","Bio::DAS::GROUP","Bio/DAS/GROUP.html#method-c-new","()",""],["new","Bio::DAS::SEGMENT","Bio/DAS/SEGMENT.html#method-c-new","()",""],["new","Bio::DDBJ","Bio/DDBJ.html#method-c-new","(str)","<p>Bio::DDBJ is deprecated. Use Bio::GenBank.\n"],["new","Bio::EMBLDB","Bio/EMBLDB.html#method-c-new","(entry, tagsize)","<p>The entire entry is passed as a String.  The length of the tag field is\npassed as an Integer.  Parses …\n"],["new","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-c-new","(entry)",""],["new","Bio::EMBOSS","Bio/EMBOSS.html#method-c-new","(cmd_line)","<p>WARNING: Bio::EMBOSS.new will be changed in the future because\nBio::EMBOSS.new(cmd_line) is inconvenient …\n"],["new","Bio::FANTOM::MaXML","Bio/FANTOM/MaXML.html#method-c-new","(x)",""],["new","Bio::FANTOM::MaXML::Annotation::DataSrc","Bio/FANTOM/MaXML/Annotation/DataSrc.html#method-c-new","(text, href)",""],["new","Bio::Fasta","Bio/Fasta.html#method-c-new","(program, db, opt = [], server = 'local')","<p>Returns a FASTA factory object (Bio::Fasta).\n"],["new","Bio::Fasta::Report","Bio/Fasta/Report.html#method-c-new","(data)",""],["new","Bio::Fasta::Report::FastaFormat10Splitter","Bio/Fasta/Report/FastaFormat10Splitter.html#method-c-new","(klass, bstream)","<p>creates a new splitter object\n"],["new","Bio::Fasta::Report::FastaFormat10Splitter","Bio/Fasta/Report/FastaFormat10Splitter.html#method-c-new","(klass, bstream)","<p>creates a new splitter object\n"],["new","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-c-new","(data)",""],["new","Bio::Fasta::Report::Hit::Query","Bio/Fasta/Report/Hit/Query.html#method-c-new","(data)",""],["new","Bio::Fasta::Report::Program","Bio/Fasta/Report/Program.html#method-c-new","(data)",""],["new","Bio::FastaDefline","Bio/FastaDefline.html#method-c-new","(str)","<p>Parses given string.\n"],["new","Bio::FastaFormat","Bio/FastaFormat.html#method-c-new","(str)","<p>Stores the comment and sequence information from one entry of the FASTA\nformat string.  If the argument …\n"],["new","Bio::Fastq","Bio/Fastq.html#method-c-new","(str = nil)","<p>Creates a new Fastq object from formatted text string.\n<p>The format of quality scores should be specified …\n"],["new","Bio::Fastq::Error","Bio/Fastq/Error.html#method-c-new","(error_message = nil)","<p>Creates a new object. If error message is not given, default error message\nis stored. If error message …\n"],["new","Bio::Fastq::FormatData","Bio/Fastq/FormatData.html#method-c-new","()",""],["new","Bio::Feature","Bio/Feature.html#method-c-new","(feature = '', position = '', qualifiers = [])","<p>Create a new Bio::Feature object. <strong>Arguments</strong>:\n<p>(required) <em>feature</em>: type of feature (e.g. “exon”) …\n"],["new","Bio::Feature::Qualifier","Bio/Feature/Qualifier.html#method-c-new","(key, value)","<p>Creates a new Bio::Feature::Qualifier object\n<p><strong>Arguments</strong>:\n<p>(required) <em>key</em>: key of the qualifier (e.g. “gene”) …\n"],["new","Bio::Features","Bio/Features.html#method-c-new","(ary = [])","<p>This method should not be used. Only for backward compatibility of existing\ncode.\n<p>Since Bio::Features …\n"],["new","Bio::Features","Bio/Features.html#method-c-new","(ary = [])","<p>Normally, users can not call this method.\n<p>Create a new Bio::Features object.\n<p><strong>Arguments</strong>:\n"],["new","Bio::Fetch","Bio/Fetch.html#method-c-new","(url = nil)","<p>Create a new Bio::Fetch server object that can subsequently be queried\nusing the Bio::Fetch#fetch method. …\n"],["new","Bio::Fetch::EBI","Bio/Fetch/EBI.html#method-c-new","(url = URL)","<p>For the usage, see the document of Bio::Fetch.new.\n"],["new","Bio::FlatFile","Bio/FlatFile.html#method-c-new","IO object","<p>Same as FlatFile.open, except that &#39;stream&#39; should be a opened\nstream object (IO, File, …, …\n"],["new","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-c-new","()","<p>Creates a new Autodetect object\n"],["new","Bio::FlatFile::AutoDetect::RuleDebug","Bio/FlatFile/AutoDetect/RuleDebug.html#method-c-new","(name)","<p>Creates a new instance.\n"],["new","Bio::FlatFile::AutoDetect::RuleProc","Bio/FlatFile/AutoDetect/RuleProc.html#method-c-new","(*dbclasses, &proc)","<p>Creates a new instance.\n"],["new","Bio::FlatFile::AutoDetect::RuleRegexp","Bio/FlatFile/AutoDetect/RuleRegexp.html#method-c-new","(dbclass, re)","<p>Creates a new instance.\n"],["new","Bio::FlatFile::AutoDetect::RuleRegexp2","Bio/FlatFile/AutoDetect/RuleRegexp2.html#method-c-new","(dbclass, *regexps)","<p>Creates a new instance.\n"],["new","Bio::FlatFile::AutoDetect::RuleSpecial","Bio/FlatFile/AutoDetect/RuleSpecial.html#method-c-new","(name)",""],["new","Bio::FlatFile::AutoDetect::RuleTemplate","Bio/FlatFile/AutoDetect/RuleTemplate.html#method-c-new","()","<p>Creates a new element.\n"],["new","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-c-new","(io, path)","<p>Creates a new input stream wrapper\n"],["new","Bio::FlatFile::Splitter::Default","Bio/FlatFile/Splitter/Default.html#method-c-new","(klass, bstream)","<p>Creates a new splitter.\n<p>klass &mdash; database class\n<p>bstream &mdash; input stream. It must be a BufferedInputStream object. …\n"],["new","Bio::FlatFile::Splitter::LineOriented","Bio/FlatFile/Splitter/LineOriented.html#method-c-new","(klass, bstream)","<p>Creates a new splitter.\n<p>klass &mdash; database class\n<p>bstream &mdash; input stream. It must be a BufferedInputStream object. …\n"],["new","Bio::FlatFile::Splitter::Template","Bio/FlatFile/Splitter/Template.html#method-c-new","(klass, bstream)","<p>Creates a new splitter.\n"],["new","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-c-new","(name)","<p>Opens existing databank. Databank is a directory which contains indexed\nfiles and configuration files. …\n"],["new","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-c-new","(filename, flag = BDBdefault.flag_read, permission = BDBdefault.permission)",""],["new","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-c-new","(name, filename, *arg)",""],["new","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-c-new","(name, idx_type = nil, hash = {})",""],["new","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-c-new","(filename, filesize = nil)",""],["new","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-c-new","(prefix, hash)",""],["new","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-c-new","(filename, mode = 'rb')",""],["new","Bio::FlatFileIndex::Flat_1::Record","Bio/FlatFileIndex/Flat_1/Record.html#method-c-new","(str, size = nil)",""],["new","Bio::FlatFileIndex::Indexer::NameSpace","Bio/FlatFileIndex/Indexer/NameSpace.html#method-c-new","(name, method)",""],["new","Bio::FlatFileIndex::Indexer::NameSpaces","Bio/FlatFileIndex/Indexer/NameSpaces.html#method-c-new","(*arg)",""],["new","Bio::FlatFileIndex::Indexer::Parser","Bio/FlatFileIndex/Indexer/Parser.html#method-c-new","(format, *arg)",""],["new","Bio::FlatFileIndex::Indexer::Parser::BlastDefaultParser","Bio/FlatFileIndex/Indexer/Parser/BlastDefaultParser.html#method-c-new","(klass, pri_name = nil, sec_names = nil)",""],["new","Bio::FlatFileIndex::Indexer::Parser::EMBLParser","Bio/FlatFileIndex/Indexer/Parser/EMBLParser.html#method-c-new","(pri_name = nil, sec_names = nil)",""],["new","Bio::FlatFileIndex::Indexer::Parser::FastaFormatParser","Bio/FlatFileIndex/Indexer/Parser/FastaFormatParser.html#method-c-new","(pri_name = nil, sec_names = nil)",""],["new","Bio::FlatFileIndex::Indexer::Parser::GenBankParser","Bio/FlatFileIndex/Indexer/Parser/GenBankParser.html#method-c-new","(pri_name = nil, sec_names = nil)",""],["new","Bio::FlatFileIndex::Indexer::Parser::GenPeptParser","Bio/FlatFileIndex/Indexer/Parser/GenPeptParser.html#method-c-new","(*arg)",""],["new","Bio::FlatFileIndex::Indexer::Parser::MaXMLClusterParser","Bio/FlatFileIndex/Indexer/Parser/MaXMLClusterParser.html#method-c-new","(pri_name = nil, sec_names = nil)",""],["new","Bio::FlatFileIndex::Indexer::Parser::MaXMLSequenceParser","Bio/FlatFileIndex/Indexer/Parser/MaXMLSequenceParser.html#method-c-new","(pri_name = nil, sec_names = nil)",""],["new","Bio::FlatFileIndex::Indexer::Parser::PDBChemicalComponentParser","Bio/FlatFileIndex/Indexer/Parser/PDBChemicalComponentParser.html#method-c-new","(klass, pri_name = nil, sec_names = nil)",""],["new","Bio::FlatFileIndex::Indexer::Parser::SPTRParser","Bio/FlatFileIndex/Indexer/Parser/SPTRParser.html#method-c-new","(*arg)",""],["new","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-c-new","()",""],["new","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-c-new","(dbname, nsclass, arg)",""],["new","Bio::FlatFileIndex::Template::NameSpace","Bio/FlatFileIndex/Template/NameSpace.html#method-c-new","(dbname, name)",""],["new","Bio::GCG::Msf","Bio/GCG/Msf.html#method-c-new","(str)","<p>Creates a new Msf object.\n"],["new","Bio::GCG::Seq","Bio/GCG/Seq.html#method-c-new","(str)","<p>Creates new instance of this class. str must be a GCG seq formatted string.\n"],["new","Bio::GFF","Bio/GFF.html#method-c-new","(str = '')","<p>Creates a Bio::GFF object by building a collection of Bio::GFF::Record\nobjects.\n<p>Create a Bio::GFF object …\n"],["new","Bio::GFF::GFF2","Bio/GFF/GFF2.html#method-c-new","(str = nil)","<p>Creates a Bio::GFF::GFF2 object by building a collection of\nBio::GFF::GFF2::Record (and metadata) objects. …\n"],["new","Bio::GFF::GFF2::MetaData","Bio/GFF/GFF2/MetaData.html#method-c-new","(directive, data = nil)","<p>Creates a new MetaData object\n"],["new","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-c-new","(*arg)","<p>Creates a Bio::GFF::GFF2::Record object. Is typically not called directly,\nbut is called automatically …\n"],["new","Bio::GFF::GFF2::Record::Value","Bio/GFF/GFF2/Record/Value.html#method-c-new","(values = [])","<p>Creates a new Value object. Note that the given array <em>values</em> is\ndirectly stored in the object.\n<p><strong>Arguments</strong> …\n"],["new","Bio::GFF::GFF3","Bio/GFF/GFF3.html#method-c-new","(str = nil)","<p>Creates a Bio::GFF::GFF3 object by building a collection of\nBio::GFF::GFF3::Record (and metadata) objects. …\n"],["new","Bio::GFF::GFF3::Record","Bio/GFF/GFF3/Record.html#method-c-new","(*arg)","<p>Creates a Bio::GFF::GFF3::Record object. Is typically not called directly,\nbut is called automatically …\n"],["new","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-c-new","(str = nil)","<p>Creates a new Gap object.\n<p><strong>Arguments</strong>:\n<p><em>str</em>: a formatted string, or nil.\n"],["new","Bio::GFF::GFF3::Record::Target","Bio/GFF/GFF3/Record/Target.html#method-c-new","(target_id, start, endpos, strand = nil)","<p>Creates a new Target object.\n"],["new","Bio::GFF::GFF3::RecordBoundary","Bio/GFF/GFF3/RecordBoundary.html#method-c-new","(*arg)",""],["new","Bio::GFF::GFF3::SequenceRegion","Bio/GFF/GFF3/SequenceRegion.html#method-c-new","(seqid, start, endpos)","<p>creates a new SequenceRegion class\n"],["new","Bio::GFF::Record","Bio/GFF/Record.html#method-c-new","(str)","<p>Creates a Bio::GFF::Record object. Is typically not called directly, but is\ncalled automatically when …\n"],["new","Bio::GO::External2go","Bio/GO/External2go.html#method-c-new","()","<p>Constructor. relation := {:db =&gt; aStr, :db_id =&gt; aStr, :go_term =&gt;\naStr, :go_id =&gt; aStr} …\n"],["new","Bio::GO::GeneAssociation","Bio/GO/GeneAssociation.html#method-c-new","(entry)","<p>Parsing an entry (in a line) in the gene_association flatfile.\n"],["new","Bio::GO::Ontology","Bio/GO/Ontology.html#method-c-new","(str)","<p>Bio::GO::Ontology.new(str) The DAG Edit format ontology data parser.\n"],["new","Bio::GenBank::Locus","Bio/GenBank/Locus.html#method-c-new","(locus_line)",""],["new","Bio::GenPept::Locus","Bio/GenPept/Locus.html#method-c-new","(locus_line)",""],["new","Bio::Genscan::Report","Bio/Genscan/Report.html#method-c-new","(report)","<p>Bio::Genscan::Report.new(str)\n<p>Parse a Genscan report output string.\n"],["new","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-c-new","(gnex, t, s, b, e, len, fr, ph, iac, dot, cr, prob, ts)","<p>Bio::Genescan::Report::Exon.new(gene_number, exon_type, strand, first, \nend, length, frame, phase, acceptor_score …\n"],["new","Bio::Genscan::Report::Gene","Bio/Genscan/Report/Gene.html#method-c-new","(gn)","<p>Bio::Genescan::Report::Gene.new(gene_number)\n"],["new","Bio::HMMER","Bio/HMMER.html#method-c-new","(program, hmmfile, seqfile, options = [])","<p>Sets a program name, a profile hmm file name, a query sequence file name \nand options in string.\n<p>Program …\n"],["new","Bio::HMMER::Report","Bio/HMMER/Report.html#method-c-new","(data)","<p>Parses a HMMER search report (by hmmpfam or hmmsearch program) and  reutrns\na Bio::HMMER::Report object. …\n"],["new","Bio::HMMER::Report::Hit","Bio/HMMER/Report/Hit.html#method-c-new","(hit_data)","<p>Sets hit data.\n"],["new","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-c-new","(hsp_data, is_hmmsearch)","<p>Sets hsps.\n"],["new","Bio::Hinv::Acc2hit","Bio/Hinv/Acc2hit.html#method-c-new","()",""],["new","Bio::Hinv::Hit2acc","Bio/Hinv/Hit2acc.html#method-c-new","()",""],["new","Bio::Hinv::HitCnt","Bio/Hinv/HitCnt.html#method-c-new","()",""],["new","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-c-new","()",""],["new","Bio::Hinv::HitPubmedId","Bio/Hinv/HitPubmedId.html#method-c-new","()",""],["new","Bio::Hinv::HitXML","Bio/Hinv/HitXML.html#method-c-new","()",""],["new","Bio::Hinv::Hix2hit","Bio/Hinv/Hix2hit.html#method-c-new","()",""],["new","Bio::Hinv::HixCnt","Bio/Hinv/HixCnt.html#method-c-new","()",""],["new","Bio::Hinv::HixRepresent","Bio/Hinv/HixRepresent.html#method-c-new","()",""],["new","Bio::Hinv::IdSearch","Bio/Hinv/IdSearch.html#method-c-new","()",""],["new","Bio::Hinv::KeywordSearch","Bio/Hinv/KeywordSearch.html#method-c-new","()",""],["new","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-c-new","()",""],["new","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-c-new","(hash)",""],["new","Bio::KEGG::BRITE","Bio/KEGG/BRITE.html#method-c-new","(entry)",""],["new","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-c-new","(entry)","<p>Creates a new Bio::KEGG::COMPOUND object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>entry</em>: (String) single entry as a string …\n"],["new","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-c-new","(entry)","<p>Creates a new Bio::KEGG::DRUG object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>entry</em>: (String) single entry as a string\n"],["new","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-c-new","(entry)",""],["new","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-c-new","(entry)",""],["new","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-c-new","(entry)","<p>Creates a new Bio::KEGG::GENES object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>entry</em>: (String) single entry as a string\n"],["new","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-c-new","(entry)",""],["new","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-c-new","(entry)",""],["new","Bio::KEGG::KGML","Bio/KEGG/KGML.html#method-c-new","(xml)","<p>Creates a new KGML object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>str</em>: String containing xml data\n"],["new","Bio::KEGG::KGML::SubstrateProduct","Bio/KEGG/KGML/SubstrateProduct.html#method-c-new","(id = nil, name = nil)","<p>Creates a new object\n"],["new","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-c-new","(file_path, bioroot = nil)","<p>Path for keggtab file and optionally set bioroot top directory.\nEnvironmental variable BIOROOT overrides …\n"],["new","Bio::KEGG::Keggtab::DB","Bio/KEGG/Keggtab/DB.html#method-c-new","(db_name, db_type, db_path, db_abbrev)","<p>Create a container object for database definitions.\n"],["new","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-c-new","(entry)","<p>Creates a new Bio::KEGG::MODULE object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>entry</em>: (String) single entry as a string …\n"],["new","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-c-new","(entry)","<p>Reads a flat file format entry of the KO database.\n"],["new","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-c-new","(entry)","<p>Creates a new Bio::KEGG::PATHWAY object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>entry</em>: (String) single entry as a string …\n"],["new","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-c-new","(entry)","<p>Creates a new Bio::KEGG::REACTION object.\n<p><strong>Arguments</strong>:\n<p>(required) <em>entry</em>: (String) single entry as a string …\n"],["new","Bio::LITDB","Bio/LITDB.html#method-c-new","(entry)",""],["new","Bio::Lasergene","Bio/Lasergene.html#method-c-new","(lines)",""],["new","Bio::Location","Bio/Location.html#method-c-new","(location = nil)","<p>Parses a&#39;location&#39; segment, which can be &#39;ID:&#39; +\n(&#39;n&#39; or &#39;n..m&#39; or &#39;n^m&#39; …\n"],["new","Bio::Locations","Bio/Locations.html#method-c-new","(position)","<p>Parses a GenBank style position string and returns a Bio::Locations object,\nwhich contains a list of …\n"],["new","Bio::MAFFT","Bio/MAFFT.html#method-c-new","(program = 'mafft', opt = [])","<p>Creates a new alignment factory. <code>program</code> is the name of the\nprogram. <code>opt</code> is options of the program.\n"],["new","Bio::MAFFT::Report","Bio/MAFFT/Report.html#method-c-new","(str, seqclass = nil)","<p>Creates a new Report object. <code>str</code> should be multi-fasta\nformatted text as a string.\n<p>Compatibility Note: …\n"],["new","Bio::MEDLINE","Bio/MEDLINE.html#method-c-new","(entry)",""],["new","Bio::Map::Mapping","Bio/Map/Mapping.html#method-c-new","(map, marker, location = nil)","<p>Creates a new Bio::Map::Mapping object\n<p><strong>Arguments</strong>:\n<p><em>map</em>: a Bio::Map::SimpleMap object\n"],["new","Bio::Map::Marker","Bio/Map/Marker.html#method-c-new","(name)","<p>Builds a new Bio::Map::Marker object\n<p><strong>Arguments</strong>:\n<p>name: name of the marker\n"],["new","Bio::Map::SimpleMap","Bio/Map/SimpleMap.html#method-c-new","(name = nil, type = nil, length = nil, units = nil)","<p>Builds a new Bio::Map::SimpleMap object\n<p><strong>Arguments</strong>:\n<p>name: name of the map\n"],["new","Bio::Meme::Mast","Bio/Meme/Mast.html#method-c-new","(mast_location, options = {})","<p>Create a mast instance\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Mast</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;/usr/local/bin/mast&#39;</span>)\n</pre>\n<p><strong>Arguments</strong>:\n"],["new","Bio::Meme::Mast::Report","Bio/Meme/Mast/Report.html#method-c-new","(mast_hitlist)",""],["new","Bio::Meme::Motif","Bio/Meme/Motif.html#method-c-new","(sequence_name, strand, motif, start_pos, end_pos, pvalue)","<p>Creates a new Bio::Meme::Motif object arguments are\n"],["new","Bio::NBRF","Bio/NBRF.html#method-c-new","(str)","<p>Creates a new NBRF object. It stores the comment and sequence information\nfrom one entry of the NBRF/PIR …\n"],["new","Bio::NCBIDB","Bio/NCBIDB.html#method-c-new","(entry, tagsize)","<p>The entire entry is passed as a String.  The length of the tag field is\npassed as an Integer.  Parses …\n"],["new","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-c-new","(entry)",""],["new","Bio::Newick","Bio/Newick.html#method-c-new","(str, options = nil)","<p>Creates a new Newick object. <em>options</em> for parsing can be set.\n<p>Available options:\n<p><code>:bootstrap_style</code> &mdash; <code>:traditional</code> …\n"],["new","Bio::Nexus","Bio/Nexus.html#method-c-new","( nexus_str )","<p>Creates a new nexus parser for &#39;nexus_str&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>nexus_str</em>: String - nexus formatted …\n"],["new","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-c-new","( name )","<p>Creates a new CharactersBlock object named &#39;name&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>name</em>: String\n"],["new","Bio::Nexus::DataBlock","Bio/Nexus/DataBlock.html#method-c-new","( name )","<p>Creates a new DataBlock object named &#39;name&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>name</em>: String\n"],["new","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-c-new","( name )","<p>Creates a new DistancesBlock object named &#39;name&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>name</em>: String\n"],["new","Bio::Nexus::GenericBlock","Bio/Nexus/GenericBlock.html#method-c-new","( name )","<p>Creates a new GenericBlock object named &#39;name&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>name</em>: String\n"],["new","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-c-new","()","<p>Creates new NexusMatrix.\n"],["new","Bio::Nexus::TaxaBlock","Bio/Nexus/TaxaBlock.html#method-c-new","( name )","<p>Creates a new TaxaBlock object named &#39;name&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) <em>name</em>: String\n"],["new","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-c-new","( name )",""],["new","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-c-new","(buf)","<p>Create a model using the relevant information from the codeml result data\n(text buffer)\n"],["new","Bio::PAML::Codeml::PositiveSite","Bio/PAML/Codeml/PositiveSite.html#method-c-new","(fields)",""],["new","Bio::PAML::Codeml::PositiveSites","Bio/PAML/Codeml/PositiveSites.html#method-c-new","(search, buf, num_codons)",""],["new","Bio::PAML::Codeml::Rates","Bio/PAML/Codeml/Rates.html#method-c-new","(rates)",""],["new","Bio::PAML::Codeml::Report","Bio/PAML/Codeml/Report.html#method-c-new","(buf)","<p>Parse codeml output file passed with <code>buf</code>, where buf contains\nthe content of a codeml result file\n"],["new","Bio::PAML::Codeml::ReportSingle","Bio/PAML/Codeml/ReportSingle.html#method-c-new","(codeml_report)","<p>Do not use\n"],["new","Bio::PAML::Common","Bio/PAML/Common.html#method-c-new","(program = nil, params = {})","<p>Creates a wrapper instance, which will run using the specified binary\nlocation or the command in the …\n"],["new","Bio::PAML::Common::Report","Bio/PAML/Common/Report.html#method-c-new","(str)","<p>Creates a new Report object.\n"],["new","Bio::PDB","Bio/PDB.html#method-c-new","(str)","<p>Creates a new Bio::PDB object from given <em>str</em>.\n"],["new","Bio::PDB::Chain","Bio/PDB/Chain.html#method-c-new","(id = nil, model = nil)","<p>Creates a new chain object.\n"],["new","Bio::PDB::ChemicalComponent","Bio/PDB/ChemicalComponent.html#method-c-new","(str)","<p>Creates a new object.\n"],["new","Bio::PDB::DataType::Pdb_Integer","Bio/PDB/DataType/Pdb_Integer.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_LString","Bio/PDB/DataType/Pdb_LString.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_LString","Bio/PDB/DataType/Pdb_LString.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_List","Bio/PDB/DataType/Pdb_List.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_Real","Bio/PDB/DataType/Pdb_Real.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_SList","Bio/PDB/DataType/Pdb_SList.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_Specification_list","Bio/PDB/DataType/Pdb_Specification_list.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_String","Bio/PDB/DataType/Pdb_String.html#method-c-new","(str)",""],["new","Bio::PDB::DataType::Pdb_StringRJ","Bio/PDB/DataType/Pdb_StringRJ.html#method-c-new","(str)",""],["new","Bio::PDB::Model","Bio/PDB/Model.html#method-c-new","(serial = nil, structure = nil)","<p>Creates a new Model object\n"],["new","Bio::PDB::Residue","Bio/PDB/Residue.html#method-c-new","(resName = nil, resSeq = nil, iCode = nil, chain = nil)","<p>Creates a new Residue object.\n"],["new","Bio::PROSITE","Bio/PROSITE.html#method-c-new","(entry)",""],["new","Bio::PSORT::CGIDriver","Bio/PSORT/CGIDriver.html#method-c-new","(host = '', path = '')","<p>Sets remote host name and cgi path or uri.\n<p>Examples\n\n<pre>CGIDriver.new(&quot;localhost&quot;, &quot;/cgi-bin/psort_www.pl&quot;) ...</pre>\n"],["new","Bio::PSORT::PSORT1","Bio/PSORT/PSORT1.html#method-c-new","(driver, origin = 'yeast', title = 'MYSEQ')","<p>Sets a cgi client (Bio::PSORT::PSORT1::Remote).\n"],["new","Bio::PSORT::PSORT1::Remote","Bio/PSORT/PSORT1/Remote.html#method-c-new","(host, path = nil, title = 'MYSEQ', origin = 'yeast')","<p>Sets remote “host&#39;&#39; and cgi “path&#39;&#39;.\n"],["new","Bio::PSORT::PSORT1::Report","Bio/PSORT/PSORT1/Report.html#method-c-new","(entry_id = '', origin = '', title = '', sequence = '', result_info = '', reasoning = {}, final_result = [])","<p>Constructs aBio::PSORT::PSORT1::Report object.\n"],["new","Bio::PSORT::PSORT2","Bio/PSORT/PSORT2.html#method-c-new","(driver, origin = 'yeast')","<p>Sets a server CGI Driver (Bio::PSORT::PSORT2::Remote).\n"],["new","Bio::PSORT::PSORT2::Remote","Bio/PSORT/PSORT2/Remote.html#method-c-new","(host, path)","<p>Sets remote “host&#39;&#39; and cgi “path&#39;&#39;.\n"],["new","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-c-new","(raw = '', entry_id = nil, scl = nil, definition = nil, seq = nil, k = nil, features = {}, prob = {}, pred = nil)","<p>Constructs aBio::PSORT::PSORT2::Report object.\n"],["new","Bio::PTS1","Bio/PTS1.html#method-c-new","(func = 'METAZOA-specific')","<p>Constructs Bio::PTS1 web service client.\n<p>Examples\n\n<pre>serv_default_metazoa_specific = Bio::PTS1.new\nserv_general_function ...</pre>\n"],["new","Bio::PTS1::Report","Bio/PTS1/Report.html#method-c-new","(str)","<p>Parsing PTS1 HTML report.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">report</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PTS1</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Report</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">str</span>)\n<span class=\"ruby-identifier\">report</span>.<span class=\"ruby-identifier\">cterm</span>\n</pre>\n"],["new","Bio::Pathway","Bio/Pathway.html#method-c-new","(relations, undirected = false)","<p>Initial graph (adjacency list) generation from the list of Relation.\n<p>Generate Bio::Pathway object from …\n"],["new","Bio::Phylip::DistanceMatrix","Bio/Phylip/DistanceMatrix.html#method-c-new","(str)","<p>creates a new distance matrix object\n"],["new","Bio::Phylip::PhylipFormat","Bio/Phylip/PhylipFormat.html#method-c-new","(str)","<p>create a new object from a string\n"],["new","Bio::REBASE","Bio/REBASE.html#method-c-new","( enzyme_lines, reference_lines = nil, supplier_lines = nil, yaml = false )","<p>Constructor\n<p><strong>Arguments</strong>\n<p><code>enzyme_lines</code>: (<em>required</em>) contents of EMBOSS formatted\nenzymes file\n"],["new","Bio::RefSeq","Bio/RefSeq.html#method-c-new","(str)","<p>Bio::RefSeq is deprecated. Use Bio::GenBank.\n"],["new","Bio::Reference","Bio/Reference.html#method-c-new","(hash)","<p>Create a new Bio::Reference object from a Hash of values.  Data is\nextracted from the values for keys: …\n"],["new","Bio::References","Bio/References.html#method-c-new","(ary = [])","<p>This method should not be used. Only for backward compatibility of existing\ncode.\n<p>Since Bio::References …\n"],["new","Bio::References","Bio/References.html#method-c-new","(ary = [])","<p>Normally, users can not call this method.\n<p>Create a new Bio::References object\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">refs</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">References</span>.<span class=\"ruby-identifier\">new</span>\n</pre>\n"],["new","Bio::Registry","Bio/Registry.html#method-c-new","(file = nil)",""],["new","Bio::Registry::DB","Bio/Registry/DB.html#method-c-new","(dbname)",""],["new","Bio::Relation","Bio/Relation.html#method-c-new","(node1, node2, edge)","<p>Create new binary relation object consists of the two object\n&#39;node1&#39; and &#39;node2&#39; with …\n"],["new","Bio::RestrictionEnzyme","Bio/RestrictionEnzyme.html#method-c-new","(users_enzyme_or_rebase_or_pattern, *cut_locations)","<p>See Bio::RestrictionEnzyme::DoubleStranded.new for more information.\n<p><strong>Arguments</strong>\n<p><code>users_enzyme_or_rebase_or_pattern</code> …\n"],["new","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-c-new","()","<p>creates a new object\n"],["new","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-c-new","(erp, *raw_cut_pairs)","<p><code>erp</code> &mdash; One of three possible parameters:  The name of an enzyme, a\nREBASE::EnzymeEntry object, or a nucleotide …\n"],["new","Bio::RestrictionEnzyme::DoubleStranded::AlignedStrands","Bio/RestrictionEnzyme/DoubleStranded/AlignedStrands.html#method-c-new","()","<p>Creates a new object.\n<p><strong>Returns</strong> &mdash; Bio::RestrictionEnzyme::DoubleStranded::AlignedStrands object\n\n"],["new","Bio::RestrictionEnzyme::DoubleStranded::CutLocationPair","Bio/RestrictionEnzyme/DoubleStranded/CutLocationPair.html#method-c-new","( *pair )","<p>CutLocationPair constructor.\n<p>Stores a single cut location pair in 0-based index notation for use with …\n"],["new","Bio::RestrictionEnzyme::DoubleStranded::CutLocations","Bio/RestrictionEnzyme/DoubleStranded/CutLocations.html#method-c-new","(*args)","<p>CutLocations constructor.\n<p>Contains an <code>Array</code> of CutLocationPair objects.\n<p>Example:\n"],["new","Bio::RestrictionEnzyme::Range::HorizontalCutRange","Bio/RestrictionEnzyme/Range/HorizontalCutRange.html#method-c-new","( left, right=left )",""],["new","Bio::RestrictionEnzyme::Range::SequenceRange","Bio/RestrictionEnzyme/Range/SequenceRange.html#method-c-new","( p_left = nil, p_right = nil, c_left = nil, c_right = nil )",""],["new","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-c-new","(size=nil, circular=false)",""],["new","Bio::RestrictionEnzyme::Range::SequenceRange::Fragment","Bio/RestrictionEnzyme/Range/SequenceRange/Fragment.html#method-c-new","( primary_bin, complement_bin )",""],["new","Bio::RestrictionEnzyme::Range::SequenceRange::Fragments","Bio/RestrictionEnzyme/Range/SequenceRange/Fragments.html#method-c-new","(primary, complement)",""],["new","Bio::RestrictionEnzyme::Range::VerticalCutRange","Bio/RestrictionEnzyme/Range/VerticalCutRange.html#method-c-new","( p_cut_left=nil, p_cut_right=nil, c_cut_left=nil, c_cut_right=nil )","<p>VerticalCutRange provides an extremely raw, yet precise, method of defining\nthe location of cuts on primary …\n"],["new","Bio::RestrictionEnzyme::SingleStrand","Bio/RestrictionEnzyme/SingleStrand.html#method-c-new","( sequence, *c )","<p>Constructor for a Bio::RestrictionEnzyme::StingleStrand object.\n<p>A single strand of restriction enzyme …\n"],["new","Bio::RestrictionEnzyme::SingleStrand::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/SingleStrand/CutLocationsInEnzymeNotation.html#method-c-new","(*a)","<p>Constructor for CutLocationsInEnzymeNotation\n<p><strong>Arguments</strong>\n<p><code>a</code>: Locations of cuts represented as a string with …\n"],["new","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-c-new","()","<p>Creates a new object\n"],["new","Bio::SOFT","Bio/SOFT.html#method-c-new","(lines=nil)","<p>Constructor\n<p><strong>Arguments</strong>\n<p><code>lines</code>: (<em>required</em>) contents of SOFT formatted file\n"],["new","Bio::SOSUI::Report","Bio/SOSUI/Report.html#method-c-new","(output_report)","<p>Parser for SOSUI output report.\n"],["new","Bio::SOSUI::Report::TMH","Bio/SOSUI/Report/TMH.html#method-c-new","(range, grade, sequence)","<p>Sets values.\n"],["new","Bio::Scf","Bio/Scf.html#method-c-new","(string)","<p>see SangerChromatogram class for how to create an Scf object and its usage\n"],["new","Bio::Sequence","Bio/Sequence.html#method-c-new","(str)","<p>Create a new Bio::Sequence object\n\n<pre>s = Bio::Sequence.new(&#39;atgc&#39;)\nputs s                                ...</pre>\n"],["new","Bio::Sequence::AA","Bio/Sequence/AA.html#method-c-new","(str)","<p>Generate an amino acid sequence object from a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Sequence</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AA</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;RRLEHTFVFLRNFSLMLLRY&quot;</span>)\n</pre>\n"],["new","Bio::Sequence::DBLink","Bio/Sequence/DBLink.html#method-c-new","(database, primary_id, *secondary_ids)","<p>creates a new DBLink object\n"],["new","Bio::Sequence::Format::Formatter::Fasta","Bio/Sequence/Format/Formatter/Fasta.html#method-c-new","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Creates a new Fasta format generater object from the …\n"],["new","Bio::Sequence::Format::Formatter::Fasta_numeric","Bio/Sequence/Format/Formatter/Fasta_numeric.html#method-c-new","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Creates a new FastaNumericFormat generater object …\n"],["new","Bio::Sequence::Format::Formatter::Fastq","Bio/Sequence/Format/Formatter/Fastq.html#method-c-new","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Creates a new Fasta format generater object from the …\n"],["new","Bio::Sequence::Format::Formatter::Fastq","Bio/Sequence/Format/Formatter/Fastq.html#method-c-new","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Creates a new Fasta format generater object from the …\n"],["new","Bio::Sequence::Format::Formatter::Qual","Bio/Sequence/Format/Formatter/Qual.html#method-c-new","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Creates a new Qual format generater object from the …\n"],["new","Bio::Sequence::Format::FormatterBase","Bio/Sequence/Format/FormatterBase.html#method-c-new","(sequence, options = {})","<p>creates a new formatter object for output\n"],["new","Bio::Sequence::NA","Bio/Sequence/NA.html#method-c-new","(str)","<p>Generate an nucleic acid sequence object from a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Sequence</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">NA</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;aagcttggaccgttgaagt&quot;</span>)\n</pre>\n"],["new","Bio::SiRNA","Bio/SiRNA.html#method-c-new","(seq, antisense_size = 21, max_gc_percent = 60.0, min_gc_percent = 40.0)","<p>Input is a Bio::Sequence::NA object (the target sequence). Output is a list\nof Bio::SiRNA::Pair object. …\n"],["new","Bio::SiRNA::Pair","Bio/SiRNA/Pair.html#method-c-new","(target, sense, antisense, start, stop, rule, gc_percent)",""],["new","Bio::SiRNA::ShRNA","Bio/SiRNA/ShRNA.html#method-c-new","(pair)","<p>Input is a Bio::SiRNA::Pair object (the target sequence).\n"],["new","Bio::Sim4","Bio/Sim4.html#method-c-new","(program = 'sim4', database = nil, opt = [])","<p>Creates a new sim4 execution wrapper object.\n<p><code>program</code> &mdash; Program name. Usually &#39;sim4&#39; in UNIX.\n<p><code>database</code> … &mdash; "],["new","Bio::Sim4::Report","Bio/Sim4/Report.html#method-c-new","(text)","<p>Creates new Bio::Sim4::Report object from String. You can use Bio::FlatFile\nto read a file. Currently …\n"],["new","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-c-new","(str)","<p>Parses part of sim4 result text and creates a new Hit object. It is\ndesigned to be called internally …\n"],["new","Bio::Sim4::Report::Segment","Bio/Sim4/Report/Segment.html#method-c-new","(pos_st, pos_ed, seq = nil)","<p>Creates a new Segment object. It is designed to be called internally from\nBio::Sim4::Report::SegmentPair …\n"],["new","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-c-new","(seq1, seq2, midline = nil, percent_identity = nil, direction = nil)","<p>Creates a new SegmentPair object. It is designed to be called internally\nfrom Bio::Sim4::Report::Hit …\n"],["new","Bio::Sim4::Report::SeqDesc","Bio/Sim4/Report/SeqDesc.html#method-c-new","(seqid, seqdef, len, filename)","<p>Creates a new object. It is designed to be called internally from\nBio::Sim4::Report object. Users shall …\n"],["new","Bio::Spidey::Report","Bio/Spidey/Report.html#method-c-new","(str)","<p>Creates a new Bio::Spidey::Report object from String. You can use\nBio::FlatFile to read a file.\n"],["new","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-c-new","(data, d0)","<p>Creates a new Hit object. It is designed to be called internally from\nBio::Spidey::Report::* classes. …\n"],["new","Bio::Spidey::Report::Segment","Bio/Spidey/Report/Segment.html#method-c-new","(pos_st, pos_ed, strand = nil, seq = nil)","<p>Creates a new Segment object. It is designed to be called internally from\nBio::Spidey::Report::* classes. …\n"],["new","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-c-new","(genomic, mrna, midline, aaseqline, percent_identity, mismatches, gaps, splice_site, align_len)","<p>Creates a new SegmentPair object. It is designed to be called from\nBio::Spidey::Report::* classes. Users …\n"],["new","Bio::Spidey::Report::SeqDesc","Bio/Spidey/Report/SeqDesc.html#method-c-new","(seqid, seqdef, len)","<p>Creates a new SeqDesc object. It is designed to be called from\nBio::Spidey::Report::* classes. Users …\n"],["new","Bio::SwissProt","Bio/SwissProt.html#method-c-new","(str)","<p>Bio::SwissProt is deprecated. Use Bio::UniProtKB.\n"],["new","Bio::TMHMM::Report","Bio/TMHMM/Report.html#method-c-new","(entry = nil)",""],["new","Bio::TMHMM::TMH","Bio/TMHMM/TMH.html#method-c-new","(entry_id = nil, version = nil, status = nil, range = nil)",""],["new","Bio::TRANSFAC","Bio/TRANSFAC.html#method-c-new","(entry)",""],["new","Bio::TRANSFAC::CELL","Bio/TRANSFAC/CELL.html#method-c-new","(entry)",""],["new","Bio::TRANSFAC::CLASS","Bio/TRANSFAC/CLASS.html#method-c-new","(entry)",""],["new","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-c-new","(entry)",""],["new","Bio::TRANSFAC::GENE","Bio/TRANSFAC/GENE.html#method-c-new","(entry)",""],["new","Bio::TRANSFAC::MATRIX","Bio/TRANSFAC/MATRIX.html#method-c-new","(entry)",""],["new","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-c-new","(entry)",""],["new","Bio::TargetP::Report","Bio/TargetP/Report.html#method-c-new","(str)","<p>Sets output report.\n"],["new","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-c-new","(uri = BASE_URI)","<p>Creates a new object.\n<p><strong>Arguments</strong>:\n<p>(optional) <em>uri</em>: String or URI object\n"],["new","Bio::TrEMBL","Bio/TrEMBL.html#method-c-new","(str)","<p>Bio::TrEMBL is deprecated. Use Bio::UniProtKB.\n"],["new","Bio::Tree","Bio/Tree.html#method-c-new","(tree = nil)","<p>Creates a new phylogenetic tree. When no arguments are given, it creates a\nnew empty tree. When a Tree …\n"],["new","Bio::Tree::Edge","Bio/Tree/Edge.html#method-c-new","(distance = nil)","<p>creates a new edge.\n"],["new","Bio::Tree::Node","Bio/Tree/Node.html#method-c-new","(name = nil)","<p>Creates a new node.\n"],["new2","Bio::Alignment","Bio/Alignment.html#method-c-new2","(*arg)","<p>creates a new Bio::Alignment::OriginalAlignment object. Please refer\ndocument of OriginalAlignment.new2 …\n"],["new2","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-c-new2","(*arg)","<p>Creates a new alignment object from given arguments.\n<p>It will be obsoleted.\n"],["new2","Bio::MAFFT","Bio/MAFFT.html#method-c-new2","(dir, prog, *opt)","<p>Creates a new alignment factory. <code>dir</code> is the path of the MAFFT\nprogram. <code>prog</code> is the name of the program. …\n"],["new_direct","Bio::PDB::Record","Bio/PDB/Record.html#method-c-new_direct","(*ary)","<p>Creates new class by given field definition.\n<p>Internal use only.\n"],["new_from_sequences_na","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-c-new_from_sequences_na","(reference, target, gap_regexp = /[^a-zA-Z]/)","<p>Creates a new Gap object from given sequence alignment.\n<p>Note that sites of which both reference and target …\n"],["new_from_sequences_na_aa","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-c-new_from_sequences_na_aa","(reference, target, gap_regexp = /[^a-zA-Z]/, space_regexp = /\\s/, forward_frameshift_regexp = /\\>/, reverse_frameshift_regexp = /\\</)","<p>Creates a new Gap object from given sequence alignment.\n<p>Note that sites of which both reference and target …\n"],["new_from_string","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-c-new_from_string","(str)",""],["new_http","Bio::Command","Bio/Command.html#method-i-new_http","(address, port = 80)","<p>Same as:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-identifier\">port</span>)\n</pre>\n<p>and  it uses proxy if an environment variable (same as OpenURI.open_uri …\n"],["new_https","Bio::Command","Bio/Command.html#method-i-new_https","(address, port = 443)","<p>Same as:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Command</span>.<span class=\"ruby-identifier\">new_http</span>(<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-identifier\">port</span>)\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">use_ssl</span> = <span class=\"ruby-keyword\">true</span>\n<span class=\"ruby-identifier\">h</span>\n</pre>\n"],["new_inherit","Bio::PDB::Record","Bio/PDB/Record.html#method-c-new_inherit","(klass)","<p>creates new class which inherits given class.\n"],["new_intron","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-c-new_intron","(from, to, strand, aln)","<p>Creates a new SegmentPair object when the segment pair is an intron. It is\ndesigned to be called internally …\n"],["new_with_fungi_function","Bio::PTS1","Bio/PTS1.html#method-c-new_with_fungi_function","()","<p>Short-cut for Bio::PTS1.new(Bio::PTS1::FUNCTION)\n"],["new_with_general_function","Bio::PTS1","Bio/PTS1.html#method-c-new_with_general_function","()","<p>Short-cut for Bio::PTS1.new(Bio::PTS1::FUNCTION)\n"],["new_with_metazoa_function","Bio::PTS1","Bio/PTS1.html#method-c-new_with_metazoa_function","()","<p>Short-cut for Bio::PTS1.new(Bio::PTS1::FUNCTION)\n"],["newick","Bio::Tree","Bio/Tree.html#method-i-newick","(options = {})",""],["next_entry","Bio::FlatFile","Bio/FlatFile.html#method-i-next_entry","()","<p>Get next entry.\n"],["nhx_parameters","Bio::Tree::Edge","Bio/Tree/Edge.html#method-i-nhx_parameters","()","<p>Other NHX parameters. Returns a Hash. Note that :L and :W are not stored\nhere but stored in the proper …\n"],["nhx_parameters","Bio::Tree::Node","Bio/Tree/Node.html#method-i-nhx_parameters","()","<p>Other NHX parameters. Returns a Hash. Note that :D, :E, :S, and :T are not\nstored here but stored in …\n"],["nid","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-nid","()","<p>NID – Returns contents of the NID record as a String.\n"],["no_fork?","Bio::Command","Bio/Command.html#method-i-no_fork-3F","()","<p><strong>CAUTION</strong> Bio::Command INTERNAL USE ONLY. Users must NOT use\nthe method. The method will be removed when …\n"],["nodes","Bio::Pathway","Bio/Pathway.html#method-i-nodes","()","<p>Returns the number of the nodes in the graph.\n"],["nodes","Bio::Tree","Bio/Tree.html#method-i-nodes","()","<p>Returns all nodes as an array.\n"],["normalize","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-normalize","()","<p>Not-destructive version of alignment_normalize!. Returns a new alignment.\n"],["normalize!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-normalize-21","()",""],["normalize!","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-normalize-21","()","<p>Normalize options. For two or more same options (e.g. &#39;-p blastn -p\nblastp&#39;), only the last option …\n"],["normalize!","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-normalize-21","()","<p>Normalize the current sequence, removing all whitespace and  transforming\nall positions to uppercase …\n"],["notes","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-notes","()","<p>(WU-BLAST) Returns “NOTE:” information. Returns nil or an array containing\nString.\n"],["notice","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-notice","()","<p>Returns notice messages.\n"],["nr","Bio::PROSITE","Bio/PROSITE.html#method-i-nr","()","<p>NR  Numerical results                  (&gt;=0 per entry)\n\n<pre>- SWISS-PROT scan statistics of true and false ...</pre>\n"],["ntlen","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-ntlen","()","<p>Returns nucleic acid sequence length.\n<p><strong>Returns</strong> &mdash; Integer\n\n"],["ntseq","Bio::EMBL","Bio/EMBL.html#method-i-ntseq","()",""],["ntseq","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-ntseq","()","<p>Returns nucleic acid sequence described in the NTSEQ lines.\n<p><strong>Returns</strong> &mdash; Bio::Sequence::NA object\n\n"],["nucleotide","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-nucleotide","(ids, format = \"gb\", hash = {})","<p>Retrieve nucleotide sequence entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["nucleotide_databases","Bio::Blast::Remote::Information","Bio/Blast/Remote/Information.html#method-i-nucleotide_databases","()","<p>Returns a list of available nucleotide databases.\n<p>Note: see the note of databases method.\n<p><strong>Returns</strong> &mdash; Array …\n"],["num_codons","Bio::PAML::Codeml::Report","Bio/PAML/Codeml/Report.html#method-i-num_codons","()","<p>Return the number of condons in the codeml alignment\n"],["num_gene","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-num_gene","()","<p>Returns number of protein genes from the STATISTICS record as a Fixnum.\n"],["num_hits","Bio::Blat::Report","Bio/Blat/Report.html#method-i-num_hits","()","<p>Returns number of hits. Same as hits.size.\n"],["num_hits","Bio::Sim4::Report","Bio/Sim4/Report.html#method-i-num_hits","()","<p>Returns number of hits. Same as hits.size.\n"],["num_hits","Bio::Spidey::Report","Bio/Spidey/Report.html#method-i-num_hits","()","<p>Returns number of hits. Same as hits.size.\n"],["num_rna","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-num_rna","()","<p>Returns number of rna from the STATISTICS record as a Fixnum.\n"],["num_sequences","Bio::PAML::Codeml::Report","Bio/PAML/Codeml/Report.html#method-i-num_sequences","()","<p>Return the number of sequences in the codeml alignment\n"],["number_of_edges","Bio::Tree","Bio/Tree.html#method-i-number_of_edges","()","<p>Returns number of edges in the tree.\n"],["number_of_exons","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-number_of_exons","()","<p>Returns number of exons in the hit.\n"],["number_of_nodes","Bio::Tree","Bio/Tree.html#method-i-number_of_nodes","()","<p>Number of nodes.\n"],["number_of_sequences","Bio::Alignment::ArrayExtension","Bio/Alignment/ArrayExtension.html#method-i-number_of_sequences","()","<p>Returns number of sequences in this alignment.\n"],["number_of_sequences","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-number_of_sequences","()","<p>Returns number of sequences in this alignment.\n"],["number_of_sequences","Bio::Alignment::HashExtension","Bio/Alignment/HashExtension.html#method-i-number_of_sequences","()","<p>Returns number of sequences in this alignment.\n"],["number_of_sequences","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-number_of_sequences","()",""],["number_of_splice_sites","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-number_of_splice_sites","()","<p>Returns number of splice sites of the hit.\n"],["nwap","Bio::MAFFT","Bio/MAFFT.html#method-c-nwap","(n = nil)","<p>Creates a new alignment factory. Performs &#39;nwns –all-positive n&#39; or\n&#39;nwnsi –all-positive&#39;. …\n"],["nwns","Bio::MAFFT","Bio/MAFFT.html#method-c-nwns","(n = nil, ap = nil)","<p>Creates a new alignment factory. When <code>n</code> is a number (1,2,3,\n…), performs &#39;nwns n&#39;. When <code>n</code> is …\n"],["nwnsi","Bio::MAFFT","Bio/MAFFT.html#method-c-nwnsi","(all_positive = nil)","<p>Creates a new alignment factory. Performs &#39;nwnsi&#39;. If\n<code>all_positive</code> is true, add option &#39;–all-positive&#39;. …\n"],["obsolete?","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-obsolete-3F","()",""],["oc","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-oc","()","<p>returns contents in the OC line.\n<p>Bio::EMBLDB::Common#oc  -&gt; [ &lt;organism class String&gt;* ]\n\n<p>OC Line …\n"],["oc","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-oc","()",""],["og","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-og","()","<p>returns contents in the OG line.\n<p>Bio::EMBLDB::Common#og  -&gt; [ &lt;ogranella String&gt;* ]\n\n<p>OG Line; organella …\n"],["oh","Bio::UniProtKB","Bio/UniProtKB.html#method-i-oh","()","<p>The OH Line;  \n<p>OH   NCBI_TaxID=TaxID; HostName. br.expasy.org/sprot/userman.html#OH_line\n"],["okazaki","Bio::PSORT::PSORT1","Bio/PSORT/PSORT1.html#method-c-okazaki","()","<p>Returns a PSORT1 CGI Driver object (Bio::PSORT::PSORT1::Remote) connecting\nto the NIBB server.\n"],["okazaki","Bio::PSORT::PSORT2","Bio/PSORT/PSORT2.html#method-c-okazaki","()","<p>Returns a PSORT2 CGI Driver object (Bio::PSORT::PSORT2::Remote) connecting\nto the NIBB server.\n"],["old_matrix","Bio::AAindex2","Bio/AAindex2.html#method-i-old_matrix","()","<p>Returns amino acids matrix in Matrix  for the old format (&lt;= ver 5.0).\n"],["omega","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-omega","()","<p>Return codeml omega of model\n"],["omim","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-omim","(ids, format = \"detailed\", hash = {})","<p>Retrieve OMIM entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["one","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-one","(x)",""],["one2name","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-one2name","(x)",""],["one2three","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-one2three","(x)",""],["open","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-c-open","(filename, *mode)","<p>Opens file by using Bio::FlatFile.open.\n"],["open","Bio::DB","Bio/DB.html#method-c-open","(filename, *mode, &block)",""],["open","Bio::FlatFile","Bio/FlatFile.html#method-c-open","(*arg, &block)","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FlatFile</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-identifier\">file</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">arg</span>)\n<span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FlatFile</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-identifier\">dbclass</span>, <span class=\"ruby-identifier\">file</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">arg</span>)\n</pre>\n<p>Creates a new Bio::FlatFile object …\n"],["open","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-c-open","(name)","<p>Opens existing databank. Databank is a directory which contains indexed\nfiles and configuration files. …\n"],["open","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-c-open","(*arg)",""],["open","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-open","()",""],["open","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-i-open","(flag = BDBdefault.flag_read, permission = BDBdefault.permission)",""],["open","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-c-open","(*arg)",""],["open","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-open","()",""],["open","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-c-open","(*arg)",""],["open","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-open","()",""],["open","Bio::SangerChromatogram","Bio/SangerChromatogram.html#method-c-open","(filename)",""],["open_file","Bio::FlatFile","Bio/FlatFile.html#method-c-open_file","(filename, *arg)","<p>Same as FlatFile.auto(filename, *arg), except that it only accept filename\nand doesn&#39;t accept IO …\n"],["open_file","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-c-open_file","(filename, *arg)","<p>Creates a new input stream wrapper to open file <em>filename</em> by using\nFile.open. *arg is passed to File.open …\n"],["open_flatfile","Bio::FlatFileIndex::Indexer::Parser::BlastDefaultParser","Bio/FlatFileIndex/Indexer/Parser/BlastDefaultParser.html#method-i-open_flatfile","(fileid, file)",""],["open_flatfile","Bio::FlatFileIndex::Indexer::Parser::FastaFormatParser","Bio/FlatFileIndex/Indexer/Parser/FastaFormatParser.html#method-i-open_flatfile","(fileid, file)",""],["open_flatfile","Bio::FlatFileIndex::Indexer::Parser::PDBChemicalComponentParser","Bio/FlatFileIndex/Indexer/Parser/PDBChemicalComponentParser.html#method-i-open_flatfile","(fileid, file)",""],["open_flatfile","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-i-open_flatfile","(fileid, file)","<p>administration of a single flatfile\n"],["open_uri","Bio::FlatFile","Bio/FlatFile.html#method-c-open_uri","(uri, *arg)","<p>Opens URI specified as <em>uri</em>. <em>uri</em> must be a String or URI\nobject. *arg is passed to OpenURI.open_uri or …\n"],["open_uri","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-c-open_uri","(uri, *arg)","<p>Creates a new input stream wrapper from URI specified as <em>uri</em>. by\nusing OpenURI.open_uri or URI#open. …\n"],["option","Bio::Blast","Bio/Blast.html#method-i-option","()","<p>Returns options of blastall\n"],["option","Bio::ClustalW","Bio/ClustalW.html#method-i-option","()","<p>option is deprecated. Instead, please use options.\n"],["option","Bio::Fasta","Bio/Fasta.html#method-i-option","()",""],["option","Bio::HMMER","Bio/HMMER.html#method-i-option","()","<p>Gets options by String. backward compatibility.\n"],["option","Bio::MAFFT","Bio/MAFFT.html#method-i-option","()","<p>option is deprecated. Instead, please use options.\n"],["option","Bio::Sim4","Bio/Sim4.html#method-i-option","()","<p>option is deprecated. Instead, please use options.\n"],["option=","Bio::Blast","Bio/Blast.html#method-i-option-3D","(str)","<p>Set options for blastall\n"],["option=","Bio::Fasta","Bio/Fasta.html#method-i-option-3D","(str)",""],["option=","Bio::HMMER","Bio/HMMER.html#method-i-option-3D","(str)","<p>Sets options by String. backward compatibility.\n"],["options","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-options","()","<p>current options as an array of strings\n"],["options","Bio::PAML::Codeml","Bio/PAML/Codeml.html#method-i-options","()","<p>OBSOLETE. This method should not be used.  Instead, use parameters.\n"],["options=","Bio::Blast","Bio/Blast.html#method-i-options-3D","(ary)","<p>Sets options for blastall\n"],["options=","Bio::PAML::Codeml","Bio/PAML/Codeml.html#method-i-options-3D","(hash)","<p>OBSOLETE. This method should not be used.  Instead, use parameters=(hash).\n"],["order","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-order","(n)","<p>Gets the <em>n</em>-th sequence. If not found, returns nil.\n"],["org_class","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-org_class","()",""],["org_species","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-org_species","()",""],["organism","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-organism","()","<p>Organism name of the entry, described in the ENTRY line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["organism","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-organism","()",""],["organism","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-organism","()","<p>Organism described in the ORGANISM line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["organism","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-organism","()",""],["orientation","Bio::RestrictionEnzyme::SingleStrand","Bio/RestrictionEnzyme/SingleStrand.html#method-i-orientation","()","<p>Orientation of the strand, 5&#39; to 3&#39;\n"],["orientation","Bio::RestrictionEnzyme::SingleStrandComplement","Bio/RestrictionEnzyme/SingleStrandComplement.html#method-i-orientation","()","<p>Orientation of the strand, 3&#39; to 5&#39;\n"],["origin","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-origin","()","<p>ORIGIN – Returns contents of the ORIGIN record as a String.\n"],["original_data","Bio::PDB::Record","Bio/PDB/Record.html#method-i-original_data","()","<p>Return original string (except that “n” are truncated)  for this record\n(usually just @str, …\n"],["original_databases","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-original_databases","()","<p>Returns ORIGINAL_DB record as an Array containing String objects.\n<p><strong>Arguments</strong>:\n<p><strong>Returns</strong> &mdash; Array containing  …\n"],["original_db","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-original_db","()","<p>ORIGINAL_DB – Returns contents of the ORIGINAL_DB record as a String.\n"],["orthologs","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-orthologs","()",""],["orthologs","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-orthologs","()",""],["orthologs","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-orthologs","()",""],["orthologs","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-orthologs","()",""],["orthologs","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-orthologs","()",""],["orthologs","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-orthologs","()",""],["orthologs_as_array","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-orthologs_as_array","()","<p>All KO IDs in the ORTHOLOGY lines.\n<p><strong>Returns</strong> &mdash; Array of orthology IDs\n\n"],["orthologs_as_hash","Bio::KEGG::Common::OrthologsAsHash","Bio/KEGG/Common/OrthologsAsHash.html#method-i-orthologs_as_hash","()","<p>Returns a Hash of the orthology ID and definition in ORTHOLOGY field.\n"],["orthologs_as_hash","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-orthologs_as_hash","()","<p>Returns a Hash of the orthology ID and definition in ORTHOLOGY field.\n"],["orthologs_as_hash","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-orthologs_as_hash","()","<p>Returns a Hash of the orthology ID and definition in ORTHOLOGY field.\n"],["orthologs_as_hash","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-orthologs_as_hash","()","<p>Returns a Hash of the orthology ID and definition in ORTHOLOGY field.\n"],["orthologs_as_hash","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-orthologs_as_hash","()","<p>Orthologs described in the ORTHOLOGY lines.\n<p><strong>Returns</strong> &mdash; Hash of orthology ID and its definition\n\n"],["orthologs_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-orthologs_as_hash","()","<p>Returns a Hash of the orthology ID and definition in ORTHOLOGY field.\n"],["orthologs_as_hash","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-orthologs_as_hash","()","<p>Returns a Hash of the orthology ID and definition in ORTHOLOGY field.\n"],["orthologs_as_strings","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-orthologs_as_strings","()","<p>ORTHOLOGY\n"],["orthologs_as_strings","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-orthologs_as_strings","()","<p>Orthologs described in the ORTHOLOGY lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["orthologs_as_strings","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-orthologs_as_strings","()","<p>ORTHOLOGY\n"],["orthologs_as_strings","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-orthologs_as_strings","()","<p>Orthologs described in the ORTHOLOGY lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["orthologs_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-orthologs_as_strings","()","<p>Orthologs described in the ORTHOLOGY lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["orthologs_as_strings","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-orthologs_as_strings","()","<p>Orthologs described in the ORTHOLOGY lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["os","Bio::EMBL","Bio/EMBL.html#method-i-os","(num = nil)","<p>returns contents in the OS line.\n<p>Bio::EMBL#os  -&gt; Array of &lt;OS Hash&gt;\n\n<p>where &lt;OS Hash&gt; is: …\n"],["os","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-os","(num = nil)","<p>returns contents in the OS line.\n<p>Bio::EMBLDB#os  -&gt; Array of &lt;OS Hash&gt;\n\n<p>where &lt;OS Hash&gt; is: …\n"],["os","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-os","()",""],["os","Bio::UniProtKB","Bio/UniProtKB.html#method-i-os","(num = nil)","<p>returns a Array of Hashs or a String of the OS line when a key given.\n<p>Bio::EMBLDB#os  -&gt; Array\n\n\n<pre>[{&#39;name&#39; ...</pre>\n"],["out","Bio::FlatFileIndex::DEBUG","Bio/FlatFileIndex/DEBUG.html#method-c-out","()","<p>get current debug messeages output destination\n"],["out=","Bio::FlatFileIndex::DEBUG","Bio/FlatFileIndex/DEBUG.html#method-c-out-3D","(io)","<p>Set debug messages output destination. If true is given, outputs to\n$stderr. If nil is given, outputs …\n"],["out_degree","Bio::Tree","Bio/Tree.html#method-i-out_degree","(source)","<p>Returns number of edges in the given node.\n<p>The reason why the method name is “out_degree” is …\n"],["out_edges","Bio::Tree","Bio/Tree.html#method-i-out_edges","(source)","<p>Returns all connected edges with adjacent nodes. Returns an array of the\narray [ source, target, edge …\n"],["output","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-output","(format, *arg)",""],["output","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-i-output","(format_type)","<p>Output interpro matches in the format_type.\n"],["output","Bio::Sequence::Format","Bio/Sequence/Format.html#method-i-output","(format = :fasta, options = {})","<p>Using Bio::Sequence::Format, return a String with the Bio::Sequence object\nformatted in the given style. …\n"],["output","Bio::Sequence::Format::Formatter::Fasta","Bio/Sequence/Format/Formatter/Fasta.html#method-i-output","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Output the FASTA format string of the sequence.\n<p>Currently …\n"],["output","Bio::Sequence::Format::Formatter::Fasta_ncbi","Bio/Sequence/Format/Formatter/Fasta_ncbi.html#method-i-output","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Output the FASTA format string of the sequence.\n<p>Currently …\n"],["output","Bio::Sequence::Format::Formatter::Fasta_numeric","Bio/Sequence/Format/Formatter/Fasta_numeric.html#method-i-output","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Output the FASTA format string of the sequence.\n<p>Currently …\n"],["output","Bio::Sequence::Format::Formatter::Fastq","Bio/Sequence/Format/Formatter/Fastq.html#method-i-output","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Output the FASTQ format string of the sequence.\n<p>Currently …\n"],["output","Bio::Sequence::Format::Formatter::Fastq","Bio/Sequence/Format/Formatter/Fastq.html#method-i-output","()","<p>INTERNAL USE ONLY, YOU SHOULD NOT CALL THIS METHOD.\n<p>Output the FASTQ format string of the sequence.\n<p>Currently …\n"],["output","Bio::Sequence::Format::Formatter::Raw","Bio/Sequence/Format/Formatter/Raw.html#method-i-output","()","<p>output raw sequence data\n"],["output","Bio::Sequence::Format::FormatterBase","Bio/Sequence/Format/FormatterBase.html#method-c-output","(sequence, options = {})","<p>Returns a formatterd string of the given sequence\n<p><strong>Arguments</strong>:\n<p>(required) <em>sequence</em>: Bio::Sequence object …\n"],["output","Bio::Sequence::Format::FormatterBase","Bio/Sequence/Format/FormatterBase.html#method-i-output","()","<p>generates output data\n<p><strong>Returns</strong> &mdash; String object\n\n"],["output","Bio::Tree","Bio/Tree.html#method-i-output","(format, *arg, &block)","<p>Returns formatted text (or something) of the tree Currently supported\nformat is: :newick, :nhx\n"],["output_clustal","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-output_clustal","(options = {})","<p>Generates ClustalW-formatted text\n<p>seqs &mdash; sequences (must be an alignment object)\n<p>names &mdash; names of the sequences …\n"],["output_fasta","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-output_fasta","(options={})","<p>Generates fasta format text and returns a string.\n"],["output_fasta","Bio::Sequence::Format","Bio/Sequence/Format.html#method-i-output_fasta","(definition = nil, width = 70)","<p>The same as output(:fasta, :header=&gt;definition, :width=&gt;width) This\nmethod is intended to replace …\n"],["output_molphy","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-output_molphy","(options = {})","<p>Generates Molphy alignment format text as a string\n"],["output_msf","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-output_msf","(options = {})","<p>Generates msf formatted text as a string\n"],["output_newick","Bio::Tree","Bio/Tree.html#method-i-output_newick","(options = {})","<p>Returns a newick formatted string. If block is given, the order of the node\nis sorted (as the same manner …\n"],["output_nhx","Bio::Tree","Bio/Tree.html#method-i-output_nhx","(options = {})","<p>Returns a NHX (New Hampshire eXtended) formatted string. If block is given,\nthe order of the node is …\n"],["output_phylip","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-output_phylip","(options = {})","<p>generates phylip interleaved alignment format as a string\n"],["output_phylip_distance_matrix","Bio::Tree","Bio/Tree.html#method-i-output_phylip_distance_matrix","(nodes = nil, options = {})","<p>Generates phylip-style distance matrix as a string. if nodes is not given,\nall leaves in the tree are …\n"],["output_phylipnon","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-output_phylipnon","(options = {})","<p>generates Phylip3.2 (old) non-interleaved format as a string\n"],["overlap","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-overlap","()","<p>Same as hsps.first.align_len. Returns nil if there are no hsp in the hit.\n(Compatibility method with …\n"],["overlap","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-overlap","()",""],["overlap","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-overlap","()","<p>overlap length\n"],["ox","Bio::UniProtKB","Bio/UniProtKB.html#method-i-ox","()","<p>returns a Hash of oraganism taxonomy cross-references.\n<p>Bio::UniProtKB#ox -&gt; Hash\n\n<pre>{&#39;NCBI_TaxID&#39; =&gt; [&#39;1234&#39;,&#39;2345&#39;,&#39;3456&#39;,&#39;4567&#39;], ...</pre>\n"],["p2q","Bio::Sequence::QualityScore::Phred","Bio/Sequence/QualityScore/Phred.html#method-i-p2q","(probabilities)",""],["p2q","Bio::Sequence::QualityScore::Phred","Bio/Sequence/QualityScore/Phred.html#method-c-p2q","(probabilities)",""],["p2q","Bio::Sequence::QualityScore::Solexa","Bio/Sequence/QualityScore/Solexa.html#method-i-p2q","(probabilities)",""],["p2q","Bio::Sequence::QualityScore::Solexa","Bio/Sequence/QualityScore/Solexa.html#method-c-p2q","(probabilities)",""],["pa","Bio::PROSITE","Bio/PROSITE.html#method-i-pa","()","<p>PA  Pattern                            (&gt;=0 per entry)\n\n<pre>see - pa2re method</pre>\n<p>Returns\n"],["pa2re","Bio::PROSITE","Bio/PROSITE.html#method-c-pa2re","(pattern)","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">prosite</span> <span class=\"ruby-identifier\">pattern</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">regular</span> <span class=\"ruby-identifier\">expression</span>\n</pre>\n<p>prosite/prosuser.txt:\n<p>The PA (PAttern) lines contains the definition …\n"],["pa2re","Bio::PROSITE","Bio/PROSITE.html#method-i-pa2re","(pattern)",""],["pages","Bio::MEDLINE","Bio/MEDLINE.html#method-i-pages","()",""],["palindromic?","Bio::RestrictionEnzyme::SingleStrand","Bio/RestrictionEnzyme/SingleStrand.html#method-i-palindromic-3F","()","<p>Returns true if this enzyme is palindromic with its reverse complement.\nDoes not report if the <code>cut_locations</code> …\n"],["parameter_matrix","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-parameter_matrix","()","<p>Returns parameter matrix (???)\n"],["parameters","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-parameters","()","<p>Returns parameters (???)\n"],["parent","Bio::Tree","Bio/Tree.html#method-i-parent","(node, root = nil)","<p>Gets the parent node of the <em>node</em>. If <em>root</em> isn&#39;t\nspecified or <em>root</em> is <code>nil</code>, @root is used. Returns …\n"],["parse","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-c-parse","(str)","<p>parses a string and returns a new object\n"],["parse","Bio::GFF::GFF2","Bio/GFF/GFF2.html#method-i-parse","(str)","<p>Parses a GFF2 entries, and concatenated the parsed data.\n<p><strong>Arguments</strong>:\n<p><em>str</em>: string in GFF format\n"],["parse","Bio::GFF::GFF2::MetaData","Bio/GFF/GFF2/MetaData.html#method-c-parse","(line)","<p>parses a line\n"],["parse","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-c-parse","(str)","<p>Parses a GFF2-formatted line and returns a new Bio::GFF::GFF2::Record\nobject.\n"],["parse","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-parse","(string)","<p>Parses a GFF2-formatted line and stores data from the string. Note that all\nexisting data is wiped out. …\n"],["parse","Bio::GFF::GFF3","Bio/GFF/GFF3.html#method-i-parse","(str)","<p>Parses a GFF3 entries, and concatenated the parsed data.\n<p>Note that after “##FASTA” line is given, …\n"],["parse","Bio::GFF::GFF3::Record","Bio/GFF/GFF3/Record.html#method-c-parse","(str)","<p>Parses a GFF3-formatted line and returns a new Bio::GFF::GFF3::Record\nobject.\n"],["parse","Bio::GFF::GFF3::Record","Bio/GFF/GFF3/Record.html#method-i-parse","(string)","<p>Parses a GFF3-formatted line and stores data from the string. Note that all\nexisting data is wiped out. …\n"],["parse","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-c-parse","(str)","<p>Same as new(str).\n"],["parse","Bio::GFF::GFF3::Record::Target","Bio/GFF/GFF3/Record/Target.html#method-c-parse","(str)","<p>parses “target_id start end [strand]”-style string (for example, “ABC789\n123 456 +”) …\n"],["parse","Bio::GFF::GFF3::SequenceRegion","Bio/GFF/GFF3/SequenceRegion.html#method-c-parse","(str)","<p>parses given string and returns SequenceRegion class\n"],["parse","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-c-parse","(str, aln)","<p>Parses part of sim4 result text and creates a new SegmentPair object. It is\ndesigned to be called internally …\n"],["parse","Bio::Sim4::Report::SeqDesc","Bio/Sim4/Report/SeqDesc.html#method-c-parse","(str, str2 = nil)","<p>Parses part of sim4 result text and creates new SeqDesc object. It is\ndesigned to be called internally …\n"],["parse","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-c-parse","(str, strand, complement, aln)","<p>Parses a piece of Spidey result text and creates a new SegmentPair object.\nIt is designed to be called …\n"],["parse","Bio::Spidey::Report::SeqDesc","Bio/Spidey/Report/SeqDesc.html#method-c-parse","(str)","<p>Parses piece of Spidey result text and creates a new SeqDesc object. It is\ndesigned to be called from …\n"],["parse_embl_DR_line","Bio::Sequence::DBLink","Bio/Sequence/DBLink.html#method-c-parse_embl_DR_line","(str)","<p>Parses DR line in EMBL entry, and returns a DBLink object.\n"],["parse_enzymes","Bio::REBASE","Bio/REBASE.html#method-i-parse_enzymes","( lines )","<p>data is a hash indexed by the :name of each entry which is also a hash\n<p>data has the following keys: :name, …\n\n"],["parse_goids","Bio::GO::Ontology","Bio/GO/Ontology.html#method-c-parse_goids","(line)","<p>Bio::GO::Ontology.parse_ogids(line)\n<p>Parsing GOID line in the DAGEdit format\n\n<pre>GO:ID[ ; GO:ID...]</pre>\n"],["parse_primary","Bio::FlatFileIndex::Indexer::Parser::FastaFormatParser","Bio/FlatFileIndex/Indexer/Parser/FastaFormatParser.html#method-i-parse_primary","()",""],["parse_primary","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-i-parse_primary","()",""],["parse_ptxt","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-c-parse_ptxt","(io)","<p>Splits entry stream.\n<p>Usage\n\n<pre>Bio::Iprscan::Report.parse_ptxt(File.open(&quot;merged.txt&quot;)) do |report|\n  report ...</pre>\n"],["parse_ptxt_entry","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-c-parse_ptxt_entry","(str)","<p>Parser method for a pseudo-txt formated entry. Retruns a\nBio::Iprscan::Report  object.\n<p>Usage\n\n<pre>File.read(&quot;marged.txt&quot;).each(Bio::Iprscan::Report::RS) ...</pre>\n"],["parse_raw","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-c-parse_raw","(io)","<p>USAGE\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Iprscan</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Report</span>.<span class=\"ruby-identifier\">parse_raw</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;merged.raw&quot;</span>)) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">report</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">report</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["parse_raw_entry","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-c-parse_raw_entry","(str)","<p>Parser method for a raw formated entry. Retruns a Bio::Iprscan::Report \nobject.\n"],["parse_references","Bio::REBASE","Bio/REBASE.html#method-i-parse_references","( lines )","<p>data is a hash indexed by the :name of each entry which is also a hash\n<p>data has the following keys: :organism, …\n\n"],["parse_secondary","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-i-parse_secondary","()",""],["parse_suppliers","Bio::REBASE","Bio/REBASE.html#method-i-parse_suppliers","( lines )","<p>data is a hash indexed by the supplier code\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">data</span>[<span class=\"ruby-identifier\">supplier_code</span>]\n<span class=\"ruby-identifier\">returns</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">suppliers</span> <span class=\"ruby-identifier\">name</span>\n</pre>\n"],["parse_txt","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-c-parse_txt","(io)","<p>Splits the entry stream.\n<p>Usage\n\n<pre>Bio::Iprscan::Report.reports_txt(File.open(&quot;merged.txt&quot;)) do |report|\n  ...</pre>\n"],["parse_txt_entry","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-c-parse_txt_entry","(str)","<p>Parser method for a txt formated entry. Returns a Bio::Iprscan::Report\nobject.\n"],["parse_uniprot_DR_line","Bio::Sequence::DBLink","Bio/Sequence/DBLink.html#method-c-parse_uniprot_DR_line","(str)","<p>Parses DR line in UniProt entry, and returns a DBLink object.\n"],["parser","Bio::Fasta","Bio/Fasta.html#method-c-parser","(parser)","<p>OBSOLETE. Does nothing and shows warning messages.\n<p>Historically, selecting parser to use (&#39;format6&#39; …\n"],["parser","Bio::GO::External2go","Bio/GO/External2go.html#method-c-parser","(str)","<p>Constructor from parsing external2go file.\n"],["parser","Bio::GO::GeneAssociation","Bio/GO/GeneAssociation.html#method-c-parser","(str)","<p>Retruns an Array of parsed gene_association flatfile. Block is acceptable.\n"],["parser","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-c-parser","(line)","<p>Bio::Genescan::Report::Exon.parser\n"],["parser","Bio::PSORT::PSORT1::Report","Bio/PSORT/PSORT1/Report.html#method-c-parser","(output_report)","<p>Returns aBio::PSORT::PSORT1::Report.\n"],["parser","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-c-parser","(str, entry_id)","<p>Parses output report with output format detection automatically.\n"],["partial","Bio::PROSITE","Bio/PROSITE.html#method-i-partial","()","<p>Returns\n"],["path","Bio::Command::Tmpdir","Bio/Command/Tmpdir.html#method-i-path","()","<p>Path to the temporay directory\n<p><strong>Returns</strong> &mdash; String\n\n"],["path","Bio::FlatFile","Bio/FlatFile.html#method-i-path","()","<p>Pathname, filename or URI (or nil).\n"],["path","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-path","(db_abbrev)","<p>Returns an absolute path for the flat file database. (e.g.\n&#39;/bio/db/kegg/genes&#39;, …)\n"],["path","Bio::Tree","Bio/Tree.html#method-i-path","(node1, node2)","<p>Gets path from node1 to node2. Retruns an array of nodes, including node1\nand node2. If node1 and/or …\n"],["pathway","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-pathway","()","<p>Returns the PATHWAY lines as a String.\n<p><strong>Returns</strong> &mdash; String\n\n"],["pathways","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-pathways","()",""],["pathways","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-pathways","()",""],["pathways","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-pathways","()",""],["pathways","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-pathways","()",""],["pathways","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-pathways","()",""],["pathways","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-pathways","()",""],["pathways","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-pathways","()",""],["pathways","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-pathways","()",""],["pathways","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-pathways","()",""],["pathways_as_hash","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::Common::PathwaysAsHash","Bio/KEGG/Common/PathwaysAsHash.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-pathways_as_hash","()","<p>Pathways described in the PATHWAY lines.\n<p><strong>Returns</strong> &mdash; Hash of pathway ID and its definition\n\n"],["pathways_as_hash","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_hash","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-pathways_as_hash","()","<p>Returns a Hash of the pathway ID and name in PATHWAY field.\n"],["pathways_as_strings","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-pathways_as_strings","()","<p>PATHWAY\n"],["pathways_as_strings","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-pathways_as_strings","()","<p>List of KEGG Pathway IDs with short descriptions, described in the PATHWAY\nlines.\n<p><strong>Returns</strong> &mdash; Array containing …\n\n"],["pathways_as_strings","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-pathways_as_strings","()","<p>PATHWAY\n"],["pathways_as_strings","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-pathways_as_strings","()","<p>Pathways described in the PATHWAY lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["pathways_as_strings","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-pathways_as_strings","()","<p>PATHWAY\n"],["pathways_as_strings","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-pathways_as_strings","()","<p>Pathways described in the PATHWAY lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["pathways_as_strings","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-pathways_as_strings","()","<p>Pathways described in the PATHWAY field.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["pathways_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-pathways_as_strings","()","<p>Pathways described in the PATHWAY_MAP lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["pathways_as_strings","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-pathways_as_strings","()","<p>Pathway information, described in the PATHWAY lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["pathways_in_keggclass","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-pathways_in_keggclass","()","<p><strong>OBSOLETE</strong> Do not use this method. Because KEGG ORTHOLOGY\nformat is changed and PATHWAY field is added, …\n"],["pattern","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-pattern","()","<p>(PHI-BLAST) Same as <code>iterations.first.pattern</code>. Note that it\nreturns the FIRST iteration&#39;s value.\n"],["pattern","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-pattern","()","<p>(PHI-BLAST) Returns pattern string. Returns nil if it is not a PHI-BLAST\nresult.\n"],["pattern","Bio::Blast::Report","Bio/Blast/Report.html#method-i-pattern","()","<p>PHI-BLAST pattern : shortcuts for @parameters\n"],["pattern","Bio::PROSITE","Bio/PROSITE.html#method-i-pattern","()",""],["pattern","Bio::RestrictionEnzyme::SingleStrand","Bio/RestrictionEnzyme/SingleStrand.html#method-i-pattern","()","<p>The sequence with &#39;n&#39; padding on the left and right for cuts larger\nthan the sequence.\n<p><code>SingleStrand.new(&#39;garraxt&#39;,</code> …\n\n"],["pattern_positions","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-pattern_positions","()","<p>(PHI-BLAST) Same as <code>iterations.first.pattern_positions</code>. Note\nthat it returns the FIRST iteration&#39;s …\n"],["pattern_positions","Bio::Blast::Default::Report::Iteration","Bio/Blast/Default/Report/Iteration.html#method-i-pattern_positions","()","<p>(PHI-BLAST) Returns pattern positions. Returns nil if it is not a PHI-BLAST\nresult.\n"],["pdb_xref","Bio::PROSITE","Bio/PROSITE.html#method-i-pdb_xref","()","<p>3D  Cross-references to PDB            (&gt;=0 per entry)\n\n<pre>3D   name; [name2;...]</pre>\n<p>Returns\n"],["pdoc_xref","Bio::PROSITE","Bio/PROSITE.html#method-i-pdoc_xref","()","<p>DO  Pointer to the documentation file  (1 per entry)\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DO</span>   <span class=\"ruby-constant\">PDOCnnnnn</span>;\n</pre>\n<p>Returns\n"],["peking","Bio::PSORT::PSORT1","Bio/PSORT/PSORT1.html#method-c-peking","()","<p>Returns a PSORT1 CGI Driver object (Bio::PSORT::PSORT1::Remote) connecting\nto the Peking server.\n"],["peking","Bio::PSORT::PSORT2","Bio/PSORT/PSORT2.html#method-c-peking","()","<p>Returns a PSORT2 CGI Driver object (Bio::PSORT::PSORT2::Remote) connecting\nto the Peking server.\n"],["percent_identity","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-percent_identity","()",""],["percent_identity","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-percent_identity","()","<p>Calculates the percent identity compatible with the BLAT web server as\ndescribed in the BLAT FAQ (genome.ucsc.edu/FAQ/FAQblat#blat4 …\n"],["percent_identity","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-percent_identity","()","<p>Returns overall percent identity of the hit.\n"],["permission","Bio::FlatFileIndex::BDBdefault","Bio/FlatFileIndex/BDBdefault.html#method-c-permission","()",""],["permute","Bio::RestrictionEnzyme::Analysis","Bio/RestrictionEnzyme/Analysis.html#method-i-permute","(count, permutations = [[0]])","<p>Returns permutation orders for a given number of elements.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">permute</span>(<span class=\"ruby-value\">0</span>) <span class=\"ruby-comment\"># =&gt; [[0]]</span>\n<span class=\"ruby-identifier\">permute</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["pg","Bio::MEDLINE","Bio/MEDLINE.html#method-i-pg","()","<p>PG   - Page Number\n\n<pre>The full pagination of the article.</pre>\n"],["phred_p2q","Bio::Sequence::QualityScore::Phred","Bio/Sequence/QualityScore/Phred.html#method-i-phred_p2q","(probabilities)","<p>Probability to PHRED score conversion.\n<p>The values may be truncated or incorrect if overflows/underflows …\n"],["phred_q2p","Bio::Sequence::QualityScore::Phred","Bio/Sequence/QualityScore/Phred.html#method-i-phred_q2p","(scores)","<p>PHRED score to probability conversion.\n<p><strong>Arguments</strong>:\n<p>(required) <em>scores</em>: (Array containing Integer) scores …\n"],["pii","Bio::MEDLINE","Bio/MEDLINE.html#method-i-pii","()",""],["plasmids","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-plasmids","()","<p>PLASMID – Returns contents of the PLASMID records as an Array of Hash.\n"],["pmc","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-pmc","(ids, format = \"docsum\", hash = {})","<p>Retrieve PubMed Central entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["pmfetch","Bio::PubMed","Bio/PubMed.html#method-i-pmfetch","(id)","<p>This method will be DEPRECATED in the future.\n<p>Retrieve PubMed entry by PMID and returns MEDLINE formatted …\n"],["pmfetch","Bio::PubMed","Bio/PubMed.html#method-c-pmfetch","(*args)","<p>This method will be DEPRECATED. Use efetch method.\n<p>The same as Bio::PubMed.new.pmfetch(*args).\n"],["pmid","Bio::MEDLINE","Bio/MEDLINE.html#method-i-pmid","()","<p>PMID - PubMed Unique Identifier\n\n<pre>Unique number assigned to each PubMed citation.</pre>\n"],["pos","Bio::FlatFile","Bio/FlatFile.html#method-i-pos","()","<p>Returns current position of input stream. If the input stream is not a\nnormal file, the result is not …\n"],["pos","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-pos","()","<p>Returns current file position\n"],["pos=","Bio::FlatFile","Bio/FlatFile.html#method-i-pos-3D","(p)","<p>(Not recommended to use it.) Sets position of input stream. If the input\nstream is not a normal file, …\n"],["pos=","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-pos-3D","(p)","<p>Sets current file position if possible Internal buffer in this wrapper is\ncleared.\n"],["position","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-position","()","<p>The position in the genome described in the POSITION line.\n<p><strong>Returns</strong> &mdash; String\n\n"],["positions_on","Bio::Map::ActsLikeMarker","Bio/Map/ActsLikeMarker.html#method-i-positions_on","(map)","<p>Return all positions of this marker on a given map.\n<p><strong>Arguments</strong>:\n<p><em>map</em>: an object that mixes in Bio::Map::ActsLikeMap …\n"],["positive","Bio::PROSITE","Bio/PROSITE.html#method-i-positive","()","<p>Returns\n"],["positive_hits","Bio::PROSITE","Bio/PROSITE.html#method-i-positive_hits","()","<p>Returns\n"],["positive_sequences","Bio::PROSITE","Bio/PROSITE.html#method-i-positive_sequences","()","<p>Returns\n"],["post","Bio::Command","Bio/Command.html#method-i-post","(uri, data, header = {})","<p>Same as: Net::HTTP.post(uri, params) and  it uses proxy if an environment\nvariable (same as OpenURI.open_uri …\n"],["post_form","Bio::Command","Bio/Command.html#method-i-post_form","(uri, params = nil, header = {})","<p>Same as: Net::HTTP.post_form(uri, params) and  it uses proxy if an\nenvironment variable (same as OpenURI.open_uri …\n"],["prefetch_buffer","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-prefetch_buffer","()","<p>Gets current prefetch buffer\n"],["prefetch_gets","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-prefetch_gets","(*arg)","<p>It does @io.gets,  and addes returned string to the internal buffer, and\nreturns the string.\n"],["prefetch_readpartial","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-prefetch_readpartial","(*arg)","<p>It does @io.readpartial, and addes returned string to the internal buffer,\nand returns the string.\n"],["primary","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-primary","()","<p>parameters\n"],["primary","Bio::RestrictionEnzyme::DoubleStranded::CutLocations","Bio/RestrictionEnzyme/DoubleStranded/CutLocations.html#method-i-primary","()","<p>Returns an <code>Array</code> of locations of cuts on the primary strand\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["primary","Bio::RestrictionEnzyme::Fragments","Bio/RestrictionEnzyme/Fragments.html#method-i-primary","()",""],["primary=","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-primary-3D","(pri_name)",""],["primary_namespace","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-primary_namespace","()","<p>Returns name of primary namespace as a string.\n"],["primary_to_array_index","Bio::RestrictionEnzyme::DoubleStranded::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/DoubleStranded/CutLocationsInEnzymeNotation.html#method-i-primary_to_array_index","()","<p>Returns <code>Array</code> of locations of cuts on the primary  strand in\n0-based array index notation.\n<p><strong>Arguments</strong>\n<p><em>none</em> …\n"],["print","Bio::FlatFileIndex::DEBUG","Bio/FlatFileIndex/DEBUG.html#method-c-print","(*arg)","<p>prints debug messages\n"],["process","Bio::Lasergene","Bio/Lasergene.html#method-i-process","(lines)",""],["process","Bio::SOFT","Bio/SOFT.html#method-i-process","(lines)",""],["process_sequences_na","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-i-process_sequences_na","(reference, target, gap_char = '-')","<p>Processes nucleotide sequences and returns gapped sequences as an array of\nsequences.\n<p>Note for forward/reverse …\n"],["process_sequences_na_aa","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-i-process_sequences_na_aa","(reference, target, gap_char = '-', space_char = ' ', forward_frameshift = '>', reverse_frameshift = '<')","<p>Processes sequences and returns gapped sequences as an array of sequences.\nreference must be a nucleotide …\n"],["products","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-products","()","<p>Product names described in the PRODUCTS lines.\n<p><strong>Returns</strong> &mdash; Array containing String objects\n\n"],["products","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-products","()","<p>PRODUCT\n"],["profile","Bio::PROSITE","Bio/PROSITE.html#method-i-profile","()",""],["program","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-program","()","<p>Returns program name.\n"],["protein","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-protein","(ids, format = \"gp\", hash = {})","<p>Retrieve protein sequence entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["protein?","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-protein-3F","()","<p>When the output data comes from the protein query, returns true. Otherwise\n(nucleotide query), returns …\n"],["protein_databases","Bio::Blast::Remote::Information","Bio/Blast/Remote/Information.html#method-i-protein_databases","()","<p>Returns a list of available protein databases.\n<p>Note: see the note of databases method.\n<p><strong>Returns</strong> &mdash; Array containing …\n"],["protein_name","Bio::UniProtKB","Bio/UniProtKB.html#method-i-protein_name","()","<p>returns the proposed official name of the protein. Returns a String.\n<p>Since UniProtKB release 14.0 of 22-Jul-2008, …\n"],["pt","Bio::MEDLINE","Bio/MEDLINE.html#method-i-pt","()","<p>PT   - Publication Type\n\n<pre>The type of material the article represents.</pre>\n"],["publication_type","Bio::MEDLINE","Bio/MEDLINE.html#method-i-publication_type","()",""],["pubmed","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-pubmed","(ids, format = \"medline\", hash = {})","<p>Retrieve PubMed entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["pubmed_url","Bio::Reference","Bio/Reference.html#method-i-pubmed_url","()","<p>Returns a valid URL for pubmed records\n<p><strong>Returns</strong> &mdash; String\n\n"],["purge","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-purge","(*arg)","<p>Removes sequences from the alignment by given keys. Returns an alignment\nobject consists of removed sequences. …\n"],["push","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-push","(*args)","<p>Same usage as Array#push\n"],["push","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-push","(*args)","<p>Same usage as Array#push\n"],["put_record","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-put_record","(i, str)",""],["q2p","Bio::Sequence::QualityScore::Phred","Bio/Sequence/QualityScore/Phred.html#method-i-q2p","(scores)",""],["q2p","Bio::Sequence::QualityScore::Phred","Bio/Sequence/QualityScore/Phred.html#method-c-q2p","(scores)",""],["q2p","Bio::Sequence::QualityScore::Solexa","Bio/Sequence/QualityScore/Solexa.html#method-i-q2p","(scores)",""],["q2p","Bio::Sequence::QualityScore::Solexa","Bio/Sequence/QualityScore/Solexa.html#method-c-q2p","(scores)",""],["qseq","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-i-qseq","()","<p>query sequence (with gaps) of the alignment of the segment pair.\n"],["qseq","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-qseq","()","<p>Returns the sequence (with gaps) of the mRNA (query).\n"],["qualities","Bio::Fastq","Bio/Fastq.html#method-i-qualities","()",""],["quality_score_type","Bio::Fastq","Bio/Fastq.html#method-i-quality_score_type","()","<p>The meaning of the quality scores. It may be one of :phred, :solexa, or\nnil.\n"],["quality_score_type","Bio::Sequence::QualityScore::Phred","Bio/Sequence/QualityScore/Phred.html#method-i-quality_score_type","()","<p>Type of quality scores.\n<p><strong>Returns</strong> &mdash; (Symbol) the type of quality score.\n\n"],["quality_score_type","Bio::Sequence::QualityScore::Solexa","Bio/Sequence/QualityScore/Solexa.html#method-i-quality_score_type","()","<p>Type of quality scores.\n<p><strong>Returns</strong> &mdash; (Symbol) the type of quality score.\n\n"],["quality_scores","Bio::Fastq","Bio/Fastq.html#method-i-quality_scores","()","<p>Quality score for each base. For “fastq-sanger” or “fastq-illumina”, it is\nPHRED …\n"],["query","Bio::Alignment::FactoryTemplate::Simple","Bio/Alignment/FactoryTemplate/Simple.html#method-i-query","(seqs)","<p>Executes the program. If <code>seqs</code> is not nil, perform alignment\nfor seqs. If <code>seqs</code> is nil, simply executes …\n"],["query","Bio::Blast","Bio/Blast.html#method-i-query","(query)","<p>This method submits a sequence to a BLAST factory, which performs the\nactual BLAST.\n\n<pre># example 1\nseq = ...</pre>\n"],["query","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-query","()","<p>Returns sequence informations of the query. Returns a\nBio::Blat::Report::SeqDesc object. This would be …\n"],["query","Bio::ClustalW","Bio/ClustalW.html#method-i-query","(seqs)","<p>Executes the program(clustalw). If <code>seqs</code> is not nil, perform\nalignment for seqs. If <code>seqs</code> is nil, simply …\n"],["query","Bio::FANTOM","Bio/FANTOM.html#method-c-query","(idstr, http_proxy = nil)",""],["query","Bio::Fasta","Bio/Fasta.html#method-i-query","(query)","<p>Execute FASTA search and returns Report object (Bio::Fasta::Report).\n"],["query","Bio::FastaFormat","Bio/FastaFormat.html#method-i-query","(factory)","<p>Executes FASTA/BLAST search by using a Bio::Fasta or a Bio::Blast factory\nobject.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">#!/usr/bin/env ruby ...</span>\n</pre>\n"],["query","Bio::Fetch::EBI","Bio/Fetch/EBI.html#method-c-query","(*args)","<p>Shortcut for using EBI Dbfetch server. You can fetch an entry without\ncreating an instance of Bio::Fetch::EBI …\n"],["query","Bio::HMMER","Bio/HMMER.html#method-i-query","()","<p>Executes the hmmer search and returns the report  (Bio::HMMER::Report\nobject).\n"],["query","Bio::Hinv::Common","Bio/Hinv/Common.html#method-i-query","(options = nil)",""],["query","Bio::Hinv::IdSearch","Bio/Hinv/IdSearch.html#method-i-query","(hash = {})",""],["query","Bio::Hinv::KeywordSearch","Bio/Hinv/KeywordSearch.html#method-i-query","(hash = {})",""],["query","Bio::MAFFT","Bio/MAFFT.html#method-i-query","(seqs)","<p>Executes the program. If <code>seqs</code> is not nil, perform alignment\nfor seqs. If <code>seqs</code> is nil, simply executes …\n"],["query","Bio::PAML::Codeml","Bio/PAML/Codeml.html#method-i-query","(alignment, tree = nil, aarate = nil)","<p>Runs the program on the internal parameters with the specified sequence\nalignment and tree.\n<p>Note that …\n"],["query","Bio::PAML::Common","Bio/PAML/Common.html#method-i-query","(alignment, tree = nil)","<p>Runs the program on the internal parameters with the specified sequence\nalignment and tree.\n<p>Note that …\n"],["query","Bio::PAML::Yn00","Bio/PAML/Yn00.html#method-i-query","(alignment)","<p>Runs the program on the internal parameters with the specified sequence\nalignment. Note that parameters …\n"],["query","Bio::PubMed","Bio/PubMed.html#method-i-query","(*ids)","<p>This method will be DEPRECATED in the future.\n<p>Retrieve PubMed entry by PMID and returns MEDLINE formatted …\n"],["query","Bio::PubMed","Bio/PubMed.html#method-c-query","(*args)","<p>This method will be DEPRECATED. Use efetch method.\n<p>The same as Bio::PubMed.new.query(*args).\n"],["query","Bio::Registry","Bio/Registry.html#method-i-query","(dbname)","<p>Returns a Registry::DB object corresponding to the first dbname entry in\nthe registry records (case insensitive). …\n"],["query","Bio::Sim4","Bio/Sim4.html#method-i-query","(seq1)","<p>Executes the sim4 program. <code>seq1</code> shall be a Bio::Sequence\nobject. Returns a Bio::Sim4::Report object. …\n"],["query_align","Bio::Alignment::FactoryTemplate::Simple","Bio/Alignment/FactoryTemplate/Simple.html#method-i-query_align","(seqs)","<p>alias of query_alignment.\n<p>Compatibility Note: query_align will renamed to query_alignment.\n"],["query_align","Bio::ClustalW","Bio/ClustalW.html#method-i-query_align","(seqs)","<p>Note that this method will be renamed to query_alignment.\n<p>Performs alignment for <code>seqs</code>. <code>seqs</code> should be …\n"],["query_align","Bio::MAFFT","Bio/MAFFT.html#method-i-query_align","(seqs, *arg)","<p>Note that this method will be renamed to query_alignment.\n<p>Performs alignment for seqs. <code>seqs</code> should be …\n"],["query_alignment","Bio::Alignment::FactoryTemplate::Simple","Bio/Alignment/FactoryTemplate/Simple.html#method-i-query_alignment","(seqs)","<p>Performs alignment for seqs. <code>seqs</code> should be Bio::Alignment or\nArray of sequences or nil.\n"],["query_alignment","Bio::ClustalW","Bio/ClustalW.html#method-i-query_alignment","(seqs)","<p>Performs alignment for <code>seqs</code>. <code>seqs</code> should be\nBio::Alignment or Array of sequences or nil.\n"],["query_alignment","Bio::MAFFT","Bio/MAFFT.html#method-i-query_alignment","(seqs)","<p>Performs alignment for seqs. <code>seqs</code> should be Bio::Alignment or\nArray of sequences or nil.\n"],["query_by_filename","Bio::Alignment::FactoryTemplate::Simple","Bio/Alignment/FactoryTemplate/Simple.html#method-i-query_by_filename","(filename_in)","<p>Performs alignment of sequences in the file named <code>fn</code>.\n"],["query_by_filename","Bio::ClustalW","Bio/ClustalW.html#method-i-query_by_filename","(path, *arg)","<p>Performs alignment of sequences in the file named <code>path</code>.\n<p>Compatibility Note: 2nd argument (seqtype) is …\n"],["query_by_filename","Bio::MAFFT","Bio/MAFFT.html#method-i-query_by_filename","(fn, *arg)","<p>Performs alignment of sequences in the file named <code>fn</code>.\n<p>Compatibility Note: 2nd argument (seqtype) is deprecated …\n"],["query_by_string","Bio::PAML::Codeml","Bio/PAML/Codeml.html#method-i-query_by_string","(alignment = nil, tree = nil, aarate = nil)","<p>Runs the program on the internal parameters with the specified sequence\nalignment data string and tree …\n"],["query_by_string","Bio::PAML::Common","Bio/PAML/Common.html#method-i-query_by_string","(alignment = nil, tree = nil)","<p>Runs the program on the internal parameters with the specified sequence\nalignment data string and tree …\n"],["query_by_string","Bio::PAML::Yn00","Bio/PAML/Yn00.html#method-i-query_by_string","(alignment = nil)","<p>Runs the program on the internal parameters with the specified sequence\nalignment as a String object. …\n"],["query_command","Bio::Command","Bio/Command.html#method-i-query_command","(cmd, query = nil, options = {})","<p>Executes the program with the query (String) given to the standard input,\nwaits the program termination, …\n"],["query_command_fork","Bio::Command","Bio/Command.html#method-i-query_command_fork","(cmd, query = nil, options = {})","<p>This method is internally called from the query_command method. In normal\ncase, use query_command, and …\n"],["query_command_open3","Bio::Command","Bio/Command.html#method-i-query_command_open3","(cmd, query = nil)","<p>Executes the program via Open3.popen3 with the query (String) given to the\nstain, waits the program termination, …\n"],["query_command_popen","Bio::Command","Bio/Command.html#method-i-query_command_popen","(cmd, query = nil, options = {})","<p>This method is internally called from the query_command method. In normal\ncase, use query_command, and …\n"],["query_def","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-query_def","()","<p>Returns definition of the query.\n"],["query_def","Bio::Blast::RPSBlast::Report","Bio/Blast/RPSBlast/Report.html#method-i-query_def","()","<p>Returns definition of the query. For a result of multi-fasta input, the\nfirst query&#39;s definition …\n"],["query_def","Bio::Blat::Report","Bio/Blat/Report.html#method-i-query_def","()","<p>Returns the name of query sequence. CAUTION: query_* methods simply return\nfirst hit&#39;s query_*.  …\n"],["query_def","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-query_def","()","<p>Returns the name of query sequence.\n"],["query_def","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-query_def","()",""],["query_def","Bio::Sim4::Report","Bio/Sim4/Report.html#method-i-query_def","()","<p>Returns the definition of query sequence. The value will be filename or\n(first word of) sequence definition …\n"],["query_def","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-query_def","()","<p>Definition of the query sequence Same as Bio::Sim4::Report#query_def.\n"],["query_def","Bio::Spidey::Report","Bio/Spidey/Report.html#method-i-query_def","()","<p>Returns definition of the mRNA (query) sequence.\n"],["query_def","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-query_def","()","<p>Definition of the mRNA (query). Same as Bio::Spidey::Report#query_def.\n"],["query_end","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-query_end","()","<p>Same as hsps.first.query_to. Returns nil if there are no hsp in the hit.\n(Compatibility method with  …\n"],["query_end","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-query_end","()",""],["query_end","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-query_end","()",""],["query_from","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-i-query_from","()",""],["query_from","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-i-query_from","()","<p>start position of the query (the first position is 1)\n"],["query_from","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-query_from","()","<p>Returns start position of the mRNA (query) (the first position is 1).\n"],["query_id","Bio::Blat::Report","Bio/Blat/Report.html#method-i-query_id","()",""],["query_id","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-query_id","()",""],["query_id","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-query_id","()","<p>Shortcuts for the methods of Bio::Fasta::Report::Hit::Query\n"],["query_id","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-query_id","()","<p>Id of the input sequence.\n"],["query_id","Bio::Sim4::Report","Bio/Sim4/Report.html#method-i-query_id","()","<p>Returns the identifier of query sequence. The value will be filename or\n(first word of) sequence definition …\n"],["query_id","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-query_id","()","<p>Identifier of the query sequence. Same as Bio::Sim4::Report#query_id.\n"],["query_id","Bio::Spidey::Report","Bio/Spidey/Report.html#method-i-query_id","()","<p>Returns identifier of the mRNA (query) sequence.\n"],["query_id","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-query_id","()","<p>Identifier of the mRNA (query). Same as Bio::Spidey::Report#query_id.\n"],["query_len","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-query_len","()","<p>Returns length of the query.\n"],["query_len","Bio::Blast::RPSBlast::Report","Bio/Blast/RPSBlast/Report.html#method-i-query_len","()","<p>Returns length of the query. For a result of multi-fasta input, the first\nquery&#39;s length is returned …\n"],["query_len","Bio::Blat::Report","Bio/Blat/Report.html#method-i-query_len","()","<p>Returns the length of query sequence. CAUTION: query_* methods simply\nreturn first hit&#39;s query_*. …\n"],["query_len","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-query_len","()","<p>Returns the length of query sequence.\n"],["query_len","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-query_len","()",""],["query_len","Bio::Sim4::Report","Bio/Sim4/Report.html#method-i-query_len","()","<p>Returns the length of query sequence.\n"],["query_len","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-query_len","()","<p>Length of the query sequence. Same as Bio::Sim4::Report#query_len.\n"],["query_len","Bio::Spidey::Report","Bio/Spidey/Report.html#method-i-query_len","()","<p>Returns the length of the mRNA (query) sequence.\n"],["query_len","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-query_len","()","<p>Length of the mRNA (query) sequence. Same as Bio::Spidey::Report#query_len.\n"],["query_len","Bio::TargetP::Report","Bio/TargetP/Report.html#method-i-query_len","()","<p>Returns length of query sequence.\n"],["query_pairwise","Bio::Sim4","Bio/Sim4.html#method-i-query_pairwise","(seq1, seq2)","<p>Executes the sim4 program. Perform mRNA-genome alignment between given\nsequences. <code>seq1</code> and <code>seq2</code> should …\n"],["query_record_number","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-query_record_number","()","<p>(WU-BLAST) Returns record number of the query. It may only be available for\nreports with multiple queries. …\n"],["query_seq","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-query_seq","()","<p>Same as hsps.first.qseq. Returns nil if there are no hsp in the hit.\n(Compatibility method with FASTA …\n"],["query_seq","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-query_seq","()",""],["query_seq","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-query_seq","()",""],["query_seq","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-i-query_seq","()",""],["query_start","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-query_start","()","<p>Same as hsps.first.query_from. Returns nil if there are no hsp in the hit.\n(Compatibility method with …\n"],["query_start","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-query_start","()",""],["query_start","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-query_start","()","<p>Information on matching region\n"],["query_strand","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-query_strand","()","<p>Returns strand information of the mRNA (query). Returns &#39;plus&#39;,\n&#39;minus&#39;, or nil.\n"],["query_string","Bio::Alignment::FactoryTemplate::Simple","Bio/Alignment/FactoryTemplate/Simple.html#method-i-query_string","(str)","<p>Performs alignment for <code>str</code>. The <code>str</code> should be a\nstring that can be recognized by the program.\n"],["query_string","Bio::ClustalW","Bio/ClustalW.html#method-i-query_string","(str, *arg)","<p>Performs alignment for <code>str</code>. <code>str</code> should be a\nstring that can be recognized by CLUSTAL W.\n<p>Compatibility …\n"],["query_string","Bio::MAFFT","Bio/MAFFT.html#method-i-query_string","(str, *arg)","<p>Performs alignment for <code>str</code>. Str should be a string that can be\nrecognized by the program.\n<p>Compatibility …\n"],["query_to","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-i-query_to","()",""],["query_to","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-i-query_to","()","<p>end position of the query (including its position)\n"],["query_to","Bio::Spidey::Report::SegmentPair","Bio/Spidey/Report/SegmentPair.html#method-i-query_to","()","<p>Returns end position (including its position) of the mRNA (query).\n"],["query_type","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-query_type","()",""],["ra","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-ra","()",""],["rad2deg","Bio::PDB::Utils","Bio/PDB/Utils.html#method-c-rad2deg","(r)","<p>radian to degree\n"],["randomize","Bio::Sequence::AA","Bio/Sequence/AA.html#method-c-randomize","(*arg, &block)","<p>Generate a new random sequence with the given frequency of bases. The\nsequence length is determined by …\n"],["randomize","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-randomize","(hash = nil)","<p>Returns a randomized sequence. The default is to retain the same \nbase/residue composition as the original. …\n"],["randomize","Bio::Sequence::NA","Bio/Sequence/NA.html#method-c-randomize","(*arg, &block)","<p>Generate a new random sequence with the given frequency of bases. The\nsequence length is determined by …\n"],["range","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-i-range","()","<p>Bio::Genescan::Report::Exon#range\n<p>Returns Range object of the region.\n"],["range","Bio::Location","Bio/Location.html#method-i-range","()","<p>Returns the range (from..to) of the location as a Range object.\n"],["range","Bio::Locations","Bio/Locations.html#method-i-range","()","<p>Similar to span, but returns a Range object min..max\n"],["raw=","Bio::FlatFile","Bio/FlatFile.html#method-i-raw-3D","(bool)","<p>If true is given, the next_entry method returns a entry as a text, whereas\nif false, returns as a parsed …\n"],["raw_to_reference","Bio::REBASE","Bio/REBASE.html#method-i-raw_to_reference","( line )","<p>Takes a string in one of the three formats listed below and returns a\nBio::Reference object\n<p>Possible input …\n\n"],["rc","Bio::TargetP::Report","Bio/TargetP/Report.html#method-i-rc","()","<p>Returns RC.\n"],["rd","Bio::Reference","Bio/Reference.html#method-i-rd","(str = nil)","<p>Return reference formatted in the RD style.\n\n<pre># ref is a Bio::Reference object\nputs ref.rd\n\n  == Title of ...</pre>\n"],["re","Bio::PROSITE","Bio/PROSITE.html#method-i-re","()",""],["re","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-re","()",""],["re_cut_symbol","Bio::RestrictionEnzyme::CutSymbol","Bio/RestrictionEnzyme/CutSymbol.html#method-i-re_cut_symbol","()","<p>A Regexp of the cut_symbol.\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["re_cut_symbol_adjacent","Bio::RestrictionEnzyme::CutSymbol","Bio/RestrictionEnzyme/CutSymbol.html#method-i-re_cut_symbol_adjacent","()","<p>Used to check if multiple cut symbols are next to each other.\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["reaction","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-reaction","()","<p>REACTION\n"],["reactions","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-reactions","()","<p>REACTION\n"],["reactions","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-reactions","()","<p>REACTION\n"],["reactions","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-reactions","()",""],["reactions","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-reactions","()",""],["reactions_as_hash","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-reactions_as_hash","()","<p>Reactions described in the REACTION lines.\n<p><strong>Returns</strong> &mdash; Hash of reaction ID and its definition\n\n"],["reactions_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-reactions_as_hash","()","<p>Reactions described in the REACTION lines.\n<p><strong>Returns</strong> &mdash; Hash of reaction ID and its definition\n\n"],["reactions_as_strings","Bio::KEGG::MODULE","Bio/KEGG/MODULE.html#method-i-reactions_as_strings","()","<p>Reactions described in the REACTION lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["reactions_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-reactions_as_strings","()","<p>Reactions described in the REACTION lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["read","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-c-read","(name, mode = 'rb', *bdbarg)",""],["read","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-read","(size)",""],["read","Bio::REBASE","Bio/REBASE.html#method-c-read","( f_enzyme, f_reference=nil, f_supplier=nil )","<p>Read REBASE EMBOSS-formatted files\n\n<pre>rebase = Bio::REBASE.read( &#39;emboss_e&#39; )\nrebase = Bio::REBASE.read( ...</pre>\n"],["read","Bio::Sequence","Bio/Sequence.html#method-c-read","(str, format = nil)","<p>alias of Bio::Sequence.input\n"],["read_uri","Bio::Command","Bio/Command.html#method-i-read_uri","(uri)","<p>Same as OpenURI.open_uri(uri).read and  it uses proxy if an environment\nvariable (same as OpenURI.open_uri …\n"],["readfiles","Bio::Alignment","Bio/Alignment.html#method-c-readfiles","(*files)","<p>creates a new Bio::Alignment::OriginalAlignment object. Please refer\ndocument of OriginalAlignment.readfiles …\n"],["readfiles","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-c-readfiles","(*files)","<p>Read files and creates a new alignment object.\n<p>It will be obsoleted.\n"],["rebase","Bio::RestrictionEnzyme","Bio/RestrictionEnzyme.html#method-c-rebase","()","<p>REBASE enzyme data information\n<p>Returns a Bio::REBASE object loaded with all of the enzyme data on file. …\n"],["recalc","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-recalc","()",""],["recalc","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-recalc","()",""],["recalc_all","Bio::FlatFileIndex::FileIDs","Bio/FlatFileIndex/FileIDs.html#method-i-recalc_all","()",""],["record","Bio::PDB","Bio/PDB.html#method-i-record","(name = nil)","<p>Gets all records whose record type is <em>name</em>. Returns an array of\n<code>Bio::PDB::Record::*</code> objects.\n<p>if <em>name</em> is …\n"],["record","Bio::PDB::ChemicalComponent","Bio/PDB/ChemicalComponent.html#method-i-record","(name = nil)","<p>Gets all records whose record type is <em>name</em>. Returns an array of\n<code>Bio::PDB::Record::*</code> objects.\n<p>if <em>name</em> is …\n"],["record_name","Bio::PDB::Record","Bio/PDB/Record.html#method-i-record_name","()","<p>Record name of this record, e.g. “HEADER”, “ATOM”.\n"],["record_size","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-record_size","()",""],["record_type","Bio::PDB::Record","Bio/PDB/Record.html#method-i-record_type","()","<p>keeping compatibility with old version\n"],["records","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-records","()",""],["records","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-records","()",""],["ref","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-ref","()","<p>returns contents in the R lines.\n<p>Bio::EMBLDB::Common#ref -&gt; [ &lt;refernece information Hash&gt;* ] …\n\n"],["ref","Bio::UniProtKB","Bio/UniProtKB.html#method-i-ref","()","<p>returns contents in the R lines.\n<p>Bio::EMBLDB::Common#ref -&gt; [ &lt;refernece information Hash&gt;* ] …\n\n"],["ref_authors","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-ref_authors","()",""],["ref_data","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-ref_data","()",""],["ref_no","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-ref_no","()",""],["ref_title","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-ref_title","()",""],["reference","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-reference","()","<p>Returns the bibliography reference of the BLAST software.  Note that this\nmethod shows only the first …\n"],["reference","Bio::LITDB","Bio/LITDB.html#method-i-reference","()","<p>Returns\n"],["reference","Bio::MEDLINE","Bio/MEDLINE.html#method-i-reference","()","<p>returns a Reference object.\n"],["references","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-references","()","<p>Returns the bibliography references of the BLAST software.  Returns an\narray of strings.\n"],["references","Bio::EMBLDB::Common","Bio/EMBLDB/Common.html#method-i-references","()","<p>returns Bio::Reference object from Bio::EMBLDB::Common#ref.\n<p>Bio::EMBLDB::Common#ref -&gt; Bio::References …\n\n"],["references","Bio::KEGG::Common::References","Bio/KEGG/Common/References.html#method-i-references","()","<p>REFERENCE – Returns contents of the REFERENCE records as an Array of\nBio::Reference objects.\n"],["references","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-references","()","<p>REFERENCE – Returns contents of the REFERENCE records as an Array of\nBio::Reference objects.\n"],["references","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-references","()","<p>REFERENCE\n"],["references","Bio::KEGG::ORTHOLOGY","Bio/KEGG/ORTHOLOGY.html#method-i-references","()","<p>REFERENCE – Returns contents of the REFERENCE records as an Array of\nBio::Reference objects.\n<p><strong>Returns</strong> … &mdash; "],["references","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-references","()","<p>REFERENCE – Returns contents of the REFERENCE records as an Array of\nBio::Reference objects.\n<p><strong>Returns</strong> … &mdash; "],["references","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-references","()","<p>REFERENCE – Returns contents of the REFERENCE records as an Array of\nBio::Reference objects.\n"],["references","Bio::UniProtKB","Bio/UniProtKB.html#method-i-references","()","<p>returns Bio::Reference object from Bio::EMBLDB::Common#ref.\n<p>Bio::EMBLDB::Common#ref -&gt; Bio::References …\n\n"],["region","Bio::DAS::SEGMENT","Bio/DAS/SEGMENT.html#method-c-region","(entry_id, start, stop)",""],["regulated","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-regulated","(num=20, threshold=nil)",""],["rehash","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-rehash","()","<p>Reconstructs internal data structure. (Like Hash#rehash)\n"],["rehash","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-rehash","()","<p>rebuilds the object and clears internal cache.\n"],["rehash","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-rehash","()","<p>rehash residues hash and heterogens hash\n"],["rehash","Bio::PDB::Model","Bio/PDB/Model.html#method-i-rehash","()","<p>rehash chains hash\n"],["rehash_heterogens","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-rehash_heterogens","()","<p>rehash heterogens hash\n"],["rehash_residues","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-rehash_residues","()","<p>rehash residues hash\n"],["rel_pathways","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-rel_pathways","()",""],["rel_pathways_as_hash","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-rel_pathways_as_hash","()","<p>Returns REL_PATHWAY field as a Hash. Each key of the hash is Pathway ID,\nand each value is the name of …\n"],["rel_pathways_as_strings","Bio::KEGG::PATHWAY","Bio/KEGG/PATHWAY.html#method-i-rel_pathways_as_strings","()","<p>Returns REL_PATHWAY field of the entry.\n<p><strong>Returns</strong> &mdash; Array containing String objects\n\n"],["relation","Bio::Relation","Bio/Relation.html#method-i-relation","()",""],["relative","Bio::Locations","Bio/Locations.html#method-i-relative","(n, type = nil)","<p>Converts absolute position in the whole of the DNA sequence to relative \nposition in the locus.\n<p>This method …\n"],["release","Bio::PROSITE","Bio/PROSITE.html#method-i-release","()","<p>Returns\n"],["release_created","Bio::EMBL","Bio/EMBL.html#method-i-release_created","()","<p>release number when created\n"],["release_modified","Bio::EMBL","Bio/EMBL.html#method-i-release_modified","()","<p>release number when last updated\n"],["remark","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-remark","()","<p>REMARK\n"],["remark","Bio::KEGG::DRUG","Bio/KEGG/DRUG.html#method-i-remark","()","<p>REMARK lines.\n<p><strong>Returns</strong> &mdash; String\n\n"],["remark","Bio::KEGG::GLYCAN","Bio/KEGG/GLYCAN.html#method-i-remark","()","<p>REMARK\n"],["remark","Bio::PDB","Bio/PDB.html#method-i-remark","(nn = nil)","<p>Gets REMARK records. If no arguments, it returns all REMARK records as a\nhash. If remark number is specified, …\n"],["remote","Bio::Blast","Bio/Blast.html#method-c-remote","(program, db, option = '', server = 'genomenet')","<p>Bio::Blast.remote does exactly the same as Bio::Blast.new, but sets the\nremote server &#39;genomenet&#39; …\n"],["remote","Bio::Fasta","Bio/Fasta.html#method-c-remote","(program, db, option = '', server = 'genomenet')","<p>Returns a FASTA factory object (Bio::Fasta) to execute FASTA search on\nremote server.\n<p>For the develpper, …\n"],["remote","Bio::PSORT::PSORT2","Bio/PSORT/PSORT2.html#method-c-remote","(host, path = nil)","<p>Returns a PSORT2 CGI Driver object (Bio::PSORT::PSORT2::Remote).\n<p>PSORT official hosts:\n\n<pre>key      host   ...</pre>\n"],["removeSolvent","Bio::PDB::Model","Bio/PDB/Model.html#method-i-removeSolvent","()","<p>(OBSOLETE) not recommended to use this method\n"],["remove_all_gaps","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-remove_all_gaps","()","<p>Not-destructive version of remove_gaps!. Returns a new alignment.\n<p>The method name &#39;remove_gap&#39; …\n"],["remove_all_gaps!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-remove_all_gaps-21","()","<p>Completely removes ALL gaps in the sequences. If removes nothing, returns\nnil. Otherwise, returns self. …\n"],["remove_edge","Bio::Tree","Bio/Tree.html#method-i-remove_edge","(source, target)","<p># Removes an edge between source and target. # Returns self. # If the edge\ndoes not exist, raises IndexError …\n"],["remove_edge_if","Bio::Tree","Bio/Tree.html#method-i-remove_edge_if","()","<p>Removes each edge if the block returns not nil. Returns self.\n"],["remove_entry_secure","Bio::Command","Bio/Command.html#method-i-remove_entry_secure","(path, force = false)","<p>Same as FileUtils.remove_entry_secure after Ruby 1.8.3. In Ruby 1.8.2 or\nprevious version, it only shows …\n"],["remove_gaps!","Bio::Alignment::SiteMethods","Bio/Alignment/SiteMethods.html#method-i-remove_gaps-21","()","<p>Removes gaps in the site. (destructive method)\n"],["remove_incomplete_cuts","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-remove_incomplete_cuts","(size=nil)","<p>There may be incomplete cuts made, this method removes the cuts that\ndon&#39;t create sub-sequences for …\n"],["remove_node","Bio::Tree","Bio/Tree.html#method-i-remove_node","(node)","<p>Removes the given node from the tree. All edges connected with the node are\nalso removed. Returns self. …\n"],["remove_node_if","Bio::Tree","Bio/Tree.html#method-i-remove_node_if","()","<p>Removes each node if the block returns not nil. All edges connected with\nthe removed nodes are also removed. …\n"],["remove_nonsense_nodes","Bio::Tree","Bio/Tree.html#method-i-remove_nonsense_nodes","()","<p>Removes all nodes that are not branches nor leaves. That is, removes nodes\nconnected with exactly two …\n"],["remove_seq","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-remove_seq","(seq)","<p>Removes given sequence from the alignment. Returns removed sequence. If\nnothing removed, returns nil. …\n"],["rep_accession_no","Bio::Hinv::HixRepresent","Bio/Hinv/HixRepresent.html#method-i-rep_accession_no","()",""],["rep_h_invitational_id","Bio::Hinv::HixRepresent","Bio/Hinv/HixRepresent.html#method-i-rep_h_invitational_id","()",""],["rep_match","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-rep_match","()","<p>“rep. match”. Number of bases that match but are part of repeats. Note that\ncurrent version …\n"],["reparse","Bio::Newick","Bio/Newick.html#method-i-reparse","()","<p>Re-parses the tree from the original string. Returns self. This method is\nuseful after changing parser …\n"],["replace","Bio::Location","Bio/Location.html#method-i-replace","(sequence)","<p>Replaces the sequence of the location.\n<p><strong>Arguments</strong>:\n<p>(required) <em>sequence</em>: sequence to be used to replace the …\n"],["replace_attributes","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-replace_attributes","(tag, *values)","<p>Replaces values for the given tags with new values. Existing values for the\ntag are completely wiped …\n"],["replace_slice","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-replace_slice","(aln, *arg)","<p>Replace the specified region of the alignment to aln.\n<p>aln &mdash; String or Bio::Alignment object\n<p>arg &mdash; same format …\n"],["report","Bio::SiRNA::Pair","Bio/SiRNA/Pair.html#method-i-report","()","<p>human readable report\n"],["report","Bio::SiRNA::ShRNA","Bio/SiRNA/ShRNA.html#method-i-report","()","<p>human readable report\n"],["reports","Bio::Blast","Bio/Blast.html#method-c-reports","(input, parser = nil)","<p>Bio::Blast.report parses given data,  and returns an array of report \n(Bio::Blast::Report or Bio::Blast::Default::Report …\n"],["reports","Bio::HMMER","Bio/HMMER.html#method-c-reports","(multiple_report_text)","<p>A reader interface for multiple reports text into a report \n(Bio::HMMER::Report).\n<p>Examples\n\n<pre># Iterator\nBio::HMMER.reports(reports_text) ...</pre>\n"],["reports","Bio::TMHMM","Bio/TMHMM.html#method-c-reports","(data)","<p>Splits multiple reports into a report entry.\n"],["reports_xml","Bio::Blast","Bio/Blast.html#method-c-reports_xml","(input, parser = nil)","<p>Note that this is the old implementation of Bio::Blast.reports. The aim of\nthis method is keeping compatibility …\n"],["representative_annotations","Bio::FANTOM::MaXML::Cluster","Bio/FANTOM/MaXML/Cluster.html#method-i-representative_annotations","()",""],["representative_clone","Bio::FANTOM::MaXML::Cluster","Bio/FANTOM/MaXML/Cluster.html#method-i-representative_clone","()",""],["representative_cloneid","Bio::FANTOM::MaXML::Cluster","Bio/FANTOM/MaXML/Cluster.html#method-i-representative_cloneid","()",""],["representative_seqid","Bio::FANTOM::MaXML::Cluster","Bio/FANTOM/MaXML/Cluster.html#method-i-representative_seqid","()",""],["representative_sequence","Bio::FANTOM::MaXML::Cluster","Bio/FANTOM/MaXML/Cluster.html#method-i-representative_sequence","()",""],["resSeq=","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-resSeq-3D","(resSeq)","<p>resSeq=()\n"],["reset","Bio::Alignment::FactoryTemplate::FileInFileOutWithTree","Bio/Alignment/FactoryTemplate/FileInFileOutWithTree.html#method-i-reset","()",""],["reset","Bio::Alignment::FactoryTemplate::Simple","Bio/Alignment/FactoryTemplate/Simple.html#method-i-reset","()","<p>Clear the internal data and status, except program and options.\n"],["reset","Bio::Blast::Remote::Information","Bio/Blast/Remote/Information.html#method-i-reset","()","<p>Resets data and clears cached data in this module.\n"],["reset","Bio::ClustalW","Bio/ClustalW.html#method-i-reset","()","<p>Clear the internal data and status, except program and options.\n"],["reset","Bio::MAFFT","Bio/MAFFT.html#method-i-reset","()","<p>Clear the internal data and status, except program and options.\n"],["reset_entrez_default_parameters","Bio::NCBI","Bio/NCBI.html#method-c-reset_entrez_default_parameters","()","<p>Resets Entrez (eUtils) default parameters.\n<p><strong>Returns</strong> &mdash; (Hash) default parameters\n\n"],["residues","Bio::PDB::ResidueFinder","Bio/PDB/ResidueFinder.html#method-i-residues","()","<p>returns all residues\n"],["result","Bio::Hinv::Acc2hit","Bio/Hinv/Acc2hit.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;H-INVITATIONAL-ID&gt;HIT000053961&lt;/H-INVITATIONAL-ID&gt;</pre>\n"],["result","Bio::Hinv::Hit2acc","Bio/Hinv/Hit2acc.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;ACCESSION-NO&gt;AK097327&lt;/ACCESSION-NO&gt;</pre>\n"],["result","Bio::Hinv::HitCnt","Bio/Hinv/HitCnt.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;TRANSCRIPT_CNT&gt;187156&lt;/TRANSCRIPT_CNT&gt;</pre>\n"],["result","Bio::Hinv::HitDefinition","Bio/Hinv/HitDefinition.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;HIT_FUNCTION&gt;\n &lt;H-INVITATIONAL-ID&gt;HIT000000001&lt;/H-INVITATIONAL-ID&gt; ...</pre>\n"],["result","Bio::Hinv::HitPubmedId","Bio/Hinv/HitPubmedId.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;CDNA_DB-REFERENCE_PUBMED&gt;7624364&lt;/CDNA_DB-REFERENCE_PUBMED&gt; ...</pre>\n"],["result","Bio::Hinv::HitXML","Bio/Hinv/HitXML.html#method-i-result","()","<p>&lt;?xml version=“1.0” standalone=“yes” ?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;cDNAXML&gt;\n&lt;CLUSTER-ID&gt;HIX0021591&lt;/CLUSTER-ID&gt; ...</pre>\n"],["result","Bio::Hinv::Hix2hit","Bio/Hinv/Hix2hit.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;H-INVITATIONAL-ID&gt;HIT000012846&lt;/H-INVITATIONAL-ID&gt; ...</pre>\n"],["result","Bio::Hinv::HixCnt","Bio/Hinv/HixCnt.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;LOCUS_CNT&gt;36073&lt;/LOCUS_CNT&gt;</pre>\n"],["result","Bio::Hinv::HixRepresent","Bio/Hinv/HixRepresent.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt; &lt;H-Inv&gt;\n\n<pre>&lt;LOCUS&gt;\n &lt;CLUSTER-ID&gt;HIX0000001&lt;/CLUSTER-ID&gt; ...</pre>\n"],["result","Bio::Hinv::KeywordSearch","Bio/Hinv/KeywordSearch.html#method-i-result","()","<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt;\n&lt;HINVDB_SEARCH&gt;\n\n<pre>&lt;QUERY&gt;HIT00002218*&lt;/QUERY&gt; ...</pre>\n"],["retrieve","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-i-retrieve","(ids, hash = {})","<p>Intelligent version of the entry method. If two or more databases are\nspecified, sequentially tries them …\n"],["retrieve","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-c-retrieve","(*arg)","<p>The same as Bio::TogoWS::REST#retrieve.\n"],["reverse_complement","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-reverse_complement","()","<p>Returns a new sequence object with the reverse complement  sequence to the\noriginal.  The original sequence …\n"],["reverse_complement!","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-reverse_complement-21","()","<p>Converts the original sequence into its reverse complement.\n<p>The original sequence is modified.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atgc&#39;) ...</pre>\n"],["reverse_each","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-reverse_each","()","<p>Same usage as Array#reverse_each\n"],["reverse_each","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-reverse_each","(&block)","<p>Same usage as Array#reverse_each\n"],["revtrans","Bio::CodonTable","Bio/CodonTable.html#method-i-revtrans","(aa)","<p>Reverse translation of a amino acid into a list of relevant codons.\n\n<pre>table = Bio::CodonTable[1]\ntable.revtrans(&quot;A&quot;) ...</pre>\n"],["rewind","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-i-rewind","()","<p>Rewinds the stream\n"],["rewind","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-i-rewind","()","<p>Rewinds the stream\n"],["rewind","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-rewind","()","<p>rewinds\n"],["rewind","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-rewind","()","<p>rewinds\n"],["rewind","Bio::FlatFile","Bio/FlatFile.html#method-i-rewind","()","<p>Resets file pointer to the start of the flatfile. (similar to IO#rewind)\n"],["rewind","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-rewind","()","<p>Rewinds the IO object if possible Internal buffer in this wrapper is\ncleared.\n"],["rewind","Bio::FlatFile::Splitter::LineOriented","Bio/FlatFile/Splitter/LineOriented.html#method-i-rewind","()","<p>rewinds the stream\n"],["rewind","Bio::FlatFile::Splitter::Template","Bio/FlatFile/Splitter/Template.html#method-i-rewind","()","<p>rewind the stream\n"],["rexml","Bio::Blast::Report","Bio/Blast/Report.html#method-c-rexml","(data)","<p>Specify to use REXML to parse XML (-m 7) output.\n"],["reynolds","Bio::SiRNA","Bio/SiRNA.html#method-i-reynolds","()","<p>same as design(&#39;reynolds&#39;).\n"],["reynolds?","Bio::SiRNA","Bio/SiRNA.html#method-i-reynolds-3F","(target)","<p>Reynolds&#39; rule.\n"],["right_padding","Bio::RestrictionEnzyme::StringFormatting","Bio/RestrictionEnzyme/StringFormatting.html#method-i-right_padding","( s )","<p>Return the &#39;n&#39; padding on the right side of the strand\n<p><strong>Arguments</strong>\n<p><code>s</code>: sequence with extraneous &#39;n&#39; …\n"],["rl","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-rl","()",""],["rn","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-rn","()",""],["rna","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-rna","()","<p>Returns a new sequence object with any &#39;t&#39; bases changed to\n&#39;u&#39;. The original sequence …\n"],["rna!","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-rna-21","()","<p>Changes any &#39;t&#39; bases in the original sequence to &#39;u&#39;. The\noriginal sequence is modified. …\n"],["rna?","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-rna-3F","()",""],["row_sum","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-row_sum","(i)","<p>Report the sum of all values in a given row\n<p><strong>Arguments</strong>\n<p><code>i</code>: Row to sum\n"],["row_sum_all","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-row_sum_all","()","<p>Report the sum of all values in all rows.\n<p>This is the same thing as asking for the sum of all values in …\n\n"],["rows","Bio::AAindex2","Bio/AAindex2.html#method-i-rows","()","<p>Returns row labels.\n"],["rpairs","Bio::KEGG::COMPOUND","Bio/KEGG/COMPOUND.html#method-i-rpairs","()","<p>RPAIR\n"],["rpairs","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-rpairs","()",""],["rpairs_as_hash","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-rpairs_as_hash","()","<p>KEGG RPAIR (ReactantPair) information, described in the RPAIR lines.\nReturns a hash of RPair IDs and …\n"],["rpairs_as_strings","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-rpairs_as_strings","()","<p>KEGG RPAIR (ReactantPair) information, described in the RPAIR lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["rpairs_as_tokens","Bio::KEGG::REACTION","Bio/KEGG/REACTION.html#method-i-rpairs_as_tokens","()","<p>Returns the content of the RPAIR entry as tokens (RPair signature, RPair\nID, , RPair type).\n<p><strong>Returns</strong> &mdash; Array …\n\n"],["rstrip","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-rstrip","()","<p>Not-destructive version of alignment_rstrip!. Returns a new alignment.\n"],["rstrip!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-rstrip-21","()",""],["rt","Bio::TRANSFAC","Bio/TRANSFAC.html#method-i-rt","()",""],["ru","Bio::PROSITE","Bio/PROSITE.html#method-i-ru","()","<p>RU  Rule                               (&gt;=0 per entry)\n\n<pre>RU   Rule_Description.\n\nThe rule is described ...</pre>\n"],["rule","Bio::PROSITE","Bio/PROSITE.html#method-i-rule","()",""],["run","Bio::EMBOSS","Bio/EMBOSS.html#method-c-run","(program, *options)","<p>Runs an emboss program and get the result as string. Note that “-auto\n-stdout” are automatically …\n"],["run","Bio::Meme::Mast","Bio/Meme/Mast.html#method-i-run","()","<p>Run the mast program\n<p><strong>Returns</strong> &mdash; Bio::Meme::Mast::Report object\n\n"],["run","Bio::PAML::Common","Bio/PAML/Common.html#method-i-run","(control_file)","<p>Runs the program on the parameters in the passed control file. No\nparameters checks are performed. All …\n"],["s1","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-s1","()",""],["safe_command_line_array","Bio::Command","Bio/Command.html#method-i-safe_command_line_array","(ary)","<p>Returns an Array of command-line command and arguments that can be safely\npassed to Kernel.exec etc. …\n"],["save_yaml","Bio::REBASE","Bio/REBASE.html#method-i-save_yaml","( f_enzyme, f_reference=nil, f_supplier=nil )","<p>Save the current data\n\n<pre>rebase.save_yaml( &#39;enz.yaml&#39; )\nrebase.save_yaml( &#39;enz.yaml&#39;, &#39;ref.yaml&#39; )\nrebase.save_yaml( ...</pre>\n"],["sc","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-sc","()","<p>SC      Sequence comment, i. e. source of the protein sequence\n"],["sc_match","Bio::Blast::Report","Bio/Blast/Report.html#method-i-sc_match","()","<p>Match score for NT (-r) : shortcuts for @parameters\n"],["sc_mismatch","Bio::Blast::Report","Bio/Blast/Report.html#method-i-sc_mismatch","()","<p>Mismatch score for NT (-q) : shortcuts for @parameters\n"],["science","Bio::Reference","Bio/Reference.html#method-i-science","()","<p>Returns reference formatted in the  Science style.\n\n<pre># ref is a Bio::Reference object\nputs ref.science\n ...</pre>\n"],["score","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-score","()","<p>Returns first hsp&#39;s score.\n"],["score","Bio::Blast::WU::Report::Hit","Bio/Blast/WU/Report/Hit.html#method-i-score","()","<p>Returns score.\n"],["score","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-score","()","<p>Calculates the score compatible with the BLAT web server as described in\nthe BLAT FAQ (genome.ucsc.edu/FAQ/FAQblat#blat4 …\n"],["scores2str","Bio::Fastq::FormatData","Bio/Fastq/FormatData.html#method-i-scores2str","(a)","<p>Converts scores to a string. Overflow/underflow checks will be performed. \nIf a block is given, when …\n"],["sd","Bio::TRANSFAC::CLASS","Bio/TRANSFAC/CLASS.html#method-i-sd","()","<p>SD      Structure description\n"],["sd","Bio::TRANSFAC::GENE","Bio/TRANSFAC/GENE.html#method-i-sd","()","<p>SD      Short description/name of the gene\n"],["search","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-search","(key)","<p>Searching databank and returns a Bio::FlatFileIndex::Results object.\n"],["search","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-search","(key)","<p>methods for searching\n"],["search","Bio::FlatFileIndex::BDB_1::PrimaryNameSpace","Bio/FlatFileIndex/BDB_1/PrimaryNameSpace.html#method-i-search","(key)",""],["search","Bio::FlatFileIndex::BDB_1::SecondaryNameSpace","Bio/FlatFileIndex/BDB_1/SecondaryNameSpace.html#method-i-search","(key)",""],["search","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-search","(key)","<p>methods for searching\n"],["search","Bio::FlatFileIndex::Flat_1::SecondaryNameSpace","Bio/FlatFileIndex/Flat_1/SecondaryNameSpace.html#method-i-search","(key)",""],["search","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-search","(key)",""],["search","Bio::FlatFileIndex::Template::NameSpace","Bio/FlatFileIndex/Template/NameSpace.html#method-i-search","(key)",""],["search","Bio::NCBI::REST::ESearch::Methods","Bio/NCBI/REST/ESearch/Methods.html#method-i-search","(db, term, *args)","<p>search(“nucleotide”, “tardigrada”) search(“nucleotide”, “tardigrada”, …\n"],["search","Bio::PubMed","Bio/PubMed.html#method-i-search","(str)","<p>This method will be DEPRECATED in the future.\n<p>Search the PubMed database by given keywords using entrez …\n"],["search","Bio::PubMed","Bio/PubMed.html#method-c-search","(*args)","<p>This method will be DEPRECATED. Use esearch method.\n<p>The same as Bio::PubMed.new.search(*args).\n"],["search","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-i-search","(database, query, offset = nil, limit = nil, format = nil)","<p>Database search. Format of the search term string follows the Common Query\nLanguage.\n<p>en.wikipedia.org/wiki/Common_Query_Language …\n\n"],["search","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-c-search","(*arg)","<p>The same as Bio::TogoWS::REST#search.\n"],["search_all","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-search_all","(key)",""],["search_all_get_unique_id","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-search_all_get_unique_id","(key)",""],["search_database_list","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-i-search_database_list","()","<p>Returns list of available databases in the search service.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["search_database_list","Bio::TogoWS::REST","Bio/TogoWS/REST.html#method-c-search_database_list","(*arg)","<p>The same as Bio::TogoWS::REST#search_database_list\n"],["search_names","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-search_names","(key, *names)",""],["search_namespaces","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-search_namespaces","(key, *names)","<p>Searching only specified namespeces. Returns a Bio::FlatFileIndex::Results\nobject.\n"],["search_namespaces","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-search_namespaces","(key, *names)",""],["search_namespaces_get_unique_id","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-search_namespaces_get_unique_id","(key, *names)",""],["search_primary","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-search_primary","(key)","<p>Searching only primary namespece. Returns a Bio::FlatFileIndex::Results\nobject.\n"],["search_primary","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-search_primary","(*arg)",""],["search_primary_get_unique_id","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-search_primary_get_unique_id","(key)",""],["secondary","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-secondary","()",""],["secondary=","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-secondary-3D","(sec_names)",""],["secondary_namespaces","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-i-secondary_namespaces","()","<p>Returns names of secondary namespaces as an array of strings.\n"],["seek","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-seek","(*arg)",""],["seek","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-seek","(i)",""],["segment","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-segment","()","<p>SEGMENT – Returns contents of the SEGMENT record as a “m/n” form String.\n"],["segmentpairs","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-segmentpairs","()","<p>Returns segment pairs (exons and introns) of the hit. Each segment pair is\na Bio::Sim4::Report::SegmentPair …\n"],["segmentpairs","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-segmentpairs","()","<p>Returns segment pairs (exons and introns) of the hit. Each segment pair is\na Bio::Spidey::Report::SegmentPair …\n"],["select","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-select","(*arg)","<p>If block is given, it acts like Array#select (Enumerable#select).  Returns\na new alignment containing …\n"],["seq","Bio::EMBL","Bio/EMBL.html#method-i-seq","()","<p>returns the nucleotie sequence in this entry.\n<p>Bio::EMBL#seq  -&gt; Bio::Sequence::NA\n\n<p>@orig as sequence …\n"],["seq","Bio::FastaFormat","Bio/FastaFormat.html#method-i-seq","()","<p>Returns a joined sequence line as a String.\n"],["seq","Bio::Fastq","Bio/Fastq.html#method-i-seq","()","<p>returns Bio::Sequence::Generic\n"],["seq","Bio::GCG::Seq","Bio/GCG/Seq.html#method-i-seq","()","<p>Sequence data. The class of the sequence is Bio::Sequence::NA,\nBio::Sequence::AA or Bio::Sequence::Generic …\n"],["seq","Bio::GenBank","Bio/GenBank.html#method-i-seq","()","<p>ORIGIN – Returns DNA sequence in the ORIGIN record as a Bio::Sequence::NA\nobject.\n"],["seq","Bio::GenPept","Bio/GenPept.html#method-i-seq","()","<p>ORIGIN\n"],["seq","Bio::Lasergene","Bio/Lasergene.html#method-i-seq","()","<p>Sequence\n<p>Bio::Sequence::NA or Bio::Sequence::AA object\n"],["seq","Bio::NBRF","Bio/NBRF.html#method-i-seq","()","<p>Returns sequence data. Returns Bio::Sequence::NA, Bio::Sequence::AA or\nBio::Sequence, according to the …\n"],["seq","Bio::SangerChromatogram","Bio/SangerChromatogram.html#method-i-seq","()","<p>Returns a Bio::Sequence::NA object based on the sequence from the\nchromatogram\n"],["seq","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-seq","()","<p>Create a new sequence based on the current sequence. The original sequence\nis unchanged.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atgc&#39;) ...</pre>\n"],["seq","Bio::UniProtKB","Bio/UniProtKB.html#method-i-seq","()","<p>returns a Bio::Sequence::AA of the amino acid sequence.\n<p>Bio::UniProtKB#seq -&gt; Bio::Sequence::AA\n\n<p>blank …\n"],["seq!","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-seq-21","()",""],["seq1_intron","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-c-seq1_intron","(prev_e, e, aln)","<p>Parses part of sim4 result text and creates a new SegmentPair object when\nthe seq1 is a intron. It is …\n"],["seq2_intron","Bio::Sim4::Report::SegmentPair","Bio/Sim4/Report/SegmentPair.html#method-c-seq2_intron","(prev_e, e, aln)","<p>Parses part of sim4 result text and creates a new SegmentPair object when\nseq2 is a intron. It is designed …\n"],["seq_class","Bio::NBRF","Bio/NBRF.html#method-i-seq_class","()","<p>Returns Bio::Sequence::AA, Bio::Sequence::NA, or Bio::Sequence, depending\non sequence type.\n"],["seq_data","Bio::GCG::Msf","Bio/GCG/Msf.html#method-i-seq_data","()","<p>gets seq data (used internally) (will be obsoleted)\n"],["seq_len","Bio::GenBank","Bio/GenBank.html#method-i-seq_len","()","<p>(obsolete???) length of the sequence\n"],["seq_len","Bio::GenPept","Bio/GenPept.html#method-i-seq_len","()",""],["seq_length","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-seq_length","()",""],["seqclass","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-seqclass","()","<p>Returns class of the sequence. If instance variable @seqclass (which can be\nset by &#39;seqclass=&#39; …\n"],["seqclass","Bio::Alignment::PropertyMethods","Bio/Alignment/PropertyMethods.html#method-i-seqclass","()","<p>Returns class of the sequence. If instance variable @seqclass (which can be\nset by &#39;seqclass=&#39; …\n"],["seqlen","Bio::EMBL","Bio/EMBL.html#method-i-seqlen","()",""],["seqres","Bio::PDB","Bio/PDB.html#method-i-seqres","(chainID = nil)","<p>Amino acid or nucleic acid sequence of backbone residues in “SEQRES”. If\n<em>chainID</em> is given, …\n"],["seqret","Bio::EMBOSS","Bio/EMBOSS.html#method-c-seqret","(arg)","<p>Combines the initialization and execution for the emboss\n<code>seqret</code> command.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">EMBOSS</span>.<span class=\"ruby-identifier\">seqret</span>(<span class=\"ruby-string\">&#39;embl:xlrhodop&#39;</span>)\n</pre>\n"],["sequence","Bio::FANTOM::MaXML::Cluster","Bio/FANTOM/MaXML/Cluster.html#method-i-sequence","(idstr = nil)",""],["sequence","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-sequence","(ids, format = \"gb\", hash = {})","<p>Retrieve sequence entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["sequence_length","Bio::EMBL","Bio/EMBL.html#method-i-sequence_length","()","<p>returns SEQUENCE_LENGTH in the ID line.\n<p>Bio::EMBL#sequencelength -&gt; String\n\n"],["sequence_length","Bio::UniProtKB","Bio/UniProtKB.html#method-i-sequence_length","()","<p>returns a SEQUENCE_LENGTH in the ID line.\n<p>A short-cut for Bio::UniProtKB#id_line(&#39;SEQUENCE_LENGHT&#39;). …\n"],["sequence_names","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-sequence_names","()","<p>Returns an array of sequence names. The order of the names must be the same\nas the order of <code>each_seq</code> …\n"],["sequence_names","Bio::Alignment::HashExtension","Bio/Alignment/HashExtension.html#method-i-sequence_names","()","<p>Returns an array of sequence names. The order of the names must be the same\nas the order of <code>each_seq</code> …\n"],["sequence_string","Bio::SangerChromatogram","Bio/SangerChromatogram.html#method-i-sequence_string","()","<p>Returns the sequence from the chromatogram as a string\n"],["sequences","Bio::FANTOM::MaXML::Cluster","Bio/FANTOM/MaXML/Cluster.html#method-i-sequences","()",""],["server=","Bio::Blast","Bio/Blast.html#method-i-server-3D","(str)","<p>Sets server to submit the BLASTs to. The exec_xxxx method should be defined\nin Bio::Blast or Bio::Blast::Remote::Xxxx …\n"],["set","Bio::Blast::NCBIOptions","Bio/Blast/NCBIOptions.html#method-i-set","(key, value)","<p>Sets the option to given value.\n<p>For example, if you want to set &#39;-p blastall&#39; option,\n\n<pre>obj.set(&#39;p&#39;, ...</pre>\n"],["set_RN","Bio::UniProtKB","Bio/UniProtKB.html#method-i-set_RN","(data)",""],["set_aaseq","Bio::Genscan::Report::Gene","Bio/Genscan/Report/Gene.html#method-i-set_aaseq","(seq)","<p>Bio::Genescan::Report::Gene#seq_aaseq\n"],["set_alignment","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-i-set_alignment","(alignment)",""],["set_all_property","Bio::Alignment::PropertyMethods","Bio/Alignment/PropertyMethods.html#method-i-set_all_property","(hash)","<p>Sets properties from given hash. <em>hash</em> would be a return value of\n<code>get_character</code> method.\n"],["set_attribute","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-set_attribute","(tag, value)","<p>Sets value for the given tag. If the tag exists, the value of the tag is\nreplaced with <em>value</em>. Note that …\n"],["set_cut_symbol","Bio::RestrictionEnzyme::CutSymbol","Bio/RestrictionEnzyme/CutSymbol.html#method-i-set_cut_symbol","(glyph)","<p>Set the token to be used as the cut symbol in a restriction enzyme sequece\n<p>Starts as +^+ character\n<p><strong>Arguments</strong> …\n"],["set_datatype","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-set_datatype","( data_type )","<p>Sets the “data type” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>data_type</em>: String\n"],["set_date","Bio::GO::External2go","Bio/GO/External2go.html#method-i-set_date","(value)","<p>Bio::GO::External2go#set_date(value)\n"],["set_default_parameters","Bio::PAML::Common","Bio/PAML/Common.html#method-i-set_default_parameters","()","<p>Loads system-wide default parameters. Note that all previous parameters are\nerased. Returns the parameters …\n"],["set_desc","Bio::GO::External2go","Bio/GO/External2go.html#method-i-set_desc","(ary)","<p>Bio::GO::External2go#set_desc(ary)\n"],["set_features","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-i-set_features","(features_ary)","<p>Sets @features values.\n"],["set_gap_character","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-set_gap_character","( gap_character )","<p>Sets the “gap character” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>gap_character</em>: String\n"],["set_header_line","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-i-set_header_line","(str)","<p>Returns header information.\n"],["set_kNN_prob","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-c-set_kNN_prob","(str)","<p>Returns @prob value.\n"],["set_match_character","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-set_match_character","( match_character )","<p>Sets the “match character” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>match_character</em>: String\n"],["set_matrix","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-set_matrix","( matrix )","<p>Sets the matrix.\n<p><strong>Arguments</strong>:\n<p>(required) <em>matrix</em>: Bio::Nexus::NexusMatrix\n"],["set_matrix","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-set_matrix","( matrix )","<p>Sets the matrix.\n<p><strong>Arguments</strong>:\n<p>(required) <em>matrix</em>: Bio::Nexus::NexusMatrix\n"],["set_missing","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-set_missing","( missing )","<p>Sets the “missing” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>missing</em>: String\n"],["set_naseq","Bio::Genscan::Report::Gene","Bio/Genscan/Report/Gene.html#method-i-set_naseq","(seq)","<p>Bio::Genescan::Report::Gene#seq_naseq\n"],["set_number_of_characters","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-set_number_of_characters","( number_of_characters )","<p>Sets the “number of characters” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>number_of_characters</em>: Integer …\n"],["set_number_of_characters","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-set_number_of_characters","( number_of_characters )","<p>Sets the “number of characters” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>number_of_characters</em>: Integer …\n"],["set_number_of_taxa","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-set_number_of_taxa","( number_of_taxa )","<p>Sets the “number of taxa” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>number_of_taxa</em>: Integer\n"],["set_number_of_taxa","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-set_number_of_taxa","( number_of_taxa )","<p>Sets the “number of taxa” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>number_of_taxa</em>: Integer\n"],["set_number_of_taxa","Bio::Nexus::TaxaBlock","Bio/Nexus/TaxaBlock.html#method-i-set_number_of_taxa","( number_of_taxa )","<p>Sets the “number of taxa” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>number_of_taxa</em>: Integer\n"],["set_polyA","Bio::Genscan::Report::Gene","Bio/Genscan/Report/Gene.html#method-i-set_polyA","(segment)","<p>Bio::Genescan::Report::Gene#seq_polyA\n"],["set_prediction","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-i-set_prediction","(str)","<p>Returns @prob and @k values.\n"],["set_primary_namespace","Bio::FlatFileIndex::Indexer::Parser::TemplateParser","Bio/FlatFileIndex/Indexer/Parser/TemplateParser.html#method-i-set_primary_namespace","(name)",""],["set_promoter","Bio::Genscan::Report::Gene","Bio/Genscan/Report/Gene.html#method-i-set_promoter","(segment)","<p>Bio::Genescan::Report::Gene#seq_promoter\n"],["set_triangle","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-set_triangle","( triangle )","<p>Sets the “triangle” property.\n<p><strong>Arguments</strong>:\n<p>(required) <em>triangle</em>: String\n"],["set_value","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-set_value","( row, col, value )","<p>Sets the value at row &#39;row&#39; and column &#39;col&#39; to\n&#39;value&#39;.\n<p><strong>Arguments</strong>:\n<p>(required) …\n"],["setup_enzyme_and_reference_association","Bio::REBASE","Bio/REBASE.html#method-i-setup_enzyme_and_reference_association","()",""],["setup_enzyme_data","Bio::REBASE","Bio/REBASE.html#method-i-setup_enzyme_data","()",""],["setup_new_bin","Bio::RestrictionEnzyme::Range::SequenceRange","Bio/RestrictionEnzyme/Range/SequenceRange.html#method-i-setup_new_bin","(bins, bin_id)","<p>Modifies bins in place by creating a new element with key bin_id and\ninitializing the bin.\n"],["sf","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-sf","()","<p>SF      Structural features\n"],["sf","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-sf","()",""],["shape","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-shape","()","<p>Deprecated. Same as self.graphics.type (additional nil checks may be\nneeded).\n<p>shape of the &#39;graphics&#39; …\n"],["shape=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-shape-3D","(val)","<p>Deprecated. Same as self.graphics.type= (additional nil checks may be\nneeded).\n"],["sheet","Bio::PDB","Bio/PDB.html#method-i-sheet","(sheetID = nil)","<p>Gets SHEET records. If no arguments are given, it returns all SHEET records\nas an array of arrays of …\n"],["shift","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-shift","()","<p>Removes the first sequence in the alignment and returns [ key, seq ].\n"],["significant","Bio::PAML::Codeml::Report","Bio/PAML/Codeml/Report.html#method-i-significant","()","<p>If the number of models is two we can calculate whether the result is\nstatistically significant, or not, …\n"],["site","Bio::PROSITE","Bio/PROSITE.html#method-i-site","()","<p>Returns\n"],["sites","Bio::PAML::Codeml::Report","Bio/PAML/Codeml/Report.html#method-i-sites","()","<p>Return a PositiveSites Bayes Empirical Bayes (BEB) analysis\n"],["size","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-size","()","<p>Number of sequences in the alignment.\n"],["size","Bio::FlatFileIndex::BDB_1::BDBMappingFile","Bio/FlatFileIndex/BDB_1/BDBMappingFile.html#method-i-size","()",""],["size","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-size","()",""],["size","Bio::FlatFileIndex::Results","Bio/FlatFileIndex/Results.html#method-i-size","()","<p>Returns number of results. Same as to_a.size.\n"],["size","Bio::Hinv::KeywordSearch","Bio/Hinv/KeywordSearch.html#method-i-size","()",""],["size","Bio::Locations","Bio/Locations.html#method-i-size","()",""],["size","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-size","()","<p>Same usage as Array#size\n"],["size","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-size","()","<p>Same usage as Array#size\n"],["skip_flag","Bio::PROSITE","Bio/PROSITE.html#method-i-skip_flag","()","<p>Returns\n"],["skip_leader","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-i-skip_leader","()","<p>Skips leader of the entry. In this class, only skips space characters.\n"],["skip_leader","Bio::Blast::RPSBlast::RPSBlastSplitter","Bio/Blast/RPSBlast/RPSBlastSplitter.html#method-i-skip_leader","()","<p>Skips leader of the entry. In this class, only skips space characters.\n"],["skip_leader","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-skip_leader","()","<p>do nothing\n"],["skip_leader","Bio::Blast::Report::BlastXmlSplitter","Bio/Blast/Report/BlastXmlSplitter.html#method-i-skip_leader","()","<p>do nothing\n"],["skip_leader","Bio::Fasta::Report::FastaFormat10Splitter","Bio/Fasta/Report/FastaFormat10Splitter.html#method-i-skip_leader","()","<p>do nothing and returns nil\n"],["skip_leader","Bio::Fasta::Report::FastaFormat10Splitter","Bio/Fasta/Report/FastaFormat10Splitter.html#method-i-skip_leader","()","<p>do nothing and returns nil\n"],["skip_leader","Bio::FlatFile::Splitter::Default","Bio/FlatFile/Splitter/Default.html#method-i-skip_leader","()","<p>Skips leader of the entry.\n<p>If @header is not nil, it reads till the contents of @header comes at the\nhead …\n"],["skip_leader","Bio::FlatFile::Splitter::LineOriented","Bio/FlatFile/Splitter/LineOriented.html#method-i-skip_leader","()","<p>do nothing\n"],["skip_leader","Bio::FlatFile::Splitter::Template","Bio/FlatFile/Splitter/Template.html#method-i-skip_leader","()","<p>skips leader of the entry.\n"],["skip_spaces","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-skip_spaces","()","<p>Skips space characters in the stream. returns nil.\n"],["slice","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-slice","(*arg)",""],["small_world","Bio::Pathway","Bio/Pathway.html#method-i-small_world","()","<p>Returns frequency of the nodes having same number of edges as hash\n<p>Calculates the frequency of the nodes …\n"],["so","Bio::MEDLINE","Bio/MEDLINE.html#method-i-so","()","<p>SO   - Source\n\n<pre>Composite field containing bibliographic information.</pre>\n"],["so","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-so","()",""],["solexa_p2q","Bio::Sequence::QualityScore::Solexa","Bio/Sequence/QualityScore/Solexa.html#method-i-solexa_p2q","(probabilities)","<p>Probability to Solexa score conversion.\n<p><strong>Arguments</strong>:\n<p>(required) <em>probabilities</em>: (Array containing Float) probabilities …\n"],["solexa_q2p","Bio::Sequence::QualityScore::Solexa","Bio/Sequence/QualityScore/Solexa.html#method-i-solexa_q2p","(scores)","<p>Solexa score to probability conversion.\n<p><strong>Arguments</strong>:\n<p>(required) <em>scores</em>: (Array containing Integer) scores …\n"],["sort!","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-sort-21","(&block)","<p>Does nothing\n"],["sort!","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-sort-21","(&block)","<p>Does nothing\n"],["sort_attributes_by_tag!","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-sort_attributes_by_tag-21","(tags = nil)","<p>Sorts attributes order by given tag name&#39;s order. If a block is given,\nthe argument <em>tags</em> is ignored, …\n"],["source","Bio::MEDLINE","Bio/MEDLINE.html#method-i-source","()",""],["source","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-source","()","<p>SOURCE – Returns contents of the SOURCE record as a Hash.\n"],["sp_xref","Bio::PROSITE","Bio/PROSITE.html#method-i-sp_xref","()",""],["span","Bio::Locations","Bio/Locations.html#method-i-span","()","<p>Returns an Array containing overall min and max position [min, max] of this\nBio::Locations object.\n"],["species","Bio::EMBL","Bio/EMBL.html#method-i-species","()","<p>species\n"],["splice","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-splice","(position)","<p>Return a new sequence extracted from the original using a GenBank style \nposition string.  See also documentation …\n"],["splicing","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-splicing","(position)",""],["split_label_value_in","Bio::SOFT","Bio/SOFT.html#method-i-split_label_value_in","( line, shift_key=false )",""],["sq","Bio::EMBL","Bio/EMBL.html#method-i-sq","(base = nil)","<p>returns sequence header information in the sequence header (SQ) line.\n<p>Bio::EMBL#sq  -&gt; &lt;SQ Hash&gt; …\n\n"],["sq","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-sq","()","<p>SQ      Sequence\n"],["sq","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-sq","()",""],["sq","Bio::UniProtKB","Bio/UniProtKB.html#method-i-sq","(key = nil)","<p>returns a Hash of conteins in the SQ lines.\n<p>Bio::UniProtKBL#sq  -&gt; hsh\n\n<p>returns a value of a key given …\n"],["ssbond","Bio::PDB","Bio/PDB.html#method-i-ssbond","()","<p>Gets SSBOND records.\n"],["st","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-st","()",""],["standard_comment?","Bio::Lasergene","Bio/Lasergene.html#method-i-standard_comment-3F","()","<p>Is the comment header recognized as standard Lasergene format?\n<p><strong>Arguments</strong>\n<p><em>none</em>\n"],["start","Bio::Fasta::Report::Hit::Query","Bio/Fasta/Report/Hit/Query.html#method-i-start","()","<p>Returns alignment start position. You can also access this value by\nReport::Hit#query_start method for …\n"],["start","Bio::Hinv::KeywordSearch","Bio/Hinv/KeywordSearch.html#method-i-start","()",""],["start_codon?","Bio::CodonTable","Bio/CodonTable.html#method-i-start_codon-3F","(codon)","<p>Returns true if the codon is a start codon in the currently selected codon\ntable, otherwise false.\n"],["start_http","Bio::Command","Bio/Command.html#method-i-start_http","(address, port = 80, &block)","<p>Same as:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">start</span>(<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-identifier\">port</span>)\n</pre>\n<p>and  it uses proxy if an environment variable (same as OpenURI.open_uri …\n"],["start_http_uri","Bio::Command","Bio/Command.html#method-i-start_http_uri","(uri, &block)","<p>Same as:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">start</span>(<span class=\"ruby-identifier\">uri</span>.<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-identifier\">uri</span>.<span class=\"ruby-identifier\">port</span>)\n</pre>\n<p>and it uses proxy if an environment variable (same as  …\n"],["statistics","Bio::Blast::Report","Bio/Blast/Report.html#method-i-statistics","()","<p>Returns a Hash containing execution statistics of the last iteration. Valid\nkeys are: &#39;db-num&#39;, …\n"],["statistics","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-statistics","()","<p>STATISTICS – Returns contents of the STATISTICS record as a Hash.\n"],["statistics","Bio::PROSITE","Bio/PROSITE.html#method-i-statistics","()",""],["status","Bio::Iprscan::Report::Match","Bio/Iprscan/Report/Match.html#method-i-status","()","<p>Status of the match (T for true / M for marginal).\n"],["sticky?","Bio::RestrictionEnzyme::DoubleStranded","Bio/RestrictionEnzyme/DoubleStranded.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if the cut pattern creates sticky fragments.\n(opposite of blunt)\n"],["stop","Bio::Fasta::Report::Hit::Query","Bio/Fasta/Report/Hit/Query.html#method-i-stop","()","<p>Returns alignment end position. You can access this value by\nReport::Hit#query_end method for shortcut. …\n"],["stop_codon?","Bio::CodonTable","Bio/CodonTable.html#method-i-stop_codon-3F","(codon)","<p>Returns true if the codon is a stop codon in the currently selected codon\ntable, otherwise false.\n"],["store","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-store","(key, seq)","<p>stores a sequence with <em>key</em> (name or definition of the sequence).\nUnlike <code>__store__</code> method, the method …\n"],["str2scores","Bio::Fastq::FormatData","Bio/Fastq/FormatData.html#method-i-str2scores","(str)","<p>Converts quality string to scores. No overflow/underflow checks will be\nperformed.\n<p><strong>Arguments</strong>:\n<p>(required) …\n"],["strand","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-strand","()","<p>Returns strand information of the hit. Returns &#39;+&#39; or &#39;-&#39;.\nThis would be a Bio::Blat …\n"],["strand","Bio::GenBank","Bio/GenBank.html#method-i-strand","()",""],["strand","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-strand","()","<p>Returns strand information of the hit. Returns &#39;plus&#39;,\n&#39;minus&#39;, or nil. This would be …\n"],["strandedness","Bio::GenBank","Bio/GenBank.html#method-i-strandedness","()","<p>Strandedness. Returns one of &#39;single&#39;, &#39;double&#39;,\n&#39;mixed&#39;, or nil.\n"],["strands_for_display","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-strands_for_display","(str1 = nil, str2 = nil, vcp=nil, vcc=nil, hc=nil)","<p>Sets @strands_for_display_current to <code>true</code> and populates\n@strands_for_display.\n<p><strong>Arguments</strong>\n<p><code>str1</code>: (<em>optional</em> …\n"],["strip","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-strip","()","<p>Not-destructive version of alignment_strip!. Returns a new alignment.\n"],["strip!","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-strip-21","()",""],["strip_and_sort","Bio::RestrictionEnzyme::Fragments","Bio/RestrictionEnzyme/Fragments.html#method-i-strip_and_sort","( sym_strand )",""],["strip_cuts_and_padding","Bio::RestrictionEnzyme::StringFormatting","Bio/RestrictionEnzyme/StringFormatting.html#method-i-strip_cuts_and_padding","( s )","<p>Remove extraneous nucleic acid wildcards (&#39;n&#39; padding) from the\nleft and right sides and remove …\n"],["strip_padding","Bio::RestrictionEnzyme::StringFormatting","Bio/RestrictionEnzyme/StringFormatting.html#method-i-strip_padding","( s )","<p>Remove extraneous nucleic acid wildcards (&#39;n&#39; padding) from the\nleft and right sides\n<p><strong>Arguments</strong> …\n"],["structure","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-structure","()","<p>Returns structure ID information described in the STRUCTURE lines.\n<p><strong>Returns</strong> &mdash; Array containing String\n\n"],["structures","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-structures","()","<p>STRUCTURES\n"],["structures","Bio::KEGG::GENES","Bio/KEGG/GENES.html#method-i-structures","()",""],["subgraph","Bio::Pathway","Bio/Pathway.html#method-i-subgraph","(list = nil)","<p>Select labeled nodes and generate subgraph\n<p>This method select some nodes and returns new Bio::Pathway …\n"],["subseq","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-subseq","(*arg)",""],["subseq","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-subseq","(s = 1, e = self.length)","<p>Returns a new sequence containing the subsequence identified by the  start\nand end numbers given as parameters. …\n"],["substrates","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-substrates","()","<p>SUBSTRATE\n"],["subtree","Bio::Tree","Bio/Tree.html#method-i-subtree","(nodes)","<p>Gets the sub-tree consisted of given nodes. <em>nodes</em> must be an array\nof nodes. Nodes that do not exist …\n"],["subtree_with_all_paths","Bio::Tree","Bio/Tree.html#method-i-subtree_with_all_paths","(nodes)","<p>Gets the sub-tree consisted of given nodes and all internal nodes connected\nbetween given nodes. <em>nodes</em> …\n"],["sv","Bio::EMBL","Bio/EMBL.html#method-i-sv","()","<p>returns the version information in the sequence version (SV) line.\n<p>Bio::EMBL#sv -&gt; Accession.Version …\n"],["sw","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-sw","()","<p>Smith-Waterman score\n"],["swissprot_release_number","Bio::PROSITE","Bio/PROSITE.html#method-i-swissprot_release_number","()","<p>Returns\n"],["swissprot_release_sequences","Bio::PROSITE","Bio/PROSITE.html#method-i-swissprot_release_sequences","()","<p>Returns\n"],["sy","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-sy","()","<p>SY      Synonyms\n"],["symbol_comparison_table","Bio::GCG::Msf","Bio/GCG/Msf.html#method-i-symbol_comparison_table","()","<p>symbol comparison table\n"],["symbols","Bio::PDB::Record","Bio/PDB/Record.html#method-c-symbols","()","<p>symbols\n"],["synonyms","Bio::UniProtKB","Bio/UniProtKB.html#method-i-synonyms","()","<p>returns synonyms (unofficial and/or alternative names). Returns an Array\ncontaining String objects.\n<p>Since …\n"],["sysname","Bio::KEGG::ENZYME","Bio/KEGG/ENZYME.html#method-i-sysname","()","<p>SYSNAME\n"],["sz","Bio::TRANSFAC::FACTOR","Bio/TRANSFAC/FACTOR.html#method-i-sz","()","<p>SZ      Size (length (number of amino acids); calculated molecular mass  SZ\nin kDa; experimental …\n"],["ta","Bio::MEDLINE","Bio/MEDLINE.html#method-i-ta","()","<p>TA   - Journal Title Abbreviation\n\n<pre>Standard journal title abbreviation.</pre>\n"],["tab","Bio::Blast::Report","Bio/Blast/Report.html#method-c-tab","(data)","<p>Specify to use tab delimited output parser.\n"],["table_sum_all","Bio::ContingencyTable","Bio/ContingencyTable.html#method-i-table_sum_all","()",""],["tags","Bio::DB","Bio/DB.html#method-i-tags","()","<p>Returns a list of the top level tags of the entry as an Array of String.\n"],["target","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-target","()","<p>Returns sequence informations of the target(hit). Returns a\nBio::Blat::Report::SeqDesc object. This would …\n"],["target_avg","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-target_avg","()",""],["target_def","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-target_def","()",""],["target_def","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-target_def","()","<p>Returns the name of the target(subject) sequence.\n"],["target_def","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-target_def","()",""],["target_def","Bio::HMMER::Report::Hit","Bio/HMMER/Report/Hit.html#method-i-target_def","()","<p>Shows the hit description.\n"],["target_def","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-target_def","()","<p>Definition of the hit(target) sequence\n"],["target_def","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-target_def","()","<p>Definition of the genomic (target) sequence.\n"],["target_end","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-target_end","()","<p>Same as hsps.first.hit_to. Returns nil if there are no hsp in the hit.\n(Compatibility method with FASTA …\n"],["target_end","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-target_end","()",""],["target_end","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-target_end","()",""],["target_from","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-i-target_from","()",""],["target_id","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-target_id","()",""],["target_id","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-target_id","()",""],["target_id","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-target_id","()",""],["target_id","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-target_id","()","<p>Identifier of the hit(target) sequence\n"],["target_id","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-target_id","()","<p>Identifier of the genomic (target) sequence.\n"],["target_len","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-target_len","()",""],["target_len","Bio::Blat::Report::Hit","Bio/Blat/Report/Hit.html#method-i-target_len","()","<p>Returns the length of the target(subject) sequence.\n"],["target_len","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-target_len","()","<p>Shortcuts for the methods of Bio::Fasta::Report::Hit::Target\n"],["target_len","Bio::Sim4::Report::Hit","Bio/Sim4/Report/Hit.html#method-i-target_len","()","<p>length of the hit(target) sequence\n"],["target_len","Bio::Spidey::Report::Hit","Bio/Spidey/Report/Hit.html#method-i-target_len","()","<p>The genomic (target) sequence length.\n"],["target_sd","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-target_sd","()",""],["target_seq","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-target_seq","()","<p>Same as hsps.first.hseq. Returns nil if there are no hsp in the hit.\n(Compatibility method with FASTA …\n"],["target_seq","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-target_seq","()",""],["target_seq","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-target_seq","()",""],["target_seq","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-i-target_seq","()",""],["target_start","Bio::Blast::Default::Report::Hit","Bio/Blast/Default/Report/Hit.html#method-i-target_start","()","<p>Same as hsps.first.hit_from. Returns nil if there are no hsp in the hit.\n(Compatibility method with  …\n"],["target_start","Bio::Blast::Report::Hit","Bio/Blast/Report/Hit.html#method-i-target_start","()",""],["target_start","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-target_start","()",""],["target_to","Bio::HMMER::Report::Hsp","Bio/HMMER/Report/Hsp.html#method-i-target_to","()",""],["target_type","Bio::Fasta::Report::Hit","Bio/Fasta/Report/Hit.html#method-i-target_type","()",""],["target_var","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-target_var","()",""],["taxa_list","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-taxa_list","()","<p>List of all node labels from Taxonomy section. (e.g. [“actinobacteria”,\n“animals”, …\n"],["taxid","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-taxid","()","<p>Returns NCBI taxonomy ID from the TAXONOMY record as a String.\n"],["taxo2keggorgs","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-taxo2keggorgs","(node = 'genes')",""],["taxo2korgs","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-taxo2korgs","(node = 'genes')","<p>Returns an array of organism names included in the specified taxon label.\n(e.g. &#39;proteobeta&#39; …\n"],["taxon2keggorgs","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-taxon2keggorgs","(node = 'genes')",""],["taxon2korgs","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-taxon2korgs","(node = 'genes')",""],["taxon_range","Bio::PROSITE","Bio/PROSITE.html#method-i-taxon_range","(expand = nil)","<p>Returns\n"],["taxonomy","Bio::KEGG::GENOME","Bio/KEGG/GENOME.html#method-i-taxonomy","()","<p>TAXONOMY – Returns contents of the TAXONOMY record as a Hash.\n"],["taxonomy","Bio::KEGG::Keggtab","Bio/KEGG/Keggtab.html#method-i-taxonomy","(node = nil)","<p>Returns a hash containing Taxonomy section of the keggtab file. If argument\nis given, returns a List …\n"],["taxonomy","Bio::NCBI::REST::EFetch::Methods","Bio/NCBI/REST/EFetch/Methods.html#method-i-taxonomy","(ids, format = \"docsum\", hash = {})","<p>Retrieve taxonomy entries by given IDs using E-Utils (efetch).\n<p>www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch …\n\n"],["taxonomy","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-taxonomy","()",""],["termination_score","Bio::Genscan::Report::Exon","Bio/Genscan/Report/Exon.html#method-i-termination_score","()",""],["three","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-three","(x)",""],["three2name","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-three2name","(x)",""],["three2one","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-three2one","(x)",""],["threshold","Bio::Fasta::Report","Bio/Fasta/Report.html#method-i-threshold","(evalue_max = 0.1)","<p>Returns an Array of Bio::Fasta::Report::Hit objects having better evalue\nthan &#39;evalue_max&#39;.\n"],["ti","Bio::MEDLINE","Bio/MEDLINE.html#method-i-ti","()","<p>TI   - Title Words\n\n<pre>The title of the article.</pre>\n"],["title","Bio::AAindex","Bio/AAindex.html#method-i-title","()","<p>Returns title in the T line.\n"],["title","Bio::LITDB","Bio/LITDB.html#method-i-title","()","<p>TITLE\n"],["title","Bio::MEDLINE","Bio/MEDLINE.html#method-i-title","()",""],["to","Bio::Relation","Bio/Relation.html#method-i-to","()","<p>Returns another node.\n"],["to_1","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-to_1","(x)",""],["to_3","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-to_3","(x)",""],["to_a","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-to_a","()","<p>Compatibility note: Behavior of the method will be changed in the future.\n<p>Gets an array of the sequences. …\n"],["to_a","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-to_a","()","<p>Compatibility note: Behavior of the method will be changed in the future.\n<p>Gets an array of the sequences. …\n"],["to_a","Bio::FANTOM::MaXML::Annotations","Bio/FANTOM/MaXML/Annotations.html#method-i-to_a","()",""],["to_a","Bio::FANTOM::MaXML::Sequences","Bio/FANTOM/MaXML/Sequences.html#method-i-to_a","()",""],["to_a","Bio::FlatFile","Bio/FlatFile.html#method-c-to_a","(*arg)","<p>Same as FlatFile.auto(filename_or_stream, *arg).to_a\n<p>(This method might be OBSOLETED in the future.)\n"],["to_a","Bio::FlatFileIndex::Results","Bio/FlatFileIndex/Results.html#method-i-to_a","()","<p>Returns an array of strings. If no search results are exist, returns an\nempty array.\n"],["to_a","Bio::GFF::GFF2::Record::Value","Bio/GFF/GFF2/Record/Value.html#method-i-to_a","()",""],["to_a","Bio::MAFFT::Report","Bio/MAFFT/Report.html#method-i-to_a","()","<p>Compatibility note: Behavior of the method will be changed in the future.\n<p>Gets an array of the sequences. …\n"],["to_a","Bio::PAML::Codeml::PositiveSite","Bio/PAML/Codeml/PositiveSite.html#method-i-to_a","()","<p>Return contents as Array - useful for printing\n"],["to_a","Bio::PDB::Record::ATOM","Bio/PDB/Record/ATOM.html#method-i-to_a","()","<p>Returns an array of the xyz positions\n"],["to_a","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-to_a","()","<p>Converts to an array\n"],["to_array_index","Bio::RestrictionEnzyme::DoubleStranded::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/DoubleStranded/CutLocationsInEnzymeNotation.html#method-i-to_array_index","()","<p>Returns the contents of the present CutLocationsInEnzymeNotation object as\na CutLocations object with …\n"],["to_array_index","Bio::RestrictionEnzyme::SingleStrand::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/SingleStrand/CutLocationsInEnzymeNotation.html#method-i-to_array_index","()","<p>Transform the cut locations from enzyme index notation to 0-based index\nnotation.\n\n<pre>input -&gt; output\n[  1, ...</pre>\n"],["to_ary","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-to_ary","()","<p>Implicit conversion to an array.\n<p>Note that this method would be deprecated in the future.\n"],["to_biosequence","Bio::EMBL","Bio/EMBL.html#method-i-to_biosequence","()","<p>converts the entry to Bio::Sequence object\n<p><strong>Arguments</strong>, <strong>Returns</strong> &mdash; Bio::Sequence object\n\n"],["to_biosequence","Bio::FastaFormat","Bio/FastaFormat.html#method-i-to_biosequence","()","<p>Returns sequence as a Bio::Sequence object.\n<p>Note: If you modify the returned Bio::Sequence object, the …\n"],["to_biosequence","Bio::FastaNumericFormat","Bio/FastaNumericFormat.html#method-i-to_biosequence","()","<p>Returns the data as a Bio::Sequence object. In the returned sequence\nobject, the length of the sequence …\n"],["to_biosequence","Bio::Fastq","Bio/Fastq.html#method-i-to_biosequence","()","<p>Returns sequence as a Bio::Sequence object.\n<p>Note: If you modify the returned Bio::Sequence object, the …\n"],["to_biosequence","Bio::GenBank","Bio/GenBank.html#method-i-to_biosequence","()","<p>converts Bio::GenBank to Bio::Sequence\n<p><strong>Arguments</strong>:\n<p><strong>Returns</strong> &mdash; Bio::Sequence object\n"],["to_biosequence","Bio::SangerChromatogram","Bio/SangerChromatogram.html#method-i-to_biosequence","()","<p>Returns a Bio::Sequence object based on the sequence from the chromatogram\n"],["to_clustal","Bio::Alignment::Output","Bio/Alignment/Output.html#method-i-to_clustal","(*arg)","<p># to_clustal is deprecated. Instead, please use output_clustal. +\n"],["to_fasta","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-to_fasta","(*arg)","<p>Converts to fasta format and returns a string.\n<p>The specification of the argument will be changed.\n<p>Note: …\n"],["to_fasta","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-to_fasta","(*arg)","<p>This will be deprecated. Instead, please use alignment.output_fasta.\n<p>Gets an fasta-format string of the …\n"],["to_fasta","Bio::ClustalW::Report","Bio/ClustalW/Report.html#method-i-to_fasta","(*arg)","<p>This will be deprecated. Instead, please use alignment.output_fasta.\n<p>Gets an fasta-format string of the …\n"],["to_fasta","Bio::MAFFT::Report","Bio/MAFFT/Report.html#method-i-to_fasta","(*arg)","<p>This will be deprecated. Instead, please use alignment.output_fasta.\n<p>Gets an fasta-format string of the …\n"],["to_fasta","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-to_fasta","(header = '', width = nil)","<p><strong>Bio::Sequence#to_fasta is DEPRECATED</strong> Do not use\nBio::Sequence#to_fasta ! Use Bio::Sequence#output instead. …\n"],["to_fasta_array","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-to_fasta_array","(*arg)","<p>Convert to fasta format and returns an array of strings.\n<p>It will be obsoleted.\n"],["to_fastaformat_array","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-to_fastaformat_array","(*arg)","<p>Convets to fasta format and returns an array of FastaFormat objects.\n<p>It will be obsoleted.\n"],["to_gcg","Bio::GCG::Seq","Bio/GCG/Seq.html#method-c-to_gcg","(hash)","<p>Creates a new GCG sequence format text. Parameters can be omitted.\n<p>Examples:\n\n<pre>Bio::GCG::Seq.to_gcg(:definition=&gt;&#39;H.sapiens ...</pre>\n"],["to_hash","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-to_hash","()","<p>convert to hash\n"],["to_hash","Bio::Feature","Bio/Feature.html#method-i-to_hash","()","<p>Returns a Hash constructed from qualifier objects.\n"],["to_hash","Bio::Iprscan::Report","Bio/Iprscan/Report.html#method-i-to_hash","()","<p>Returns a Hash (key as an Interpro ID and value as a Match).\n\n<pre>report.to_hash.each do |ipr_id, matches| ...</pre>\n"],["to_io","Bio::FlatFile","Bio/FlatFile.html#method-i-to_io","()","<p>IO object in the flatfile object.\n<p>Compatibility Note: Bio::FlatFile#io is deprecated.\n"],["to_io","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-to_io","()","<p>Converts to IO object if possible\n"],["to_list","Bio::Pathway","Bio/Pathway.html#method-i-to_list","()","<p>Graph (adjacency list) generation from the Relations\n<p>Generate the adjcancecy list @graph from @relations …\n"],["to_matrix","Bio::Pathway","Bio/Pathway.html#method-i-to_matrix","(default_value = nil, diagonal_value = nil)","<p>Convert adjacency list to adjacency matrix\n<p>Returns the adjacency matrix expression of the graph as a  …\n"],["to_nbrf","Bio::NBRF","Bio/NBRF.html#method-c-to_nbrf","(hash)","<p>Creates a NBRF/PIR formatted text. Parameters can be omitted.\n"],["to_nexus","Bio::Nexus::CharactersBlock","Bio/Nexus/CharactersBlock.html#method-i-to_nexus","()","<p>Returns a String describing this block as nexus formatted data.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_nexus","Bio::Nexus::DataBlock","Bio/Nexus/DataBlock.html#method-i-to_nexus","()","<p>Returns a String describing this block as nexus formatted data.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_nexus","Bio::Nexus::DistancesBlock","Bio/Nexus/DistancesBlock.html#method-i-to_nexus","()","<p>Returns a String describing this block as nexus formatted data.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_nexus","Bio::Nexus::GenericBlock","Bio/Nexus/GenericBlock.html#method-i-to_nexus","()","<p>Should return a String describing this block as nexus formatted data.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_nexus","Bio::Nexus::TaxaBlock","Bio/Nexus/TaxaBlock.html#method-i-to_nexus","()","<p>Returns a String describing this block as nexus formatted data.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_nexus","Bio::Nexus::TreesBlock","Bio/Nexus/TreesBlock.html#method-i-to_nexus","()","<p>Returns a String describing this block as nexus formatted data.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_nexus_helper","Bio::Nexus::Util","Bio/Nexus/Util.html#method-c-to_nexus_helper","( block, lines )","<p>Helper method to produce nexus formatted data.\n<p><strong>Arguments</strong>:\n<p>(required) <em>block</em>: Nexus:GenericBlock or its subclasses …\n"],["to_nexus_row_array","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-to_nexus_row_array","( spacer = \"\", append_delimiter = true )","<p>Helper method to produce nexus formatted data.\n<p><strong>Arguments</strong>:\n<p>(optional) <em>spacer</em>: String\n"],["to_re","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-to_re","(seq)",""],["to_re","Bio::NucleicAcid::Data","Bio/NucleicAcid/Data.html#method-i-to_re","(seq, rna = false)",""],["to_re","Bio::Sequence::AA","Bio/Sequence/AA.html#method-i-to_re","()","<p>Create a ruby regular expression instance  (Regexp)\n\n<pre>s = Bio::Sequence::AA.new(&quot;RRLE&quot;)\nputs s.to_re    ...</pre>\n"],["to_re","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-to_re","()","<p>Create a ruby regular expression instance  (Regexp)\n\n<pre>s = Bio::Sequence::NA.new(&#39;atggcgtga&#39;)\nputs s.to_re ...</pre>\n"],["to_relations","Bio::Pathway","Bio/Pathway.html#method-i-to_relations","()","<p>Reconstruct @relations from the adjacency list @graph.\n"],["to_s","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-to_s","()","<p>Returns whole entry as a string.\n"],["to_s","Bio::FANTOM::MaXML","Bio/FANTOM/MaXML.html#method-i-to_s","()",""],["to_s","Bio::FastaDefline","Bio/FastaDefline.html#method-i-to_s","()","<p>Shows original string. Note that the result of this method may be different\nfrom original string which …\n"],["to_s","Bio::FastaFormat","Bio/FastaFormat.html#method-i-to_s","()",""],["to_s","Bio::Fastq","Bio/Fastq.html#method-i-to_s","()","<p>Returns Fastq formatted string constructed from instance variables. The\nstring will always be consisted …\n"],["to_s","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-to_s","()",""],["to_s","Bio::FlatFileIndex::FileID","Bio/FlatFileIndex/FileID.html#method-i-to_s","(i = nil)",""],["to_s","Bio::FlatFileIndex::Flat_1::Record","Bio/FlatFileIndex/Flat_1/Record.html#method-i-to_s","()",""],["to_s","Bio::FlatFileIndex::NameSpaces","Bio/FlatFileIndex/NameSpaces.html#method-i-to_s","()",""],["to_s","Bio::FlatFileIndex::Results","Bio/FlatFileIndex/Results.html#method-i-to_s","()","<p>Returns a string. (concatinated if multiple results exists). Same as\n<code>to_a.join(&#39;&#39;)</code>.\n"],["to_s","Bio::GFF::GFF2","Bio/GFF/GFF2.html#method-i-to_s","()","<p>string representation of the whole entry.\n"],["to_s","Bio::GFF::GFF2::MetaData","Bio/GFF/GFF2/MetaData.html#method-i-to_s","()","<p>string representation of this meta-data\n"],["to_s","Bio::GFF::GFF2::Record","Bio/GFF/GFF2/Record.html#method-i-to_s","()","<p>Return the record as a GFF2 compatible string\n"],["to_s","Bio::GFF::GFF2::Record::Value","Bio/GFF/GFF2/Record/Value.html#method-i-to_s","()","<p>Returns string representation of this Value object.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_s","Bio::GFF::GFF3","Bio/GFF/GFF3.html#method-i-to_s","()","<p>string representation of whole entry.\n"],["to_s","Bio::GFF::GFF3::Record","Bio/GFF/GFF3/Record.html#method-i-to_s","()","<p>Return the record as a GFF3 compatible string\n"],["to_s","Bio::GFF::GFF3::Record::Gap","Bio/GFF/GFF3/Record/Gap.html#method-i-to_s","()","<p>string representation\n"],["to_s","Bio::GFF::GFF3::Record::Gap::Code","Bio/GFF/GFF3/Record/Gap/Code.html#method-i-to_s","()",""],["to_s","Bio::GFF::GFF3::Record::Target","Bio/GFF/GFF3/Record/Target.html#method-i-to_s","()","<p>returns a string\n"],["to_s","Bio::GFF::GFF3::RecordBoundary","Bio/GFF/GFF3/RecordBoundary.html#method-i-to_s","()",""],["to_s","Bio::GFF::GFF3::SequenceRegion","Bio/GFF/GFF3/SequenceRegion.html#method-i-to_s","()","<p>string representation\n"],["to_s","Bio::Locations","Bio/Locations.html#method-i-to_s","()","<p>String representation.\n<p>Note: In some cases, it fails to detect whether “complement(join(…))” …\n"],["to_s","Bio::NBRF","Bio/NBRF.html#method-i-to_s","()",""],["to_s","Bio::Nexus","Bio/Nexus.html#method-i-to_s","()","<p>Returns a String listing how many of each blocks it parsed.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_s","Bio::Nexus::GenericBlock","Bio/Nexus/GenericBlock.html#method-i-to_s","()","<p>Same as to_nexus.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_s","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-to_s","()","<p>Returns matrix as String, returns “empty” if empty.\n<p><strong>Returns</strong> &mdash; String\n\n"],["to_s","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-to_s","()","<p>Return the model information as a String\n"],["to_s","Bio::PAML::Codeml::PositiveSites","Bio/PAML/Codeml/PositiveSites.html#method-i-to_s","()","<p>Return the positive selection information as a String\n"],["to_s","Bio::PDB","Bio/PDB.html#method-i-to_s","()","<p>Returns a string of Bio::PDB::Models. This propogates down the heirarchy\ntill you get to Bio::PDB::Record::ATOM …\n"],["to_s","Bio::PDB::Chain","Bio/PDB/Chain.html#method-i-to_s","()","<p>Stringifies each residue\n"],["to_s","Bio::PDB::Model","Bio/PDB/Model.html#method-i-to_s","()","<p>stringifies to chains\n"],["to_s","Bio::PDB::Record::ATOM","Bio/PDB/Record/ATOM.html#method-i-to_s","()",""],["to_s","Bio::PDB::Residue","Bio/PDB/Residue.html#method-i-to_s","()","<p>Stringifies each atom\n"],["to_s","Bio::Sequence","Bio/Sequence.html#method-i-to_s","()","<p>Return sequence as  String. The original sequence is unchanged.\n\n<pre>seq = Bio::Sequence.new(&#39;atgc&#39;)\nputs s.to_s ...</pre>\n"],["to_s","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-to_s","()","<p>Return sequence as  String. The original sequence is unchanged.\n\n<pre>seq = Bio::Sequence::NA.new(&#39;atgc&#39;)\nputs ...</pre>\n"],["to_s","Bio::TMHMM::Report","Bio/TMHMM/Report.html#method-i-to_s","()",""],["to_s","Bio::TMHMM::TMH","Bio/TMHMM/TMH.html#method-i-to_s","()",""],["to_s","Bio::Tree::Edge","Bio/Tree/Edge.html#method-i-to_s","()","<p>string representation of this object\n"],["to_s","Bio::Tree::Node","Bio/Tree/Node.html#method-i-to_s","()","<p>string representation of this object\n"],["to_seq","Bio::FastaFormat","Bio/FastaFormat.html#method-i-to_seq","()",""],["to_seq","Bio::FastaNumericFormat","Bio/FastaNumericFormat.html#method-i-to_seq","()",""],["to_seq","Bio::SangerChromatogram","Bio/SangerChromatogram.html#method-i-to_seq","()",""],["to_str","Bio::GO::External2go","Bio/GO/External2go.html#method-i-to_str","()","<p>Bio::GO::External2go#to_str Returns the contents in the external2go format.\n"],["to_str","Bio::GO::GeneAssociation","Bio/GO/GeneAssociation.html#method-i-to_str","()","<p>Bio::GO::GeneAssociation#to_str -&gt; a line of gene_association file.\n"],["to_str","Bio::Nexus","Bio/Nexus.html#method-i-to_str","()",""],["to_str","Bio::Nexus::GenericBlock","Bio/Nexus/GenericBlock.html#method-i-to_str","()",""],["to_str","Bio::Nexus::NexusMatrix","Bio/Nexus/NexusMatrix.html#method-i-to_str","()",""],["to_str","Bio::Sequence","Bio/Sequence.html#method-i-to_str","()",""],["to_str","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-to_str","()",""],["to_string","Bio::FlatFileIndex::Flat_1::Record","Bio/FlatFileIndex/Flat_1/Record.html#method-c-to_string","(size, key, val)",""],["to_xyz","Bio::PDB::Utils","Bio/PDB/Utils.html#method-c-to_xyz","(obj)","<p>(Deprecated) alias of convert_to_xyz(obj)\n"],["too_short_parser","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-c-too_short_parser","(ent, entry_id = nil)","<p>Parser for “too short length&#39;&#39; report.\n\n<pre>$id: too short length ($leng), skipped\\n&quot;;</pre>\n"],["topology","Bio::EMBL","Bio/EMBL.html#method-i-topology","()",""],["total","Bio::PROSITE","Bio/PROSITE.html#method-i-total","()","<p>Returns\n"],["total","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-total","(hash)","<p>Returns a float total value for the sequence given a hash of base or\nresidue values,\n\n<pre>values = {&#39;a&#39; =&gt; ...</pre>\n"],["total_distance","Bio::Tree","Bio/Tree.html#method-i-total_distance","()","<p>Returns total distance of all edges. It would raise error if some edges\ndidn&#39;t contain distance values. …\n"],["total_hits","Bio::PROSITE","Bio/PROSITE.html#method-i-total_hits","()","<p>Returns\n"],["total_sequences","Bio::PROSITE","Bio/PROSITE.html#method-i-total_sequences","()","<p>Returns\n"],["tr","Bio::TRANSFAC::GENE","Bio/TRANSFAC/GENE.html#method-i-tr","()","<p>TR      TRRD accession number\n"],["translate","Bio::Sequence::NA","Bio/Sequence/NA.html#method-i-translate","(frame = 1, table = 1, unknown = 'X')","<p>Translate into an amino acid sequence.\n\n<pre>s = Bio::Sequence::NA.new(&#39;atggcgtga&#39;)\nputs s.translate        ...</pre>\n"],["tree","Bio::Newick","Bio/Newick.html#method-i-tree","()","<p>Gets the tree. Returns a Bio::Tree object.\n"],["tree","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-tree","()","<p>Return codeml tree\n"],["tree_length","Bio::PAML::Codeml::Model","Bio/PAML/Codeml/Model.html#method-i-tree_length","()","<p>Return codeml treee length\n"],["trends","Bio::Reference","Bio/Reference.html#method-i-trends","()","<p>Returns reference formatted in the  TRENDS style.\n\n<pre># ref is a Bio::Reference object\nputs ref.trends\n\n  ...</pre>\n"],["tsort_each_child","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-tsort_each_child","(elem)","<p>(required by TSort.) For a given element, yields each child (= lower\npriority elements) of the element. …\n"],["tsort_each_node","Bio::FlatFile::AutoDetect","Bio/FlatFile/AutoDetect.html#method-i-tsort_each_node","(&x)","<p>(required by TSort.) For all elements, yields each element.\n"],["turn","Bio::PDB","Bio/PDB.html#method-i-turn","(turnId = nil)","<p>Gets TURN records. If no arguments are given, it returns all TURN records. \n(Returns an array of <code>Bio::PDB::Record::TURN</code> …\n"],["ty","Bio::TRANSFAC::SITE","Bio/TRANSFAC/SITE.html#method-i-ty","()",""],["ui","Bio::MEDLINE","Bio/MEDLINE.html#method-i-ui","()","<p>UI   - MEDLINE Unique Identifier\n\n<pre>Unique number assigned to each MEDLINE citation.</pre>\n"],["uitei","Bio::SiRNA","Bio/SiRNA.html#method-i-uitei","()","<p>same as design(&#39;uitei&#39;).\n"],["uitei?","Bio::SiRNA","Bio/SiRNA.html#method-i-uitei-3F","(target)","<p>Ui-Tei&#39;s rule.\n"],["undirected","Bio::Pathway","Bio/Pathway.html#method-i-undirected","()","<p>Changes the internal state of the graph from &#39;directed&#39; to\n&#39;undirected&#39; and re-generate …\n"],["undirected?","Bio::Pathway","Bio/Pathway.html#method-i-undirected-3F","()","<p>Returns true or false respond to the internal state of the graph.\n"],["ungapped_pos","Bio::Alignment::GAP","Bio/Alignment/GAP.html#method-c-ungapped_pos","(seq, pos, gap_regexp)","\n<pre>position with gaps are translated into the position without gaps.</pre>\n<p><em>seq</em> &mdash; sequence\n<p><em>pos</em> &mdash; position with gaps\n"],["ungetc","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-ungetc","(c)","<p>Pushes back one character into the internal buffer. Unlike IO#getc, it can\nbe called more than one time. …\n"],["ungets","Bio::FlatFile::BufferedInputStream","Bio/FlatFile/BufferedInputStream.html#method-i-ungets","(str)","<p>Pushes back given str to the internal buffer. Returns nil. str must be read\npreviously with the wrapper …\n"],["uniq!","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-uniq-21","()","<p>Does nothing\n"],["uniq!","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-uniq-21","()","<p>Does nothing\n"],["unknown","Bio::PROSITE","Bio/PROSITE.html#method-i-unknown","()","<p>Returns\n"],["unknown_hits","Bio::PROSITE","Bio/PROSITE.html#method-i-unknown_hits","()","<p>Returns\n"],["unknown_sequences","Bio::PROSITE","Bio/PROSITE.html#method-i-unknown_sequences","()","<p>Returns\n"],["unshift","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-unshift","(key, seq)","<p>Prepends seq (with key) to the front of the alignment. (Like Array#unshift)\n"],["unshift","Bio::RestrictionEnzyme::DenseIntArray","Bio/RestrictionEnzyme/DenseIntArray.html#method-i-unshift","(*arg)","<p>Same usage as Array#unshift\n"],["unshift","Bio::RestrictionEnzyme::SortedNumArray","Bio/RestrictionEnzyme/SortedNumArray.html#method-i-unshift","(*arg)","<p>Same usage as Array#unshift\n"],["up_regulated","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-up_regulated","(num=20, threshold=nil)",""],["update_index","Bio::FlatFileIndex","Bio/FlatFileIndex.html#method-c-update_index","(dbname, format, options, *files)",""],["update_index","Bio::FlatFileIndex::Indexer","Bio/FlatFileIndex/Indexer.html#method-c-update_index","(name, parser, options, *files)",""],["v_parser","Bio::PSORT::PSORT2::Report","Bio/PSORT/PSORT2/Report.html#method-c-v_parser","(ent, entry_id = nil)","<p>Parser for the verbose output report format. “psort -v report&#39;&#39; and\nWWW server output.\n"],["val2rgb","Bio::KEGG::EXPRESSION","Bio/KEGG/EXPRESSION.html#method-i-val2rgb","()",""],["validate_1","Bio::RestrictionEnzyme::DoubleStranded::CutLocationPair","Bio/RestrictionEnzyme/DoubleStranded/CutLocationPair.html#method-i-validate_1","( ary )",""],["validate_2","Bio::RestrictionEnzyme::DoubleStranded::CutLocationPair","Bio/RestrictionEnzyme/DoubleStranded/CutLocationPair.html#method-i-validate_2","( a, b )",""],["validate_2","Bio::RestrictionEnzyme::DoubleStranded::CutLocationPairInEnzymeNotation","Bio/RestrictionEnzyme/DoubleStranded/CutLocationPairInEnzymeNotation.html#method-i-validate_2","( a, b )",""],["validate_args","Bio::RestrictionEnzyme::DoubleStranded::CutLocations","Bio/RestrictionEnzyme/DoubleStranded/CutLocations.html#method-i-validate_args","(args)",""],["validate_args","Bio::RestrictionEnzyme::DoubleStranded::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/DoubleStranded/CutLocationsInEnzymeNotation.html#method-i-validate_args","(args)",""],["validate_args","Bio::RestrictionEnzyme::SingleStrand","Bio/RestrictionEnzyme/SingleStrand.html#method-i-validate_args","( input_pattern, input_cut_locations )",""],["validate_checksum","Bio::GCG::Msf","Bio/GCG/Msf.html#method-i-validate_checksum","()","<p>validates checksum\n"],["validate_checksum","Bio::GCG::Seq","Bio/GCG/Seq.html#method-i-validate_checksum","()","<p>Validates checksum. If validation succeeds, returns true. Otherwise,\nreturns false.\n"],["validate_cut_locations","Bio::RestrictionEnzyme::SingleStrand::CutLocationsInEnzymeNotation","Bio/RestrictionEnzyme/SingleStrand/CutLocationsInEnzymeNotation.html#method-i-validate_cut_locations","( input_cut_locations )",""],["validate_format","Bio::Fastq","Bio/Fastq.html#method-i-validate_format","(errors = nil)","<p>Format validation.\n<p>If an array is given as the argument, when errors are found, error objects\nare pushed …\n"],["validate_input","Bio::RestrictionEnzyme::DoubleStranded::AlignedStrands","Bio/RestrictionEnzyme/DoubleStranded/AlignedStrands.html#method-c-validate_input","(a,b)",""],["values","Bio::Alignment::OriginalAlignment","Bio/Alignment/OriginalAlignment.html#method-i-values","()","<p>Returns sequences. (Like Hash#values)\n"],["values","Bio::GFF::GFF2::Record::Value","Bio/GFF/GFF2/Record/Value.html#method-i-values","()","<p>Returns all values in this object.\n<p>Note that modification of the returned array would affect original …\n"],["vc_complement","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-vc_complement","()","<p><code>Array</code> of vertical cuts on the complementary strand in 0-based\nindex notation\n"],["vc_complement_as_original_class","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-vc_complement_as_original_class","()","<p>Returns the same contents as vc_complement, but returns original data\nstructure used in the class.\n"],["vc_primary","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-vc_primary","()","<p><code>Array</code> of vertical cuts on the primary strand in 0-based index\nnotation\n"],["vc_primary_as_original_class","Bio::RestrictionEnzyme::Range::SequenceRange::CalculatedCuts","Bio/RestrictionEnzyme/Range/SequenceRange/CalculatedCuts.html#method-i-vc_primary_as_original_class","()","<p>Returns the same contents as vc_primary, but returns original data\nstructure used in the class.\n"],["vernacular_name","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-vernacular_name","()",""],["version","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-version","()","<p>Returns version of the program.\n"],["version","Bio::EMBL","Bio/EMBL.html#method-i-version","()",""],["version","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-version","()","<p>Returns the VERSION part of the acc_version as a Fixnum\n"],["version","Bio::PDB","Bio/PDB.html#method-i-version","()","<p>Current modification number in “REVDAT”.\n"],["version_date","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-version_date","()","<p>Returns released date of the program.\n"],["version_number","Bio::Blast::Default::Report","Bio/Blast/Default/Report.html#method-i-version_number","()","<p>Returns version number string of the program.\n"],["versions","Bio::NCBIDB::Common","Bio/NCBIDB/Common.html#method-i-versions","()","<p>VERSION – Returns contents of the VERSION record as an Array of Strings.\n"],["vertical_min_max_helper","Bio::RestrictionEnzyme::Range::CutRanges","Bio/RestrictionEnzyme/Range/CutRanges.html#method-i-vertical_min_max_helper","( sym_which )",""],["vi","Bio::MEDLINE","Bio/MEDLINE.html#method-i-vi","()","<p>VI   - Volume\n\n<pre>Journal volume.</pre>\n"],["volume","Bio::LITDB","Bio/LITDB.html#method-i-volume","()","<p>VOLUME\n"],["volume","Bio::MEDLINE","Bio/MEDLINE.html#method-i-volume","()",""],["w","Bio::PAML::Codeml::PositiveSite","Bio/PAML/Codeml/PositiveSite.html#method-i-w","()",""],["warnings","Bio::Blast::WU::Report","Bio/Blast/WU/Report.html#method-i-warnings","()","<p>Returns warning messages.\n"],["warnings","Bio::Blast::WU::Report::Iteration","Bio/Blast/WU/Report/Iteration.html#method-i-warnings","()","<p>Returns warning messages.\n"],["weight","Bio::AminoAcid::Data","Bio/AminoAcid/Data.html#method-i-weight","(x = nil)",""],["weight","Bio::NucleicAcid::Data","Bio/NucleicAcid/Data.html#method-i-weight","(x = nil, rna = nil)",""],["width","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-width","()","<p>Deprecated. Same as self.graphics.width (additional nil checks may be\nneeded).\n<p>width (Integer or nil) …\n"],["width=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-width-3D","(val)","<p>Deprecated. Same as self.graphics.width= (additional nil checks may be\nneeded).\n"],["window","Bio::Alignment::EnumerableExtension","Bio/Alignment/EnumerableExtension.html#method-i-window","(*arg)",""],["window_search","Bio::Sequence::Common","Bio/Sequence/Common.html#method-i-window_search","(window_size, step_size = 1)","<p>This method steps through a sequences in steps of &#39;step_size&#39; by \nsubsequences of &#39;window_size&#39;. …\n"],["windows_platform?","Bio::Command","Bio/Command.html#method-i-windows_platform-3F","()","<p><strong>CAUTION</strong> Bio::Command INTERNAL USE ONLY. Users must NOT use\nthe method. The method will be removed when …\n"],["with_cut_symbols","Bio::RestrictionEnzyme::SingleStrand","Bio/RestrictionEnzyme/SingleStrand.html#method-i-with_cut_symbols","()","<p>The sequence with &#39;n&#39; padding and cut symbols.\n<p><code>SingleStrand.new(&#39;garraxt&#39;, [-2, 1,\n7]).with_cut_symbols</code> …\n\n"],["with_spaces","Bio::RestrictionEnzyme::SingleStrand","Bio/RestrictionEnzyme/SingleStrand.html#method-i-with_spaces","()","<p>The sequence with &#39;n&#39; pads, cut symbols, and spacing for alignment.\n<p><code>SingleStrand.new(&#39;garraxt&#39;,</code> …\n\n"],["words","Bio::FastaDefline","Bio/FastaDefline.html#method-i-words","(case_sensitive = nil, kill_regexp = self.class::KillRegexpArray, kwhash = self.class::KillWordsHash)","<p>Shows words used in the defline. Returns an Array.\n"],["write","Bio::FlatFileIndex::DataBank","Bio/FlatFileIndex/DataBank.html#method-i-write","(mode = 'wb', *bdbarg)",""],["write_record","Bio::FlatFileIndex::Flat_1::FlatMappingFile","Bio/FlatFileIndex/Flat_1/FlatMappingFile.html#method-i-write_record","(str)","<p>methods for writing file\n"],["writeback_array","Bio::FlatFileIndex::BDBwrapper","Bio/FlatFileIndex/BDBwrapper.html#method-i-writeback_array","(prefix, array, *arg)",""],["x","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-x","()","<p>Deprecated. Same as self.graphics.x (additional nil checks may be needed).\n<p>X axis position (Integer or …\n"],["x","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-x","()","<p>x\n"],["x=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-x-3D","(val)","<p>Deprecated. Same as self.graphics.x= (additional nil checks may be needed).\n"],["x=","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-x-3D","(n)","<p>x=(n)\n"],["xyz","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-xyz","()","<p>returns self.\n"],["xyz","Bio::PDB::Record::ATOM","Bio/PDB/Record/ATOM.html#method-i-xyz","()","<p>Returns a Coordinate class instance of the xyz positions\n"],["y","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-y","()","<p>Deprecated. Same as self.graphics.y (additional nil checks may be needed).\n<p>Y axis position (Integer or …\n"],["y","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-y","()","<p>y\n"],["y=","Bio::KEGG::KGML::Entry","Bio/KEGG/KGML/Entry.html#method-i-y-3D","(val)","<p>Deprecated. Same as self.graphics.y= (additional nil checks may be needed).\n"],["y=","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-y-3D","(n)","<p>y=(n)\n"],["year","Bio::MEDLINE","Bio/MEDLINE.html#method-i-year","()",""],["z","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-z","()","<p>z\n"],["z=","Bio::PDB::Coordinate","Bio/PDB/Coordinate.html#method-i-z-3D","(n)","<p>z=(n)\n"],["KNOWN_ISSUES","","KNOWN_ISSUES_rdoc.html","","<p>KNOWN_ISSUES.rdoc - Known issues and bugs in BioRuby\n<p>Copyright &mdash; Copyright (C) 2009-2019 Naohisa Goto &lt;ng@bioruby.org&gt; …\n"],["README","","README_rdoc.html","","<p>BioRuby\n<p>Copyright (C) 2001-2019 Toshiaki Katayama &lt;k@bioruby.org&gt;\n<p>BioRuby is an open source Ruby …\n"],["README_DEV","","README_DEV_rdoc.html","","<p>README.DEV\n<p>Copyright &mdash; Copyright (C) 2005, 2006 Toshiaki Katayama &lt;k@bioruby.org&gt;\n<p>Copyright &mdash; Copyright …\n"],["RELEASE_NOTES","","RELEASE_NOTES_rdoc.html","","<p>BioRuby 2.0.0 RELEASE NOTES\n<p>A lot of changes have been made to the BioRuby 2.0.0 after the version\n1.5.x …\n"],["Changes-1.3","","doc/Changes-1_3_rdoc.html","","<p>Incompatible and important changes since the BioRuby 1.2.1 release\n<p>A lot of changes have been made to …\n"],["RELEASE_NOTES-1.4.0","","doc/RELEASE_NOTES-1_4_0_rdoc.html","","<p>BioRuby 1.4.0 RELEASE NOTES\n<p>A lot of changes have been made to the BioRuby 1.4.0 after the version\n1.3.1 …\n"],["RELEASE_NOTES-1.4.1","","doc/RELEASE_NOTES-1_4_1_rdoc.html","","<p>BioRuby 1.4.1 RELEASE NOTES\n<p>A lot of changes have been made to the BioRuby 1.4.1 after the version\n1.4.0 …\n"],["RELEASE_NOTES-1.4.2","","doc/RELEASE_NOTES-1_4_2_rdoc.html","","<p>BioRuby 1.4.2 RELEASE NOTES\n<p>A lot of changes have been made to the BioRuby 1.4.2 after the version\n1.4.1 …\n"],["RELEASE_NOTES-1.4.3","","doc/RELEASE_NOTES-1_4_3_rdoc.html","","<p>BioRuby 1.4.3 RELEASE NOTES\n<p>A lot of changes have been made to the BioRuby 1.4.3 after the version\n1.4.2 …\n"],["RELEASE_NOTES-1.5.0","","doc/RELEASE_NOTES-1_5_0_rdoc.html","","<p>BioRuby 1.5.0 RELEASE NOTES\n<p>A lot of changes have been made to the BioRuby 1.5.0 after the version\n1.4.3 …\n"]]}}